window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "v2gevil", "modulename": "v2gevil", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "v2gevil.car", "modulename": "v2gevil.car", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "v2gevil.car.car", "modulename": "v2gevil.car.car", "kind": "module", "doc": "<p>Module for car implementation.</p>\n\n<p>This implementation will be done by using socket library.</p>\n"}, {"fullname": "v2gevil.car.car.logger", "modulename": "v2gevil.car.car", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.car.car (WARNING)&gt;"}, {"fullname": "v2gevil.car.car.V2G_UDP_SDP_SERVER", "modulename": "v2gevil.car.car", "qualname": "V2G_UDP_SDP_SERVER", "kind": "variable", "doc": "<p></p>\n", "default_value": "15118"}, {"fullname": "v2gevil.car.car.V2G_UDP_SDP_CLIENT", "modulename": "v2gevil.car.car", "qualname": "V2G_UDP_SDP_CLIENT", "kind": "variable", "doc": "<p></p>\n", "default_value": "range(49152, 65535)"}, {"fullname": "v2gevil.car.car.V2G_DST_TCP_DATA", "modulename": "v2gevil.car.car", "qualname": "V2G_DST_TCP_DATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "range(49152, 65535)"}, {"fullname": "v2gevil.car.car.V2G_SRC_TCP_DATA", "modulename": "v2gevil.car.car", "qualname": "V2G_SRC_TCP_DATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "range(49152, 65535)"}, {"fullname": "v2gevil.car.car.ClientManager", "modulename": "v2gevil.car.car", "qualname": "ClientManager", "kind": "class", "doc": "<p>Class for managing client (car).</p>\n"}, {"fullname": "v2gevil.car.car.ClientManager.__init__", "modulename": "v2gevil.car.car", "qualname": "ClientManager.__init__", "kind": "function", "doc": "<p>Initialize.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;eth_car&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ipv6_address</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fe80::d237:45ff:fe88:b12a&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">protocol</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;</span><span class=\"se\">\\x00</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tls_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">accept_security</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "v2gevil.car.car.ClientManager.interface", "modulename": "v2gevil.car.car", "qualname": "ClientManager.interface", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.car.car.ClientManager.ipv6_address", "modulename": "v2gevil.car.car", "qualname": "ClientManager.ipv6_address", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.car.car.ClientManager.protocol", "modulename": "v2gevil.car.car", "qualname": "ClientManager.protocol", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.car.car.ClientManager.tls_flag", "modulename": "v2gevil.car.car", "qualname": "ClientManager.tls_flag", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.car.car.ClientManager.accept_security", "modulename": "v2gevil.car.car", "qualname": "ClientManager.accept_security", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.car.car.ClientManager.tcp_server_address", "modulename": "v2gevil.car.car", "qualname": "ClientManager.tcp_server_address", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.car.car.ClientManager.tcp_server_port", "modulename": "v2gevil.car.car", "qualname": "ClientManager.tcp_server_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.car.car.ClientManager.sdp_client", "modulename": "v2gevil.car.car", "qualname": "ClientManager.sdp_client", "kind": "function", "doc": "<p>Start SDP client.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.car.car.ClientManager.sdp_response_handler", "modulename": "v2gevil.car.car", "qualname": "ClientManager.sdp_response_handler", "kind": "function", "doc": "<p>Handle SDP response from SDP server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>, </span><span class=\"param\"><span class=\"n\">server_address</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.car.car.ClientManager.tcp_client", "modulename": "v2gevil.car.car", "qualname": "ClientManager.tcp_client", "kind": "function", "doc": "<p>Start TCP client.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">security_byte</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.car.car.start", "modulename": "v2gevil.car.car", "qualname": "start", "kind": "function", "doc": "<p>Start car.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;eth_car&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ipv6_address</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fe80::d237:45ff:fe88:b12a&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">protocol</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;</span><span class=\"se\">\\x00</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tls_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">accept_security</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.car.car.start_sdp_client", "modulename": "v2gevil.car.car", "qualname": "start_sdp_client", "kind": "function", "doc": "<p>Start SDP client.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;eth_car&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">protocol</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;</span><span class=\"se\">\\x00</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tls_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.car.car.start_tcp_client", "modulename": "v2gevil.car.car", "qualname": "start_tcp_client", "kind": "function", "doc": "<p>Start TCP client.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;eth_car&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">server_address</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fe80::d237:45ff:fe88:b12b&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">server_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">15119</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.car.car_scapy", "modulename": "v2gevil.car.car_scapy", "kind": "module", "doc": "<p>Module for car implementation.</p>\n\n<p>This implementation will be done by using Scapy library.</p>\n"}, {"fullname": "v2gevil.cli", "modulename": "v2gevil.cli", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "v2gevil.cli.car_tools", "modulename": "v2gevil.cli.car_tools", "kind": "module", "doc": "<p>Car related tools.</p>\n\n<p>Calling logic from car module.</p>\n"}, {"fullname": "v2gevil.cli.car_tools.car_tools", "modulename": "v2gevil.cli.car_tools", "qualname": "car_tools", "kind": "variable", "doc": "<p>Car tool related commands</p>\n", "default_value": "&lt;RichGroup car-tools&gt;"}, {"fullname": "v2gevil.cli.car_tools.start_car", "modulename": "v2gevil.cli.car_tools", "qualname": "start_car", "kind": "variable", "doc": "<p>Start car.</p>\n", "default_value": "&lt;RichCommand start&gt;"}, {"fullname": "v2gevil.cli.console", "modulename": "v2gevil.cli.console", "kind": "module", "doc": "<p>Console object for rich</p>\n"}, {"fullname": "v2gevil.cli.console.console", "modulename": "v2gevil.cli.console", "qualname": "console", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;console width=80 None&gt;"}, {"fullname": "v2gevil.cli.message_tools", "modulename": "v2gevil.cli.message_tools", "kind": "module", "doc": "<p>Message tools.</p>\n\n<p>Calling logic from messages module.</p>\n"}, {"fullname": "v2gevil.cli.message_tools.message_tools", "modulename": "v2gevil.cli.message_tools", "qualname": "message_tools", "kind": "variable", "doc": "<p>Message tool related commands</p>\n", "default_value": "&lt;RichGroup message-tools&gt;"}, {"fullname": "v2gevil.cli.message_tools.generate_default", "modulename": "v2gevil.cli.message_tools", "qualname": "generate_default", "kind": "variable", "doc": "<p>Generate messages</p>\n", "default_value": "&lt;RichCommand generate-default&gt;"}, {"fullname": "v2gevil.cli.modules_tools", "modulename": "v2gevil.cli.modules_tools", "kind": "module", "doc": "<p>Calling logic for testing modules.</p>\n\n<p>Testing modules in this context are modules which are testing some specific\nfunctionality of the EV/EVSE. For example testing of the TLS or testing of the\ninvalid messages and other action related to enumeration and security testing.</p>\n"}, {"fullname": "v2gevil.cli.modules_tools.modules_tools", "modulename": "v2gevil.cli.modules_tools", "qualname": "modules_tools", "kind": "variable", "doc": "<p>Modules tool related commands</p>\n", "default_value": "&lt;RichGroup modules-tools&gt;"}, {"fullname": "v2gevil.cli.modules_tools.enumerate_ev", "modulename": "v2gevil.cli.modules_tools", "qualname": "enumerate_ev", "kind": "variable", "doc": "<p>Enumerate EV</p>\n", "default_value": "&lt;RichCommand enumerate-EV&gt;"}, {"fullname": "v2gevil.cli.modules_tools.fuzz_ev", "modulename": "v2gevil.cli.modules_tools", "qualname": "fuzz_ev", "kind": "variable", "doc": "<p>Fuzz EV</p>\n", "default_value": "&lt;RichCommand fuzz-EV&gt;"}, {"fullname": "v2gevil.cli.sender_tools", "modulename": "v2gevil.cli.sender_tools", "kind": "module", "doc": "<p>Sender tools.</p>\n\n<p>Calling logic from sender module.</p>\n"}, {"fullname": "v2gevil.cli.sender_tools.sender_tools", "modulename": "v2gevil.cli.sender_tools", "qualname": "sender_tools", "kind": "variable", "doc": "<p>Sender tool related commands</p>\n", "default_value": "&lt;RichGroup sender-tools&gt;"}, {"fullname": "v2gevil.cli.sniffer_tools", "modulename": "v2gevil.cli.sniffer_tools", "kind": "module", "doc": "<p>Sniffer tools.</p>\n\n<p>Calling logic from sniffer module.</p>\n"}, {"fullname": "v2gevil.cli.sniffer_tools.sniffer_tools", "modulename": "v2gevil.cli.sniffer_tools", "qualname": "sniffer_tools", "kind": "variable", "doc": "<p>Sniffer tool related commands</p>\n", "default_value": "&lt;RichGroup sniffer-tools&gt;"}, {"fullname": "v2gevil.cli.sniffer_tools.sniff", "modulename": "v2gevil.cli.sniffer_tools", "qualname": "sniff", "kind": "variable", "doc": "<p>Call method for Sniffing packets live on interface or analyze pcap file</p>\n", "default_value": "&lt;RichCommand sniff&gt;"}, {"fullname": "v2gevil.cli.sniffer_tools.inspect", "modulename": "v2gevil.cli.sniffer_tools", "qualname": "inspect", "kind": "variable", "doc": "<p>Method for inspecting one packet with given number of the packet</p>\n", "default_value": "&lt;RichCommand inspect&gt;"}, {"fullname": "v2gevil.cli.station_tools", "modulename": "v2gevil.cli.station_tools", "kind": "module", "doc": "<p>Station related tools.</p>\n\n<p>Calling logic from car module.</p>\n"}, {"fullname": "v2gevil.cli.station_tools.station_tools", "modulename": "v2gevil.cli.station_tools", "qualname": "station_tools", "kind": "variable", "doc": "<p>Station tool related commands</p>\n", "default_value": "&lt;RichGroup station-tools&gt;"}, {"fullname": "v2gevil.cli.station_tools.start_station", "modulename": "v2gevil.cli.station_tools", "qualname": "start_station", "kind": "variable", "doc": "<p>Start station (SECC)</p>\n", "default_value": "&lt;RichCommand start&gt;"}, {"fullname": "v2gevil.cli.v2gtp_tools", "modulename": "v2gevil.cli.v2gtp_tools", "kind": "module", "doc": "<p>V2GTP tools.</p>\n\n<p>Calling logic from V2GTP module.</p>\n"}, {"fullname": "v2gevil.cli.v2gtp_tools.v2gtp_tools", "modulename": "v2gevil.cli.v2gtp_tools", "qualname": "v2gtp_tools", "kind": "variable", "doc": "<p>V2GTP tool related commands</p>\n", "default_value": "&lt;RichGroup v2gtp-tools&gt;"}, {"fullname": "v2gevil.cli.v2gtp_tools.extract", "modulename": "v2gevil.cli.v2gtp_tools", "qualname": "extract", "kind": "variable", "doc": "<p>Extract V2GTP packets from pcap file</p>\n", "default_value": "&lt;RichCommand extract&gt;"}, {"fullname": "v2gevil.cli.v2gtp_tools.decode", "modulename": "v2gevil.cli.v2gtp_tools", "qualname": "decode", "kind": "variable", "doc": "<p>Decode V2GTP packet from pcap file</p>\n", "default_value": "&lt;RichCommand decode&gt;"}, {"fullname": "v2gevil.enumerator", "modulename": "v2gevil.enumerator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "v2gevil.enumerator.enumerate_ev", "modulename": "v2gevil.enumerator.enumerate_ev", "kind": "module", "doc": "<p>This module is used to enumerate all possible information about the EV</p>\n"}, {"fullname": "v2gevil.enumerator.enumerate_ev.enumerate_ev", "modulename": "v2gevil.enumerator.enumerate_ev", "qualname": "enumerate_ev", "kind": "function", "doc": "<p>Enumerate EV.</p>\n\n<p>To end the station press CTRL+C, the enumeration will be printed after station\nis stopped, because enumerator is running in the background and collecting\nall possible information about the EV.</p>\n\n<p>Args:\n    interface (str, optional): Interface to run station on. Defaults to \"eth_station\".\n    accept_security (bool, optional): Station should follow security provided by EVCC. Defaults to True.\n    enum_mode (str, optional): Mode of enumeration. Defaults to \"all\".\n        all: Enumerate all possible information about EV\n        supported_protocols: Enumerate supported protocols by EV\n        tls_check: Check if TLS is required by EV\n        tls_recognition: Check if TLS is required by EV and                recognize if in this environment is TLS needed.                Based on the transmitted messages and information in them.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;eth_station&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">accept_security</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">enum_mode</span><span class=\"p\">:</span> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">enumerator</span><span class=\"o\">.</span><span class=\"n\">enumerator_enums</span><span class=\"o\">.</span><span class=\"n\">EVEnumMode</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">EVEnumMode</span><span class=\"o\">.</span><span class=\"n\">ALL</span><span class=\"p\">:</span> <span class=\"s1\">&#39;all&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.enumerator.enumerator", "modulename": "v2gevil.enumerator.enumerator", "kind": "module", "doc": "<p>This module is used to enumerate all possible information about the EV\nand display it to the user.</p>\n"}, {"fullname": "v2gevil.enumerator.enumerator.logger", "modulename": "v2gevil.enumerator.enumerator", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.enumerator.enumerator (WARNING)&gt;"}, {"fullname": "v2gevil.enumerator.enumerator.EVEnumerator", "modulename": "v2gevil.enumerator.enumerator", "qualname": "EVEnumerator", "kind": "class", "doc": "<p>EV enumerator class.</p>\n"}, {"fullname": "v2gevil.enumerator.enumerator.EVEnumerator.sdp_request", "modulename": "v2gevil.enumerator.enumerator", "qualname": "EVEnumerator.sdp_request", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[v2gevil.v2gtp.v2gtp.V2GTPMessage]"}, {"fullname": "v2gevil.enumerator.enumerator.EVEnumerator.v2g_requests_dict", "modulename": "v2gevil.enumerator.enumerator", "qualname": "EVEnumerator.v2g_requests_dict", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, v2gevil.v2gtp.v2gtp.V2GTPMessage]"}, {"fullname": "v2gevil.enumerator.enumerator.EVEnumerator.msgs_for_enum", "modulename": "v2gevil.enumerator.enumerator", "qualname": "EVEnumerator.msgs_for_enum", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.enumerator.enumerator.EVEnumerator.enum_modes", "modulename": "v2gevil.enumerator.enumerator", "qualname": "EVEnumerator.enum_modes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.enumerator.enumerator.EVEnumerator.tls_version", "modulename": "v2gevil.enumerator.enumerator", "qualname": "EVEnumerator.tls_version", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "v2gevil.enumerator.enumerator.EVEnumerator.cipher_suite", "modulename": "v2gevil.enumerator.enumerator", "qualname": "EVEnumerator.cipher_suite", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Tuple[str, str, int]]"}, {"fullname": "v2gevil.enumerator.enumerator.EVEnumerator.shared_ciphers", "modulename": "v2gevil.enumerator.enumerator", "qualname": "EVEnumerator.shared_ciphers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[Tuple[str, str, int]]]"}, {"fullname": "v2gevil.enumerator.enumerator.EVEnumerator.add_supported_protocols_check", "modulename": "v2gevil.enumerator.enumerator", "qualname": "EVEnumerator.add_supported_protocols_check", "kind": "function", "doc": "<p>Enumerate which protocols are supported by EV.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.enumerator.enumerator.EVEnumerator.add_tls_check", "modulename": "v2gevil.enumerator.enumerator", "qualname": "EVEnumerator.add_tls_check", "kind": "function", "doc": "<p>Check if TLS is required by EV.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.enumerator.enumerator.EVEnumerator.add_tls_enum", "modulename": "v2gevil.enumerator.enumerator", "qualname": "EVEnumerator.add_tls_enum", "kind": "function", "doc": "<p>Add TLS enumeration mode.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.enumerator.enumerator.EVEnumerator.add_all", "modulename": "v2gevil.enumerator.enumerator", "qualname": "EVEnumerator.add_all", "kind": "function", "doc": "<p>Add all possible enumeration modes.</p>\n\n<p>Exclude mutually exclusive =&gt; TLS_CHECK_ONLY exclude other modes,\nbecause after TLS_CHECK_ONLY is done, station should be stopped.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.enumerator.enumerator.EVEnumerator.print_supported_protocols", "modulename": "v2gevil.enumerator.enumerator", "qualname": "EVEnumerator.print_supported_protocols", "kind": "function", "doc": "<p>Print supported protocols.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.enumerator.enumerator.EVEnumerator.print_tls_check_result", "modulename": "v2gevil.enumerator.enumerator", "qualname": "EVEnumerator.print_tls_check_result", "kind": "function", "doc": "<p>Print TLS check result.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.enumerator.enumerator.EVEnumerator.print_tls_enum_result", "modulename": "v2gevil.enumerator.enumerator", "qualname": "EVEnumerator.print_tls_enum_result", "kind": "function", "doc": "<p>Print TLS enumeration result.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.enumerator.enumerator.EVEnumerator.print_all", "modulename": "v2gevil.enumerator.enumerator", "qualname": "EVEnumerator.print_all", "kind": "function", "doc": "<p>Print all enumeration results.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.enumerator.enumerator.EVSEEnumerator", "modulename": "v2gevil.enumerator.enumerator", "qualname": "EVSEEnumerator", "kind": "class", "doc": "<p>EVSE enumerator class.</p>\n"}, {"fullname": "v2gevil.enumerator.enumerator.EVSEEnumerator.enumerate_supported_proto", "modulename": "v2gevil.enumerator.enumerator", "qualname": "EVSEEnumerator.enumerate_supported_proto", "kind": "function", "doc": "<p>Enumerate supported protocols.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.enumerator.enumerator_enums", "modulename": "v2gevil.enumerator.enumerator_enums", "kind": "module", "doc": "<p>This module contains enums for the enumeration module.</p>\n"}, {"fullname": "v2gevil.enumerator.enumerator_enums.EVEnumMode", "modulename": "v2gevil.enumerator.enumerator_enums", "qualname": "EVEnumMode", "kind": "class", "doc": "<p>Enumeration of modes for EV enumeration.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.enumerator.enumerator_enums.EVEnumMode.ALL", "modulename": "v2gevil.enumerator.enumerator_enums", "qualname": "EVEnumMode.ALL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVEnumMode.ALL: &#x27;all&#x27;&gt;"}, {"fullname": "v2gevil.enumerator.enumerator_enums.EVEnumMode.SUPPORTED_PROTOCOLS", "modulename": "v2gevil.enumerator.enumerator_enums", "qualname": "EVEnumMode.SUPPORTED_PROTOCOLS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVEnumMode.SUPPORTED_PROTOCOLS: &#x27;supported_protocols&#x27;&gt;"}, {"fullname": "v2gevil.enumerator.enumerator_enums.EVEnumMode.TLS_CHECK", "modulename": "v2gevil.enumerator.enumerator_enums", "qualname": "EVEnumMode.TLS_CHECK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVEnumMode.TLS_CHECK: &#x27;tls_check&#x27;&gt;"}, {"fullname": "v2gevil.enumerator.enumerator_enums.EVEnumMode.TLS_ENUM", "modulename": "v2gevil.enumerator.enumerator_enums", "qualname": "EVEnumMode.TLS_ENUM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVEnumMode.TLS_ENUM: &#x27;tls_enum&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer", "modulename": "v2gevil.fuzzer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.authorization", "modulename": "v2gevil.fuzzer.authorization", "kind": "module", "doc": "<p>Fuzzer classes for Authorization request and response messages.</p>\n"}, {"fullname": "v2gevil.fuzzer.authorization.logger", "modulename": "v2gevil.fuzzer.authorization", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.fuzzer.authorization (WARNING)&gt;"}, {"fullname": "v2gevil.fuzzer.authorization.FuzzerAuthorizationRes", "modulename": "v2gevil.fuzzer.authorization", "qualname": "FuzzerAuthorizationRes", "kind": "class", "doc": "<p>Fuzzer Class for Authorization Response message</p>\n"}, {"fullname": "v2gevil.fuzzer.authorization.FuzzerAuthorizationRes.__init__", "modulename": "v2gevil.fuzzer.authorization", "qualname": "FuzzerAuthorizationRes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_fuzz_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_default_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "v2gevil.fuzzer.authorization.FuzzerAuthorizationRes.msg_config", "modulename": "v2gevil.fuzzer.authorization", "qualname": "FuzzerAuthorizationRes.msg_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.authorization.FuzzerAuthorizationRes.msg_fuzz_dict", "modulename": "v2gevil.fuzzer.authorization", "qualname": "FuzzerAuthorizationRes.msg_fuzz_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.authorization.FuzzerAuthorizationRes.msg_default_dict", "modulename": "v2gevil.fuzzer.authorization", "qualname": "FuzzerAuthorizationRes.msg_default_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.authorization.FuzzerAuthorizationRes.fuzz", "modulename": "v2gevil.fuzzer.authorization", "qualname": "FuzzerAuthorizationRes.fuzz", "kind": "function", "doc": "<p>Fuzz the message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.cable_check", "modulename": "v2gevil.fuzzer.cable_check", "kind": "module", "doc": "<p>Fuzzer classes for Cable Check request and response messages.</p>\n"}, {"fullname": "v2gevil.fuzzer.cable_check.FuzzerCableCheckRes", "modulename": "v2gevil.fuzzer.cable_check", "qualname": "FuzzerCableCheckRes", "kind": "class", "doc": "<p>Fuzzer class for Cable Check response message</p>\n"}, {"fullname": "v2gevil.fuzzer.cable_check.FuzzerCableCheckRes.__init__", "modulename": "v2gevil.fuzzer.cable_check", "qualname": "FuzzerCableCheckRes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_fuzz_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_default_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "v2gevil.fuzzer.cable_check.FuzzerCableCheckRes.msg_config", "modulename": "v2gevil.fuzzer.cable_check", "qualname": "FuzzerCableCheckRes.msg_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.cable_check.FuzzerCableCheckRes.msg_fuzz_dict", "modulename": "v2gevil.fuzzer.cable_check", "qualname": "FuzzerCableCheckRes.msg_fuzz_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.cable_check.FuzzerCableCheckRes.msg_default_dict", "modulename": "v2gevil.fuzzer.cable_check", "qualname": "FuzzerCableCheckRes.msg_default_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.cable_check.FuzzerCableCheckRes.fuzz", "modulename": "v2gevil.fuzzer.cable_check", "qualname": "FuzzerCableCheckRes.fuzz", "kind": "function", "doc": "<p>Fuzz the message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.charge_parameter_discovery", "modulename": "v2gevil.fuzzer.charge_parameter_discovery", "kind": "module", "doc": "<p>Fuzzer classes for Charge Parameter Discovery request and response messages.</p>\n"}, {"fullname": "v2gevil.fuzzer.charge_parameter_discovery.logger", "modulename": "v2gevil.fuzzer.charge_parameter_discovery", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.fuzzer.charge_parameter_discovery (WARNING)&gt;"}, {"fullname": "v2gevil.fuzzer.charge_parameter_discovery.FuzzerChargeParameterDiscoveryRes", "modulename": "v2gevil.fuzzer.charge_parameter_discovery", "qualname": "FuzzerChargeParameterDiscoveryRes", "kind": "class", "doc": "<p>Fuzzer Class for Charge Parameter Discovery Response message</p>\n"}, {"fullname": "v2gevil.fuzzer.charge_parameter_discovery.FuzzerChargeParameterDiscoveryRes.__init__", "modulename": "v2gevil.fuzzer.charge_parameter_discovery", "qualname": "FuzzerChargeParameterDiscoveryRes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_fuzz_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_default_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">charging_mode</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">station</span><span class=\"o\">.</span><span class=\"n\">station_enums</span><span class=\"o\">.</span><span class=\"n\">EVSEChargingMode</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">EVSEChargingMode</span><span class=\"o\">.</span><span class=\"n\">AC</span><span class=\"p\">:</span> <span class=\"s1\">&#39;AC&#39;</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "v2gevil.fuzzer.charge_parameter_discovery.FuzzerChargeParameterDiscoveryRes.msg_config", "modulename": "v2gevil.fuzzer.charge_parameter_discovery", "qualname": "FuzzerChargeParameterDiscoveryRes.msg_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.charge_parameter_discovery.FuzzerChargeParameterDiscoveryRes.msg_fuzz_dict", "modulename": "v2gevil.fuzzer.charge_parameter_discovery", "qualname": "FuzzerChargeParameterDiscoveryRes.msg_fuzz_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.charge_parameter_discovery.FuzzerChargeParameterDiscoveryRes.msg_default_dict", "modulename": "v2gevil.fuzzer.charge_parameter_discovery", "qualname": "FuzzerChargeParameterDiscoveryRes.msg_default_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.charge_parameter_discovery.FuzzerChargeParameterDiscoveryRes.charging_mode", "modulename": "v2gevil.fuzzer.charge_parameter_discovery", "qualname": "FuzzerChargeParameterDiscoveryRes.charging_mode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.charge_parameter_discovery.FuzzerChargeParameterDiscoveryRes.fuzz", "modulename": "v2gevil.fuzzer.charge_parameter_discovery", "qualname": "FuzzerChargeParameterDiscoveryRes.fuzz", "kind": "function", "doc": "<p>Fuzz the message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.charging_status", "modulename": "v2gevil.fuzzer.charging_status", "kind": "module", "doc": "<p>Fuzzer classes for Charging Status request and response messages.</p>\n"}, {"fullname": "v2gevil.fuzzer.charging_status.FuzzerChargingStatusRes", "modulename": "v2gevil.fuzzer.charging_status", "qualname": "FuzzerChargingStatusRes", "kind": "class", "doc": "<p>Fuzzer Class for Charging Status Response message</p>\n"}, {"fullname": "v2gevil.fuzzer.charging_status.FuzzerChargingStatusRes.__init__", "modulename": "v2gevil.fuzzer.charging_status", "qualname": "FuzzerChargingStatusRes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_fuzz_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_default_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "v2gevil.fuzzer.charging_status.FuzzerChargingStatusRes.msg_config", "modulename": "v2gevil.fuzzer.charging_status", "qualname": "FuzzerChargingStatusRes.msg_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.charging_status.FuzzerChargingStatusRes.msg_fuzz_dict", "modulename": "v2gevil.fuzzer.charging_status", "qualname": "FuzzerChargingStatusRes.msg_fuzz_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.charging_status.FuzzerChargingStatusRes.msg_default_dict", "modulename": "v2gevil.fuzzer.charging_status", "qualname": "FuzzerChargingStatusRes.msg_default_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.charging_status.FuzzerChargingStatusRes.fuzz", "modulename": "v2gevil.fuzzer.charging_status", "qualname": "FuzzerChargingStatusRes.fuzz", "kind": "function", "doc": "<p>Fuzz the message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.current_demand", "modulename": "v2gevil.fuzzer.current_demand", "kind": "module", "doc": "<p>Fuzzer classes for Current Demand request and response messages.</p>\n"}, {"fullname": "v2gevil.fuzzer.current_demand.FuzzerCurrentDemandRes", "modulename": "v2gevil.fuzzer.current_demand", "qualname": "FuzzerCurrentDemandRes", "kind": "class", "doc": "<p>Fuzzer class for Current Demand response message</p>\n"}, {"fullname": "v2gevil.fuzzer.current_demand.FuzzerCurrentDemandRes.__init__", "modulename": "v2gevil.fuzzer.current_demand", "qualname": "FuzzerCurrentDemandRes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_fuzz_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_default_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "v2gevil.fuzzer.current_demand.FuzzerCurrentDemandRes.msg_config", "modulename": "v2gevil.fuzzer.current_demand", "qualname": "FuzzerCurrentDemandRes.msg_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.current_demand.FuzzerCurrentDemandRes.msg_fuzz_dict", "modulename": "v2gevil.fuzzer.current_demand", "qualname": "FuzzerCurrentDemandRes.msg_fuzz_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.current_demand.FuzzerCurrentDemandRes.msg_default_dict", "modulename": "v2gevil.fuzzer.current_demand", "qualname": "FuzzerCurrentDemandRes.msg_default_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.current_demand.FuzzerCurrentDemandRes.fuzz", "modulename": "v2gevil.fuzzer.current_demand", "qualname": "FuzzerCurrentDemandRes.fuzz", "kind": "function", "doc": "<p>Fuzz the message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "kind": "module", "doc": "<p>This module contains methods for fuzzing specifig parameters,\nwhich are used by the fuzzer program.</p>\n"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.logger", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.fuzzer.fuzz_datatypes (WARNING)&gt;"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_general_enum_type", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_general_enum_type", "kind": "function", "doc": "<p>Fuzz enum type</p>\n\n<p>Enum type is xs:string, so valid value is string.\nFuzzer should test values out of enum values.</p>\n\n<p>Relevant modes: random, string, special-string,\n    int, negative-int, float, negative-float</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">enum_list</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.get_attr_conf_mode", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "get_attr_conf_mode", "kind": "function", "doc": "<p>Get fuzzing mode for attribute/field/parameter\n(these are used interchangeably)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">attr_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">fuzzer</span><span class=\"o\">.</span><span class=\"n\">fuzzer_enums</span><span class=\"o\">.</span><span class=\"n\">ParamFuzzMode</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.general_datatype_fuzzing_method", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "general_datatype_fuzzing_method", "kind": "function", "doc": "<p>General fuzz method for complex datatype</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">required_fields</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">all_fields</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pairs_name_method</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">method_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.check_attr_conf_mode", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "check_attr_conf_mode", "kind": "function", "doc": "<p>This method checks if attr_conf is None or empty dict or dict without Mode key.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_schema_id", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_schema_id", "kind": "function", "doc": "<p>Fuzz schema id</p>\n\n<p>SchemaID is xs:unsignedByte, so valid value is in range 0-255.\nFuzzer should test values out of range, for example -1, 256,\nor string instead of number.</p>\n\n<p>Relevant modes: random, string, int, over-int,\n    under-int, float, over-float, under-float</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_response_code", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_response_code", "kind": "function", "doc": "<p>Fuzz response code</p>\n\n<p>ResponseCode is enum, so valid value is one of the enum values responseCodeType.\nType responseCodeType is in MsgDataTypes.py.\nFuzzer should test values out of enum values.</p>\n\n<p>Relevant modes: random, string, special-string,\n    int, negative-int, float, negative-float</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_id", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_id", "kind": "function", "doc": "<p>Fuzz evse id</p>\n\n<p>Inconsistency in the standard. In some messages is EVSEID xs:string\nand in some messages is EVSEID xs:hexBinary.</p>\n\n<p>EVSEID is type xs:string (in xml schema), (min length: 7, max length:37).\nIf an SECC cannot provide such ID data,\nthe value of the EVSEID is set to zero (\"ZZ00000\").\nThe above definition is in SessionSetupRes, ChargingStatusRes.</p>\n\n<p>EVSEID is type: xs:hexBinary, max length 32. (in CurrendDemandRes message).\nIf an SECC cannot provide such ID data,\nthe value of the EVSEID is set to zero (00hex).</p>\n\n<p>Args:\n    val_type (str): Type of EVSEID. Valid values: string, hexBinary.\n        Differ between EVSEID type string and hexBinary based on message.\n    mode: Fuzzing mode for EVSEID.\n        Relevant modes: random, string, int, negative-int, float,\n        negative-float, short-string, long-string, special-string,\n        long-hex, special-hex.\n        The modes with hex in name are only for EVSEID type hexBinary, but\n        if user specify these modes for EVSEID type string, fuzzer will use\n        them.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_timestamp", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_timestamp", "kind": "function", "doc": "<p>Fuzz evse timestamp</p>\n\n<p>Valid value is Unix timestamp, xs:long.\nThe value can be -9223372036854775808 to 9223372036854775807 for xs:long.</p>\n\n<p>For Unix timestamp negative value makes no sense, so fuzzer should test it.</p>\n\n<p>Args:\n    mode: Fuzzing mode for EVSETimestamp.\n        Relevant modes: random, float, under-float, over-float,\n        under-int, over-int, string, special-string,</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_payment_option", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_payment_option", "kind": "function", "doc": "<p>Fuzz payment option.</p>\n\n<p>PaymentOption is list of enum values.\nValid values are defined in paymentOptionType enum:\n    Contract, ExternalPayment</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_payment_option_list", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_payment_option_list", "kind": "function", "doc": "<p>Fuzz payment option list</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_energy_transfer_mode", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_energy_transfer_mode", "kind": "function", "doc": "<p>Fuzz energy transfer mode.</p>\n\n<p>EnergyTransferMode enum values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_supported_energy_transfer_mode", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_supported_energy_transfer_mode", "kind": "function", "doc": "<p>Fuzz supported energy transfer mode</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_charge_service", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_charge_service", "kind": "function", "doc": "<p>Fuzz charge service</p>\n\n<p>ChargeService is extension of ServiceType and combine with\nSupportedEnergyTransferModeType.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_service_id", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_service_id", "kind": "function", "doc": "<p>Fuzz service id</p>\n\n<p>ServiceID is type xs:unsignedShort (in xml schema), so valid values: 0-65535.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_service_name", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_service_name", "kind": "function", "doc": "<p>Fuzz service name</p>\n\n<p>ServiceName is type xs:string (in xml schema), (maxLength: 32).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_service_category", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_service_category", "kind": "function", "doc": "<p>Fuzz service category</p>\n\n<p>ServiceCategory is type serviceCategoryType,\nxs:string, enum, valid values are:\n    EVCharging, Internet, ContractCertificate, OtherCustom</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_service_scope", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_service_scope", "kind": "function", "doc": "<p>Fuzz ServiceScope</p>\n\n<p>serviceScopeType is xs:string in the schema, maxLength 64</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_free_service", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_free_service", "kind": "function", "doc": "<p>Fuzz free service</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_service", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_service", "kind": "function", "doc": "<p>Fuzz service</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_service_list", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_service_list", "kind": "function", "doc": "<p>Fuzz service list</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_parameter_name", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_parameter_name", "kind": "function", "doc": "<p>Fuzz parameter name. In standard is defined as xs:string</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_parameter_type", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_parameter_type", "kind": "function", "doc": "<p>Fuzz parameter type, Mode can be valid or random.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_parameter_bool_value", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_parameter_bool_value", "kind": "function", "doc": "<p>Fuzz parameter boolValue</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_parameter_byte_value", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_parameter_byte_value", "kind": "function", "doc": "<p>Fuzz parameter byteValue</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_parameter_short_value", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_parameter_short_value", "kind": "function", "doc": "<p>Fuzz parameter shortValue</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_parameter_int_value", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_parameter_int_value", "kind": "function", "doc": "<p>Fuzz parameter intValue</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_parameter_string_value", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_parameter_string_value", "kind": "function", "doc": "<p>Fuzz parameter stringValue</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_parameter", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_parameter", "kind": "function", "doc": "<p>Fuzz parameter</p>\n\n<p>Parameter is complex type, so it has attributes and elements.\nIn XSD defined as: parameterType.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_parameter_set_id", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_parameter_set_id", "kind": "function", "doc": "<p>Fuzz ParameterSetID</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_parameter_set", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_parameter_set", "kind": "function", "doc": "<p>Fuzz parameter set</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_service_parameter_list", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_service_parameter_list", "kind": "function", "doc": "<p>Fuzz service detail list</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_gen_challenge", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_gen_challenge", "kind": "function", "doc": "<p>Fuzz gen challenge</p>\n\n<p>GenChallenge is type base64Binary (in xml schema), (length 16).\nGenChallenge should be exactly 16 bytes long (128 bits).</p>\n\n<p>From ISO15118-2 example on page 330, length is length of the data before\nbase64 encoding. Use of UTF-8 encoding is required.\nExample: 'U29tZSBSYW5kb20gRGF0YQ==' =&gt; 'Some Random Data'</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_processing", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_processing", "kind": "function", "doc": "<p>Fuzz evse processing status.</p>\n\n<p>EVSEProcessing is enum, so valid value is one of the enum values EVSEProcessingType.</p>\n\n<p>Type EVSEProcessingType is defined in MsgDataTypes.py.\nFuzzer should test values out of enum values.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_start_timeinterval", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_start_timeinterval", "kind": "function", "doc": "<p>Fuzz start parameter of time interval</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_duration_timeinterval", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_duration_timeinterval", "kind": "function", "doc": "<p>Fuzz duration parameter of time interval</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_time_interval", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_time_interval", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_p_max", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_p_max", "kind": "function", "doc": "<p>Fuzz PMax</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_p_max_schedule_entry", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_p_max_schedule_entry", "kind": "function", "doc": "<p>Fuzz PMaxScheduleEntry</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_p_max_schedule", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_p_max_schedule", "kind": "function", "doc": "<p>Fuzz PMaxSchedule</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_id", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_id", "kind": "function", "doc": "<p>Fuzz Id</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_sales_tariff_id", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_sales_tariff_id", "kind": "function", "doc": "<p>Fuzz sales tariff id</p>\n\n<p>SalesTariffID is type xs:unsignedByte (in xml schema), with restriction:\n    minInclusive value=\"1\", maxInclusive value=\"255\", valid values: 1-255</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_sales_tariff_description", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_sales_tariff_description", "kind": "function", "doc": "<p>Fuzz sales tariff description</p>\n\n<p>SalesTariffDescription is type xs:string (in xml schema), (maxLength: 32).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_num_e_price_levels", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_num_e_price_levels", "kind": "function", "doc": "<p>Fuzz num e price levels</p>\n\n<p>NumEPriceLevels is type xs:unsignedByte (in xml schema)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_e_price_level", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_e_price_level", "kind": "function", "doc": "<p>Fuzz EPriceLevel</p>\n\n<p>EPriceLevel is type xs:unsignedByte (in xml schema)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_cost_kind", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_cost_kind", "kind": "function", "doc": "<p>Fuzz cost kind</p>\n\n<p>costKind is enum, so valid value is one of the enum values costKindType.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_amount", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_amount", "kind": "function", "doc": "<p>Fuzz amount</p>\n\n<p>amount is type xs:unsignedInt (in xml schema)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_amount_multiplier", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_amount_multiplier", "kind": "function", "doc": "<p>Fuzz amount multiplier</p>\n\n<p>amountMultiplier is type xs:byte (in xml schema), with restrictions:\n    minInclusive value=\"-3\", maxInclusive value=\"3\"</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_cost", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_cost", "kind": "function", "doc": "<p>Fuzz cost</p>\n\n<p>Cost is complex type, so it has elements: costKind, amount, amountMultiplier</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_start_value", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_start_value", "kind": "function", "doc": "<p>Fuzz startValue from ConsumptionCost</p>\n\n<p>startValue has WATT as unit (Table 68 in ISO15118-2)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_consumption_cost", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_consumption_cost", "kind": "function", "doc": "<p>Fuzz consumption cost</p>\n\n<p>ConsumptionCost is complex type, so it has elements: startValue, Cost</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_sales_tariff_entry", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_sales_tariff_entry", "kind": "function", "doc": "<p>Fuzz SalesTariffEntry</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_sales_tariff", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_sales_tariff", "kind": "function", "doc": "<p>Fuzz sales tariff</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_sa_schedule_tuple", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_sa_schedule_tuple", "kind": "function", "doc": "<p>Fuzz sa schedule tuple</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_sa_schedule_list", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_sa_schedule_list", "kind": "function", "doc": "<p>Fuzz sa schedule list</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_nominal_voltage", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_nominal_voltage", "kind": "function", "doc": "<p>Fuzz evse nominal voltage</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_ac_evse_charge_parameter", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_ac_evse_charge_parameter", "kind": "function", "doc": "<p>Fuzz ac evse charge parameter</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_max_current_limit", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_max_current_limit", "kind": "function", "doc": "<p>Fuzz evse max current limit</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_max_power_limit", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_max_power_limit", "kind": "function", "doc": "<p>Fuzz evse max power limit</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_max_voltage_limit", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_max_voltage_limit", "kind": "function", "doc": "<p>Fuzz evse max voltage limit</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_min_current_limit", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_min_current_limit", "kind": "function", "doc": "<p>Fuzz evse min current limit</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_min_voltage_limit", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_min_voltage_limit", "kind": "function", "doc": "<p>Fuzz evse min voltage limit</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_current_regulation_tolerance", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_current_regulation_tolerance", "kind": "function", "doc": "<p>Fuzz evse current regulation tolerance</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_peak_current_ripple", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_peak_current_ripple", "kind": "function", "doc": "<p>Fuzz evse peak current ripple</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_energy_to_be_delivered", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_energy_to_be_delivered", "kind": "function", "doc": "<p>Fuzz evse energy to be delivered</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_dc_evse_charge_parameter", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_dc_evse_charge_parameter", "kind": "function", "doc": "<p>Fuzz dc evse charge parameter</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_notification_max_delay", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_notification_max_delay", "kind": "function", "doc": "<p>Fuzz Notification max delay</p>\n\n<p>NotificationMaxDelay is type xs:unsignedShort</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_notification", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_notification", "kind": "function", "doc": "<p>Fuzz evse notification</p>\n\n<p>EVSENotification type is enum, so valid value is one of the enum values EVSENotificationType.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_rcd", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_rcd", "kind": "function", "doc": "<p>Fuzz RCD</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_ac_evse_status", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_ac_evse_status", "kind": "function", "doc": "<p>Fuzz ac evse status</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_isolation_status", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_isolation_status", "kind": "function", "doc": "<p>Fuzz evse isolation status</p>\n\n<p>type enum (isolationLevelType)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_dc_evse_status_code", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_dc_evse_status_code", "kind": "function", "doc": "<p>\"Fuzz DC EVSE Status Code</p>\n\n<p>DC_EVSEStatusCode is enum, so valid value is one of the enum values DC_EVSEStatusCodeType.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_dc_evse_status", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_dc_evse_status", "kind": "function", "doc": "<p>Fuzz dc evse status</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_sa_provisioning_certificate_chain", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_sa_provisioning_certificate_chain", "kind": "function", "doc": "<p>Fuzz sa provisioning certificate chain</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_contract_signature_cert_chain", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_contract_signature_cert_chain", "kind": "function", "doc": "<p>Fuzz contract signature certificate chain</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_contract_signature_encrypted_private_key", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_contract_signature_encrypted_private_key", "kind": "function", "doc": "<p>Fuzz contract signature encrypted private key</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_dh_public_key", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_dh_public_key", "kind": "function", "doc": "<p>Fuzz dh public key</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_emaid", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_emaid", "kind": "function", "doc": "<p>Fuzz emaid</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_retry_counter", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_retry_counter", "kind": "function", "doc": "<p>Fuzz retry counter</p>\n\n<p>If the ResponseCode was 'FAILED_NoCertificateAvailable' or 'FAILED_ContractCanceled',\nthis field contains information, when the EVCC should try to get\nthe new certificate again.\nType is xs:short (in xml schema), so valid values: -32768 to 32767, but\nit has restriction.</p>\n\n<p>The following entries are possible:\n    x &gt; 0: after \u201cx\u201d days\n    0: immediately (at next charging)\n    -1: never</p>\n\n<p>Use this fuzz method only if ResponseCode is 'FAILED_NoCertificateAvailable'\nor 'FAILED_ContractCanceled'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;valid&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_sa_schedule_tuple_id", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_sa_schedule_tuple_id", "kind": "function", "doc": "<p>Fuzz sa schedule tuple id</p>\n\n<p>SAScheduleTupleID is type SAIDType:\nxs:unsignedByte (0-255) (in xml schema), with restriction\nthat value must be in range 1-255.</p>\n\n<p>But for some message is SAScheduleTupleID type SAIDType and\nshort in semantics and type definition for some messages in ISO15118-2.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_multiplier", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_multiplier", "kind": "function", "doc": "<p>Fuzz multiplier</p>\n\n<p>Multiplier xs:byte, minInclusive value=-3, maxInclusive value=3</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;random&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">valid_val</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_unit", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_unit", "kind": "function", "doc": "<p>Fuzz unit</p>\n\n<p>Unit is enum (unitSymbolType), possible values:\nHOURS = \"h\", MINUTES = \"m\", SECONDS = \"s\", AMPERE = \"A\",\nVOLT = \"V\", WATT = \"W\", WATT_HOUR = \"Wh\".</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;random&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">valid_val</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_value", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_value", "kind": "function", "doc": "<p>Fuzz value</p>\n\n<p>Value is simpleType: xs:short (in xml schema).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;random&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">valid_val</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_physical_value_type", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_physical_value_type", "kind": "function", "doc": "<p>Fuzz physical value type</p>\n\n<p>PhysicalValueType is complexType.\nPhysicalValueType contains 3 fields: Multiplier, Unit, Value.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">modes</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">unit_val</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_max_current", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_max_current", "kind": "function", "doc": "<p>Fuzz evse max current.</p>\n\n<p>EVSEMaxCurrent is complexType: PhysicalValueType.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_meter_id", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_meter_id", "kind": "function", "doc": "<p>Fuzz meter id</p>\n\n<p>MeterID is type xs:unsignedByte (in xml schema).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_meter_reading", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_meter_reading", "kind": "function", "doc": "<p>Fuzz meter reading</p>\n\n<p>MeterReading is type xs:unsignedLong (in xml schema).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_sig_meter_reading", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_sig_meter_reading", "kind": "function", "doc": "<p>Fuzz sig meter reading</p>\n\n<p>SigMeterReading is type xs:base64Binary, maxLength 64.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_meter_status", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_meter_status", "kind": "function", "doc": "<p>Fuzz meter status</p>\n\n<p>MeterStatus is type xs:short (in xml schema).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_t_meter", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_t_meter", "kind": "function", "doc": "<p>Fuzz t meter</p>\n\n<p>TMeter is type xs:long (in xml schema).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_meter_info", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_meter_info", "kind": "function", "doc": "<p>Fuzz meter info</p>\n\n<p>MeterInfo is complexType: MeterInfoType.\nIt contains 5 fields: MeterID, MeterReading, SigMeterReading, MeterStatus, TMeter.</p>\n\n<p>MeterID is type xs:unsignedByte (in xml schema).\nMeterReading is type xs:unsignedLong (in xml schema).\nSigMeterReading is type xs:base64Binary, maxLength 64.\nMeterStatus is type xs:short (in xml schema).\nTMeter is type xs:long (in xml schema).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_receipt_required", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_receipt_required", "kind": "function", "doc": "<p>Fuzz receipt required</p>\n\n<p>ReceiptRequired is type xs:boolean (in xml schema).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_present_voltage", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_present_voltage", "kind": "function", "doc": "<p>Fuzz evse present voltage</p>\n\n<p>EVSEPresentVoltage is complexType: PhysicalValueType.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_present_current", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_present_current", "kind": "function", "doc": "<p>Fuzz evse present current</p>\n\n<p>EVSEPresentCurrent is complexType: PhysicalValueType.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_current_limit_achieved", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_current_limit_achieved", "kind": "function", "doc": "<p>Fuzz evse current limit achieved</p>\n\n<p>EVSECurrentLimitAchieved is type xs:boolean (in xml schema).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_voltage_limit_achieved", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_voltage_limit_achieved", "kind": "function", "doc": "<p>Fuzz evse voltage limit achieved</p>\n\n<p>EVSEVoltageLimitAchieved is type xs:boolean (in xml schema).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_power_limit_achieved", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_power_limit_achieved", "kind": "function", "doc": "<p>Fuzz evse power limit achieved</p>\n\n<p>EVSEPowerLimitAchieved is type xs:boolean (in xml schema).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_maximum_voltage", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_maximum_voltage", "kind": "function", "doc": "<p>Fuzz evse maximum voltage</p>\n\n<p>EVSEMaximumVoltage is complexType: PhysicalValueType.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_maximum_current", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_maximum_current", "kind": "function", "doc": "<p>Fuzz evse maximum current</p>\n\n<p>EVSEMaximumCurrent is complexType: PhysicalValueType.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_datatypes.fuzz_evse_maximum_power", "modulename": "v2gevil.fuzzer.fuzz_datatypes", "qualname": "fuzz_evse_maximum_power", "kind": "function", "doc": "<p>Fuzz evse maximum power</p>\n\n<p>EVSEMaximumPower is complexType: PhysicalValueType.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_conf</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valid_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzz_msg_general", "modulename": "v2gevil.fuzzer.fuzz_msg_general", "kind": "module", "doc": "<p>Contains general method for fuzzing message</p>\n"}, {"fullname": "v2gevil.fuzzer.fuzz_msg_general.logger", "modulename": "v2gevil.fuzzer.fuzz_msg_general", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.fuzzer.fuzz_msg_general (WARNING)&gt;"}, {"fullname": "v2gevil.fuzzer.fuzz_msg_general.general_msg_fuzzing_method", "modulename": "v2gevil.fuzzer.fuzz_msg_general", "qualname": "general_msg_fuzzing_method", "kind": "function", "doc": "<p>General method for fuzzing message</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">required_fields</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">all_fields</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_fuzz_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_default_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pairs_name_method</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">class_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer", "modulename": "v2gevil.fuzzer.fuzzer", "kind": "module", "doc": "<p>Module for fuzzing different values in the EVSE response messages.</p>\n"}, {"fullname": "v2gevil.fuzzer.fuzzer.logger", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.fuzzer.fuzzer (WARNING)&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer", "kind": "class", "doc": "<p>EV Fuzzer class.</p>\n\n<p>This class is used to fuzz EV using the EVSE response messages.</p>\n\n<p>Attributes:\n    default_dict (dict): Dictionary containing all response messages\n        for fuzzing. Will not be changed.\n    fuzzing_dict (dict): Dictionary containing all response messages\n        for fuzzing. Will be changed.</p>\n"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.__init__", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;eth_station&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">fuzzer</span><span class=\"o\">.</span><span class=\"n\">fuzzer_enums</span><span class=\"o\">.</span><span class=\"n\">EVFuzzMode</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">EVFuzzMode</span><span class=\"o\">.</span><span class=\"n\">ALL</span><span class=\"p\">:</span> <span class=\"s1\">&#39;all&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">charging_mode</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">station</span><span class=\"o\">.</span><span class=\"n\">station_enums</span><span class=\"o\">.</span><span class=\"n\">EVSEChargingMode</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">EVSEChargingMode</span><span class=\"o\">.</span><span class=\"n\">AC</span><span class=\"p\">:</span> <span class=\"s1\">&#39;AC&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">custom_dict_filename</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">config_filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ev_fuzzer_config_default.toml&#39;</span></span>)</span>"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.default_dict", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.default_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzzing_dict", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzzing_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.custom_dict_filename", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.custom_dict_filename", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.interface", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.interface", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.mode", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.mode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.charging_mode", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.charging_mode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.config_filename", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.config_filename", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz", "kind": "function", "doc": "<p>Fuzz EVSE response messages.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_all", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_all", "kind": "function", "doc": "<p>Fuzz all possible messages and all possible parameters in messages.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_custom", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_custom", "kind": "function", "doc": "<p>Fuzz messages in fuzzing_dict from custom_dict.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_message", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_message", "kind": "function", "doc": "<p>Fuzz only specified message in fuzzing_dict. Message is specified by message_name.</p>\n\n<p>Args:\n    message_name (str): Name of message to fuzz.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_config_based", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_config_based", "kind": "function", "doc": "<p>Fuzz messages and parameters in fuzzing_dict based on config file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_supported_app_protocol_res", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_supported_app_protocol_res", "kind": "function", "doc": "<p>Fuzz supportedAppProtocolRes message in fuzzing_dict</p>\n\n<p>Args:\n    params (list, optional): List of parameters to fuzz. Defaults to None.\n    If None, all parameters will be fuzzed.\n        Possible values: SchemaID, ResponseCode</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_session_setup_res", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_session_setup_res", "kind": "function", "doc": "<p>Fuzz sessionSetupRes message in fuzzing_dict</p>\n\n<p>Args:\n    params (list, optional): List of parameters to fuzz. Defaults to None.\n    If None, all parameters will be fuzzed.\n        Possible values: ResponseCode, EVSEID, EVSETimeStamp</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_service_discovery_res", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_service_discovery_res", "kind": "function", "doc": "<p>Fuzz serviceDiscoveryRes message in fuzzing_dict</p>\n\n<p>Args:\n    params (list, optional): List of parameters to fuzz. Defaults to None.\n    If None, all parameters will be fuzzed.\n        Possible values: ResponseCode, PaymentOptionList, ChargeService, ServiceList</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_service_detail_res", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_service_detail_res", "kind": "function", "doc": "<p>Fuzz serviceDetailRes message in fuzzing_dict</p>\n\n<p>Args:\n    params (list, optional): List of parameters to fuzz. Defaults to None.\n    If None, all parameters will be fuzzed.\n        Possible values: ResponseCode, ServiceID, ServiceParameterList</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_payment_service_selection_res", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_payment_service_selection_res", "kind": "function", "doc": "<p>Fuzz paymentServiceSelectionRes message in fuzzing_dict</p>\n\n<p>Args:\n    params (list, optional): List of parameters to fuzz. Defaults to None.\n    If None, all parameters will be fuzzed.\n        Possible values: ResponseCode</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_payment_details_res", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_payment_details_res", "kind": "function", "doc": "<p>Fuzz paymentDetailRes message in fuzzing_dict</p>\n\n<p>Args:\n    params (list, optional): List of parameters to fuzz. Defaults to None.\n    If None, all parameters will be fuzzed.\n        Possible values: ResponseCode, GenChallenge, EVSETimeStamp</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_authorization_res", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_authorization_res", "kind": "function", "doc": "<p>Fuzz authorizationRes message in fuzzing_dict</p>\n\n<p>Args:\n    params (list, optional): List of parameters to fuzz. Defaults to None.\n    If None, all parameters will be fuzzed.\n        Possible values: ResponseCode, EVSEProcessing</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_charge_parameter_discovery_res", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_charge_parameter_discovery_res", "kind": "function", "doc": "<p>Fuzz chargeParameterDiscoveryRes message in fuzzing_dict</p>\n\n<p>Args:\n    params (list, optional): List of parameters to fuzz. Defaults to None.\n    If None, all parameters will be fuzzed.\n        Possible values: EVSEProcessing, ResponseCode, SAScheduleList,                    AC_EVSEChargeParameter, DC_EVSEChargeParameter                    (AC/DC depending on charging mode)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_power_delivery_res", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_power_delivery_res", "kind": "function", "doc": "<p>Fuzz powerDeliveryRes message in fuzzing_dict</p>\n\n<p>Args:\n    params (list, optional): List of parameters to fuzz. Defaults to None.\n    If None, all parameters will be fuzzed.</p>\n\n<pre><code>    Possible values: ResponseCode, AC_EVSEStatus, DC_EVSEStatus                    (AC/DC depending on charging mode)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_certificate_update_res", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_certificate_update_res", "kind": "function", "doc": "<p>Fuzz certificateUpdateRes message in fuzzing_dict</p>\n\n<p>Args:\n    params (list, optional): List of parameters to fuzz. Defaults to None.\n    If None, all parameters will be fuzzed.</p>\n\n<pre><code>    Possible values: ResponseCode, SAProvisioningCertificateChain,                ContractSignatureCertChain, ContractSignatureEncryptedPrivateKey,                DHpublicKey, eMAID, RetryCounter\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_certificate_installation_res", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_certificate_installation_res", "kind": "function", "doc": "<p>Fuzz certificateInstallationRes message in fuzzing_dict</p>\n\n<p>Args:\n    params (list, optional): List of parameters to fuzz. Defaults to None.\n    If None, all parameters will be fuzzed.</p>\n\n<pre><code>    Possible values: ResponseCode, SAProvisioningCertificateChain,                ContractSignatureCertChain, ContractSignatureEncryptedPrivateKey,                DHpublicKey, eMAID\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_session_stop_res", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_session_stop_res", "kind": "function", "doc": "<p>Fuzz sessionStopRes message in fuzzing_dict</p>\n\n<p>Args:\n    params (list, optional): List of parameters to fuzz. Defaults to None.\n    If None, all parameters will be fuzzed.</p>\n\n<pre><code>    Possible values: ResponseCode\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_metering_receipt_res", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_metering_receipt_res", "kind": "function", "doc": "<p>Fuzz meteringReceiptRes message in fuzzing_dict</p>\n\n<p>Args:\n    params (list, optional): List of parameters to fuzz. Defaults to None.\n    If None, all parameters will be fuzzed.</p>\n\n<pre><code>    Possible values: ResponseCode, AC_EVSEStatus, DC_EVSEStatus                    (AC/DC depending on charging mode)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_charging_status_res", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_charging_status_res", "kind": "function", "doc": "<p>Fuzz chargingStatusRes message in fuzzing_dict</p>\n\n<p>Args:\n    params (list, optional): List of parameters to fuzz. Defaults to None.\n    If None, all parameters will be fuzzed.</p>\n\n<pre><code>    Possible values: ResponseCode, EVSEID, SAScheduleTupleID,                EVSEMaxCurrent, MeterInfo, ReceiptRequired, AC_EVSEStatus\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_cable_check_res", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_cable_check_res", "kind": "function", "doc": "<p>Fuzz cableCheckRes message in fuzzing_dict</p>\n\n<p>Args:\n    params (list, optional): List of parameters to fuzz. Defaults to None.\n    If None, all parameters will be fuzzed.</p>\n\n<pre><code>Possible values:  EVSEProcessing, ResponseCode, DC_EVSEStatus\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_pre_charge_res", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_pre_charge_res", "kind": "function", "doc": "<p>Fuzz preChargeRes message in fuzzing_dict</p>\n\n<p>Args:\n    params (list, optional): List of parameters to fuzz. Defaults to None.\n    If None, all parameters will be fuzzed.</p>\n\n<pre><code>Possible values: ResponseCode, DC_EVSEStatus, EVSEPresentVoltage\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_current_demand_res", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_current_demand_res", "kind": "function", "doc": "<p>Fuzz currentDemandRes message in fuzzing_dict</p>\n\n<p>Args:\n    params (list, optional): List of parameters to fuzz. Defaults to None.\n    If None, all parameters will be fuzzed.</p>\n\n<pre><code>Possible values: ResponseCode, DC_EVSEStatus, EVSEPresentVoltage,                EVSEPresentCurrent, EVSECurrentLimitAchieved,                EVSEVoltageLimitAchieved, EVSEPowerLimitAchieved,                EVSEMaximumVoltage, EVSEMaximumCurrent, EVSEMaximumPower,                EVSEID, SAScheduleTupleID, MeterInfo, ReceiptRequired\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.fuzz_welding_detection_res", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.fuzz_welding_detection_res", "kind": "function", "doc": "<p>Fuzz weldingDetectionRes message in fuzzing_dict</p>\n\n<p>Args:\n    params (list, optional): List of parameters to fuzz. Defaults to None.\n    If None, all parameters will be fuzzed.</p>\n\n<pre><code>Possible values: ResponseCode, DC_EVSEStatus, EVSEPresentVoltage\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVFuzzer.load_fuzz_dict", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVFuzzer.load_fuzz_dict", "kind": "function", "doc": "<p>Load custom fuzzing dictionary</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVSEFuzzer", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVSEFuzzer", "kind": "class", "doc": "<p>EVSE Fuzzer class.</p>\n\n<p>This class is used to fuzz EVSE using the EV request messages.\nThis class is not implemented yet, because the focus of the thesis\nis to test EV, so fuzzing EVSE is not mandatory.</p>\n"}, {"fullname": "v2gevil.fuzzer.fuzzer.EVSEFuzzer.fuzzing_dict", "modulename": "v2gevil.fuzzer.fuzzer", "qualname": "EVSEFuzzer.fuzzing_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums", "modulename": "v2gevil.fuzzer.fuzzer_enums", "kind": "module", "doc": "<p>This module contains enums used by the fuzzer program.</p>\n"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.EVFuzzMode", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "EVFuzzMode", "kind": "class", "doc": "<p>Enum for fuzzing mode</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.EVFuzzMode.ALL", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "EVFuzzMode.ALL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVFuzzMode.ALL: &#x27;all&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.EVFuzzMode.CUSTOM", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "EVFuzzMode.CUSTOM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVFuzzMode.CUSTOM: &#x27;custom&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.EVFuzzMode.MESSAGE", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "EVFuzzMode.MESSAGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVFuzzMode.MESSAGE: &#x27;message&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.EVFuzzMode.CONFIG", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "EVFuzzMode.CONFIG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVFuzzMode.CONFIG: &#x27;config&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode", "kind": "class", "doc": "<p>Enum for parameter fuzzing mode</p>\n\n<p>Working with these modes will be only in fuzz_param.py methods\nand only in method which fuzzes simple type parameters (like int/string),\nnot complex types (like list).</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.VALID", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.VALID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.VALID: &#x27;valid&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.RANDOM", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.RANDOM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.RANDOM: &#x27;random&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.SHORT_STRING", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.SHORT_STRING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.SHORT_STRING: &#x27;short-string&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.LONG_STRING", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.LONG_STRING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.LONG_STRING: &#x27;long-string&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.SPECIAL_STRING", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.SPECIAL_STRING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.SPECIAL_STRING: &#x27;special-string&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.STRING", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.STRING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.STRING: &#x27;string&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.OVER_INT", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.OVER_INT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.OVER_INT: &#x27;over-int&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.UNDER_INT", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.UNDER_INT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.UNDER_INT: &#x27;under-int&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.NEGATIVE_INT", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.NEGATIVE_INT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.NEGATIVE_INT: &#x27;negative-int&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.INT", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.INT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.INT: &#x27;int&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.OVER_FLOAT", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.OVER_FLOAT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.OVER_FLOAT: &#x27;over-float&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.UNDER_FLOAT", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.UNDER_FLOAT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.UNDER_FLOAT: &#x27;under-float&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.NEGATIVE_FLOAT", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.NEGATIVE_FLOAT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.NEGATIVE_FLOAT: &#x27;negative-float&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.FLOAT", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.FLOAT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.FLOAT: &#x27;float&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.HEX", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.HEX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.HEX: &#x27;hex&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.SHORT_HEX", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.SHORT_HEX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.SHORT_HEX: &#x27;short-hex&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.LONG_HEX", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.LONG_HEX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.LONG_HEX: &#x27;long-hex&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.SPECIAL_HEX", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.SPECIAL_HEX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.SPECIAL_HEX: &#x27;special-hex&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.BASE64", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.BASE64", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.BASE64: &#x27;base64&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.SHORT_BASE64", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.SHORT_BASE64", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.SHORT_BASE64: &#x27;short-base64&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.LONG_BASE64", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.LONG_BASE64", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.LONG_BASE64: &#x27;long-base64&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.ParamFuzzMode.SPECIAL_BASE64", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "ParamFuzzMode.SPECIAL_BASE64", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ParamFuzzMode.SPECIAL_BASE64: &#x27;special-base64&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName", "kind": "class", "doc": "<p>Enum for message names</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.SUPPORTED_APP_PROTOCOL_REQ", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.SUPPORTED_APP_PROTOCOL_REQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.SUPPORTED_APP_PROTOCOL_REQ: &#x27;supportedAppProtocolReq&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.SUPPORTED_APP_PROTOCOL_RES", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.SUPPORTED_APP_PROTOCOL_RES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.SUPPORTED_APP_PROTOCOL_RES: &#x27;supportedAppProtocolRes&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.SESSION_SETUP_REQ", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.SESSION_SETUP_REQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.SESSION_SETUP_REQ: &#x27;SessionSetupReq&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.SESSION_SETUP_RES", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.SESSION_SETUP_RES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.SESSION_SETUP_RES: &#x27;SessionSetupRes&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.SERVICE_DISCOVERY_REQ", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.SERVICE_DISCOVERY_REQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.SERVICE_DISCOVERY_REQ: &#x27;ServiceDiscoveryReq&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.SERVICE_DISCOVERY_RES", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.SERVICE_DISCOVERY_RES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.SERVICE_DISCOVERY_RES: &#x27;ServiceDiscoveryRes&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.SERVICE_DETAIL_REQ", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.SERVICE_DETAIL_REQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.SERVICE_DETAIL_REQ: &#x27;ServiceDetailReq&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.SERVICE_DETAIL_RES", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.SERVICE_DETAIL_RES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.SERVICE_DETAIL_RES: &#x27;ServiceDetailRes&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.PAYMENT_SERVICE_SELECTION_REQ", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.PAYMENT_SERVICE_SELECTION_REQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.PAYMENT_SERVICE_SELECTION_REQ: &#x27;PaymentServiceSelectionReq&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.PAYMENT_SERVICE_SELECTION_RES", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.PAYMENT_SERVICE_SELECTION_RES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.PAYMENT_SERVICE_SELECTION_RES: &#x27;PaymentServiceSelectionRes&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.PAYMENT_DETAILS_REQ", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.PAYMENT_DETAILS_REQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.PAYMENT_DETAILS_REQ: &#x27;PaymentDetailsReq&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.PAYMENT_DETAILS_RES", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.PAYMENT_DETAILS_RES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.PAYMENT_DETAILS_RES: &#x27;PaymentDetailsRes&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.AUTHORIZATION_REQ", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.AUTHORIZATION_REQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.AUTHORIZATION_REQ: &#x27;AuthorizationReq&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.AUTHORIZATION_RES", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.AUTHORIZATION_RES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.AUTHORIZATION_RES: &#x27;AuthorizationRes&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.CHARGE_PARAMETER_DISCOVERY_REQ", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.CHARGE_PARAMETER_DISCOVERY_REQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.CHARGE_PARAMETER_DISCOVERY_REQ: &#x27;ChargeParameterDiscoveryReq&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.CHARGE_PARAMETER_DISCOVERY_RES", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.CHARGE_PARAMETER_DISCOVERY_RES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.CHARGE_PARAMETER_DISCOVERY_RES: &#x27;ChargeParameterDiscoveryRes&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.POWER_DELIVERY_REQ", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.POWER_DELIVERY_REQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.POWER_DELIVERY_REQ: &#x27;PowerDeliveryReq&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.POWER_DELIVERY_RES", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.POWER_DELIVERY_RES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.POWER_DELIVERY_RES: &#x27;PowerDeliveryRes&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.METERING_RECEIPT_REQ", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.METERING_RECEIPT_REQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.METERING_RECEIPT_REQ: &#x27;MeteringReceiptReq&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.METERING_RECEIPT_RES", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.METERING_RECEIPT_RES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.METERING_RECEIPT_RES: &#x27;MeteringReceiptRes&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.SESSION_STOP_REQ", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.SESSION_STOP_REQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.SESSION_STOP_REQ: &#x27;SessionStopReq&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.SESSION_STOP_RES", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.SESSION_STOP_RES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.SESSION_STOP_RES: &#x27;SessionStopRes&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.CERTIFICATE_UPDATE_REQ", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.CERTIFICATE_UPDATE_REQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.CERTIFICATE_UPDATE_REQ: &#x27;CertificateUpdateReq&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.CERTIFICATE_UPDATE_RES", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.CERTIFICATE_UPDATE_RES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.CERTIFICATE_UPDATE_RES: &#x27;CertificateUpdateRes&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.CERTIFICATE_INSTALLATION_REQ", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.CERTIFICATE_INSTALLATION_REQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.CERTIFICATE_INSTALLATION_REQ: &#x27;CertificateInstallationReq&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.CERTIFICATE_INSTALLATION_RES", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.CERTIFICATE_INSTALLATION_RES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.CERTIFICATE_INSTALLATION_RES: &#x27;CertificateInstallationRes&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.CHARGING_STATUS_REQ", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.CHARGING_STATUS_REQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.CHARGING_STATUS_REQ: &#x27;ChargingStatusReq&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.CHARGING_STATUS_RES", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.CHARGING_STATUS_RES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.CHARGING_STATUS_RES: &#x27;ChargingStatusRes&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.CABLE_CHECK_REQ", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.CABLE_CHECK_REQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.CABLE_CHECK_REQ: &#x27;CableCheckReq&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.CABLE_CHECK_RES", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.CABLE_CHECK_RES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.CABLE_CHECK_RES: &#x27;CableCheckRes&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.PRE_CHARGE_REQ", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.PRE_CHARGE_REQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.PRE_CHARGE_REQ: &#x27;PreChargeReq&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.PRE_CHARGE_RES", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.PRE_CHARGE_RES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.PRE_CHARGE_RES: &#x27;PreChargeRes&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.CURRENT_DEMAND_REQ", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.CURRENT_DEMAND_REQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.CURRENT_DEMAND_REQ: &#x27;CurrentDemandReq&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.CURRENT_DEMAND_RES", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.CURRENT_DEMAND_RES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.CURRENT_DEMAND_RES: &#x27;CurrentDemandRes&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.WELDING_DETECTION_REQ", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.WELDING_DETECTION_REQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.WELDING_DETECTION_REQ: &#x27;WeldingDetectionReq&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_enums.MessageName.WELDING_DETECTION_RES", "modulename": "v2gevil.fuzzer.fuzzer_enums", "qualname": "MessageName.WELDING_DETECTION_RES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageName.WELDING_DETECTION_RES: &#x27;WeldingDetectionRes&#x27;&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_supported_app_protocol", "modulename": "v2gevil.fuzzer.fuzzer_supported_app_protocol", "kind": "module", "doc": "<p>Fuzzer classes for Supported App Protocol Request and Response messages</p>\n"}, {"fullname": "v2gevil.fuzzer.fuzzer_supported_app_protocol.logger", "modulename": "v2gevil.fuzzer.fuzzer_supported_app_protocol", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.fuzzer.fuzzer_supported_app_protocol (WARNING)&gt;"}, {"fullname": "v2gevil.fuzzer.fuzzer_supported_app_protocol.FuzzerSupportedAppProtocolRes", "modulename": "v2gevil.fuzzer.fuzzer_supported_app_protocol", "qualname": "FuzzerSupportedAppProtocolRes", "kind": "class", "doc": "<p>Fuzzer Class for Supported App Protocol Response message</p>\n"}, {"fullname": "v2gevil.fuzzer.fuzzer_supported_app_protocol.FuzzerSupportedAppProtocolRes.__init__", "modulename": "v2gevil.fuzzer.fuzzer_supported_app_protocol", "qualname": "FuzzerSupportedAppProtocolRes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_fuzz_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_default_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "v2gevil.fuzzer.fuzzer_supported_app_protocol.FuzzerSupportedAppProtocolRes.msg_config", "modulename": "v2gevil.fuzzer.fuzzer_supported_app_protocol", "qualname": "FuzzerSupportedAppProtocolRes.msg_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.fuzzer_supported_app_protocol.FuzzerSupportedAppProtocolRes.msg_fuzz_dict", "modulename": "v2gevil.fuzzer.fuzzer_supported_app_protocol", "qualname": "FuzzerSupportedAppProtocolRes.msg_fuzz_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.fuzzer_supported_app_protocol.FuzzerSupportedAppProtocolRes.msg_default_dict", "modulename": "v2gevil.fuzzer.fuzzer_supported_app_protocol", "qualname": "FuzzerSupportedAppProtocolRes.msg_default_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.fuzzer_supported_app_protocol.FuzzerSupportedAppProtocolRes.fuzz", "modulename": "v2gevil.fuzzer.fuzzer_supported_app_protocol", "qualname": "FuzzerSupportedAppProtocolRes.fuzz", "kind": "function", "doc": "<p>Fuzz the message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.fuzzer_supported_app_protocol.FuzzerSupportedAppProtocolReq", "modulename": "v2gevil.fuzzer.fuzzer_supported_app_protocol", "qualname": "FuzzerSupportedAppProtocolReq", "kind": "class", "doc": "<p>Fuzzer Class for Supported App Protocol Request message</p>\n"}, {"fullname": "v2gevil.fuzzer.fuzzer_supported_app_protocol.FuzzerSupportedAppProtocolReq.__init__", "modulename": "v2gevil.fuzzer.fuzzer_supported_app_protocol", "qualname": "FuzzerSupportedAppProtocolReq.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "v2gevil.fuzzer.fuzzer_supported_app_protocol.FuzzerSupportedAppProtocolReq.msg_config", "modulename": "v2gevil.fuzzer.fuzzer_supported_app_protocol", "qualname": "FuzzerSupportedAppProtocolReq.msg_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.gen_types", "modulename": "v2gevil.fuzzer.gen_types", "kind": "module", "doc": "<p>This module contains the fuzz methods for the different types of data that can be fuzzed.</p>\n\n<p>Methods from this module are used in fuzz_params.py to fuzz the parameters (attributes) in the message.</p>\n"}, {"fullname": "v2gevil.fuzzer.gen_types.logger", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.fuzzer.gen_types (WARNING)&gt;"}, {"fullname": "v2gevil.fuzzer.gen_types.MIN_LONG", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "MIN_LONG", "kind": "variable", "doc": "<p></p>\n", "default_value": "-9223372036854775808"}, {"fullname": "v2gevil.fuzzer.gen_types.MAX_LONG", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "MAX_LONG", "kind": "variable", "doc": "<p></p>\n", "default_value": "9223372036854775807"}, {"fullname": "v2gevil.fuzzer.gen_types.MIN_LONG_LONG", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "MIN_LONG_LONG", "kind": "variable", "doc": "<p></p>\n", "default_value": "-170141183460469231731687303715884105728"}, {"fullname": "v2gevil.fuzzer.gen_types.MAX_LONG_LONG", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "MAX_LONG_LONG", "kind": "variable", "doc": "<p></p>\n", "default_value": "170141183460469231731687303715884105727"}, {"fullname": "v2gevil.fuzzer.gen_types.gen_random_string", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "gen_random_string", "kind": "function", "doc": "<p>Generate random string of given length</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.gen_types.gen_num", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "gen_num", "kind": "function", "doc": "<p>Generate number (int or float)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">float_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">negative_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.gen_types.gen_invalid_general_num_type", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "gen_invalid_general_num_type", "kind": "function", "doc": "<p>Generate invalid number (int or float)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">min_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span>,</span><span class=\"param\">\t<span class=\"n\">max_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9223372036854775807</span>,</span><span class=\"param\">\t<span class=\"n\">lower_limit_neg</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span>,</span><span class=\"param\">\t<span class=\"n\">upper_limit_pos</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9223372036854775807</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">fuzzer</span><span class=\"o\">.</span><span class=\"n\">fuzzer_enums</span><span class=\"o\">.</span><span class=\"n\">ParamFuzzMode</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ParamFuzzMode</span><span class=\"o\">.</span><span class=\"n\">RANDOM</span><span class=\"p\">:</span> <span class=\"s1\">&#39;random&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">valid_val</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.gen_types.gen_invalid_num", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "gen_invalid_num", "kind": "function", "doc": "<p>General method for generating invalid number (int or float)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">float_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">over_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">under_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">lower_limit_neg</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span>,</span><span class=\"param\">\t<span class=\"n\">upper_limit_neg</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">lower_limit_pos</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">upper_limit_pos</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9223372036854775807</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.gen_types.gen_invalid_string", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "gen_invalid_string", "kind": "function", "doc": "<p>Generate invalid string</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">fuzzer</span><span class=\"o\">.</span><span class=\"n\">fuzzer_enums</span><span class=\"o\">.</span><span class=\"n\">ParamFuzzMode</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ParamFuzzMode</span><span class=\"o\">.</span><span class=\"n\">RANDOM</span><span class=\"p\">:</span> <span class=\"s1\">&#39;random&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">valid_val</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">min_len</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">max_len</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.gen_types.gen_malicous_string", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "gen_malicous_string", "kind": "function", "doc": "<p>Generate malicious string.</p>\n\n<p>String with special meaning in different context or language like\nbash commands, xml, etc.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">valid_string</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.gen_types.gen_malicous_hex", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "gen_malicous_hex", "kind": "function", "doc": "<p>Generate malicious hex.</p>\n\n<p>Hex with special meaning in different context or language like\nbash commands, xml, etc.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">valid_hex</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.gen_types.gen_malicous_base64", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "gen_malicous_base64", "kind": "function", "doc": "<p>Generate malicious base64.</p>\n\n<p>Base64 with special meaning in different context or language like\nbash commands, xml, etc.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">valid_base64</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.gen_types.gen_invalid_int", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "gen_invalid_int", "kind": "function", "doc": "<p>Generate invalid xs:int (type in XML schema)</p>\n\n<p>xs:int, -2147483648 to 2147483647 are valid values.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">fuzzer</span><span class=\"o\">.</span><span class=\"n\">fuzzer_enums</span><span class=\"o\">.</span><span class=\"n\">ParamFuzzMode</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ParamFuzzMode</span><span class=\"o\">.</span><span class=\"n\">RANDOM</span><span class=\"p\">:</span> <span class=\"s1\">&#39;random&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">min_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">2147483648</span>,</span><span class=\"param\">\t<span class=\"n\">max_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2147483647</span>,</span><span class=\"param\">\t<span class=\"n\">valid_val</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.gen_types.gen_invalid_unsigned_int", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "gen_invalid_unsigned_int", "kind": "function", "doc": "<p>Generate invalid xs:unsignedInt (type in XML schema)</p>\n\n<p>xs:unsignedInt, 0-4294967295 are valid values</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">fuzzer</span><span class=\"o\">.</span><span class=\"n\">fuzzer_enums</span><span class=\"o\">.</span><span class=\"n\">ParamFuzzMode</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ParamFuzzMode</span><span class=\"o\">.</span><span class=\"n\">RANDOM</span><span class=\"p\">:</span> <span class=\"s1\">&#39;random&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">min_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">max_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4294967295</span>,</span><span class=\"param\">\t<span class=\"n\">valid_val</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.gen_types.gen_invalid_byte", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "gen_invalid_byte", "kind": "function", "doc": "<p>Generate invalid xs:byte (type in XML schema)</p>\n\n<p>xs:byte valid values are between -128 and 127\nIf min or max is specified, valid values are between min and max (inclusive).\nMin/max are specified in schema as restriction for value.\nFor example: type=\"xs:byte\" minInclusive=\"-3\" maxInclusive=\"3\"</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">fuzzer</span><span class=\"o\">.</span><span class=\"n\">fuzzer_enums</span><span class=\"o\">.</span><span class=\"n\">ParamFuzzMode</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ParamFuzzMode</span><span class=\"o\">.</span><span class=\"n\">RANDOM</span><span class=\"p\">:</span> <span class=\"s1\">&#39;random&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">min_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">128</span>,</span><span class=\"param\">\t<span class=\"n\">max_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">127</span>,</span><span class=\"param\">\t<span class=\"n\">valid_val</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.gen_types.gen_invalid_unsigned_byte", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "gen_invalid_unsigned_byte", "kind": "function", "doc": "<p>Generate invalid xs:unsignedByte (type in XML schema)</p>\n\n<p>xs:unsignedByte, 0-255 are valid values\nRandomly choose invalid value - float, string or number out of range</p>\n\n<p>Relevant modes: random, string, int, over-int,\n    under-int, float, over-float, under-float</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">fuzzer</span><span class=\"o\">.</span><span class=\"n\">fuzzer_enums</span><span class=\"o\">.</span><span class=\"n\">ParamFuzzMode</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ParamFuzzMode</span><span class=\"o\">.</span><span class=\"n\">RANDOM</span><span class=\"p\">:</span> <span class=\"s1\">&#39;random&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">min_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">max_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">255</span>,</span><span class=\"param\">\t<span class=\"n\">valid_val</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.gen_types.gen_invalid_bool", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "gen_invalid_bool", "kind": "function", "doc": "<p>Generate invalid xs:boolean (type in XML schema)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">fuzzer</span><span class=\"o\">.</span><span class=\"n\">fuzzer_enums</span><span class=\"o\">.</span><span class=\"n\">ParamFuzzMode</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ParamFuzzMode</span><span class=\"o\">.</span><span class=\"n\">RANDOM</span><span class=\"p\">:</span> <span class=\"s1\">&#39;random&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.gen_types.gen_invalid_unsigned_long", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "gen_invalid_unsigned_long", "kind": "function", "doc": "<p>Generate invalid xs:unsignedLong (type in XML schema)</p>\n\n<p>xs:unsignedLong, 0-18446744073709551615 are valid values</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">fuzzer</span><span class=\"o\">.</span><span class=\"n\">fuzzer_enums</span><span class=\"o\">.</span><span class=\"n\">ParamFuzzMode</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ParamFuzzMode</span><span class=\"o\">.</span><span class=\"n\">RANDOM</span><span class=\"p\">:</span> <span class=\"s1\">&#39;random&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">min_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">max_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">18446744073709551615</span>,</span><span class=\"param\">\t<span class=\"n\">valid_val</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.gen_types.gen_invalid_short", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "gen_invalid_short", "kind": "function", "doc": "<p>Generate invalid xs:short (type in XML schema)</p>\n\n<p>xs:short, -32768 to 32767 are valid values</p>\n\n<p>Args:\n    mode (ParamFuzzMode, optional): Fuzzing mode.\n        Defaults to ParamFuzzMode.RANDOM.\n    min_val (Optional[int], optional): Min valid value specified in schema.\n        Defaults to None.\n    max_val (Optional[int], optional): Max valid value specified in schema.\n        Defaults to None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">fuzzer</span><span class=\"o\">.</span><span class=\"n\">fuzzer_enums</span><span class=\"o\">.</span><span class=\"n\">ParamFuzzMode</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ParamFuzzMode</span><span class=\"o\">.</span><span class=\"n\">RANDOM</span><span class=\"p\">:</span> <span class=\"s1\">&#39;random&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">min_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">32768</span>,</span><span class=\"param\">\t<span class=\"n\">max_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">32767</span>,</span><span class=\"param\">\t<span class=\"n\">valid_val</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.gen_types.gen_invalid_unsigned_short", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "gen_invalid_unsigned_short", "kind": "function", "doc": "<p>Generate invalid xs:unsignedShort (type in XML schema)</p>\n\n<p>xs:unsignedShort, 0 to 65535 are valid values</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">fuzzer</span><span class=\"o\">.</span><span class=\"n\">fuzzer_enums</span><span class=\"o\">.</span><span class=\"n\">ParamFuzzMode</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ParamFuzzMode</span><span class=\"o\">.</span><span class=\"n\">RANDOM</span><span class=\"p\">:</span> <span class=\"s1\">&#39;random&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">min_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">max_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">65535</span>,</span><span class=\"param\">\t<span class=\"n\">valid_val</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.gen_types.gen_invalid_long", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "gen_invalid_long", "kind": "function", "doc": "<p>Generate invalid xs:long type(type in XML schema)</p>\n\n<p>xs:long, -9223372036854775808 to 9223372036854775807 are valid values (2^63, 2^63 - 1)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">fuzzer</span><span class=\"o\">.</span><span class=\"n\">fuzzer_enums</span><span class=\"o\">.</span><span class=\"n\">ParamFuzzMode</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ParamFuzzMode</span><span class=\"o\">.</span><span class=\"n\">RANDOM</span><span class=\"p\">:</span> <span class=\"s1\">&#39;random&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">min_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span>,</span><span class=\"param\">\t<span class=\"n\">max_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9223372036854775807</span>,</span><span class=\"param\">\t<span class=\"n\">valid_val</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.gen_types.gen_invalid_base64_binary", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "gen_invalid_base64_binary", "kind": "function", "doc": "<p>Generate invalid xs:base64Binary (type in XML schema)</p>\n\n<p>Args:\n    max_length (int): Max length of valid base64binary.\n    min_length (int): Min length of valid base64binary.</p>\n\n<p>Only one of max_length or min_length can be provided.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_length</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">min_length</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.gen_types.gen_invalid_hex_binary", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "gen_invalid_hex_binary", "kind": "function", "doc": "<p>Generate invalid xs:hexBinary (type in XML schema)</p>\n\n<p>Args:\n    max_length (int): Max length of valid hexBinary.\n    min_length (int): Min length of valid hexBinary.</p>\n\n<p>Only one of max_length or min_length can be provided.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_length</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">min_length</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.gen_types.gen_invalid_id", "modulename": "v2gevil.fuzzer.gen_types", "qualname": "gen_invalid_id", "kind": "function", "doc": "<p>Fuzz xs:Id</p>\n\n<p>Should not start with digit and should not contain ':'.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">fuzzer</span><span class=\"o\">.</span><span class=\"n\">fuzzer_enums</span><span class=\"o\">.</span><span class=\"n\">ParamFuzzMode</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ParamFuzzMode</span><span class=\"o\">.</span><span class=\"n\">RANDOM</span><span class=\"p\">:</span> <span class=\"s1\">&#39;random&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">valid_val</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.metering_receipt", "modulename": "v2gevil.fuzzer.metering_receipt", "kind": "module", "doc": "<p>Fuzzer classes for Metering Receipt request and response messages.</p>\n"}, {"fullname": "v2gevil.fuzzer.metering_receipt.logger", "modulename": "v2gevil.fuzzer.metering_receipt", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.fuzzer.metering_receipt (WARNING)&gt;"}, {"fullname": "v2gevil.fuzzer.metering_receipt.FuzzerMeteringReceiptRes", "modulename": "v2gevil.fuzzer.metering_receipt", "qualname": "FuzzerMeteringReceiptRes", "kind": "class", "doc": "<p>Fuzzer Class for Metering Receipt Response message</p>\n"}, {"fullname": "v2gevil.fuzzer.metering_receipt.FuzzerMeteringReceiptRes.__init__", "modulename": "v2gevil.fuzzer.metering_receipt", "qualname": "FuzzerMeteringReceiptRes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_fuzz_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_default_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">charging_mode</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">station</span><span class=\"o\">.</span><span class=\"n\">station_enums</span><span class=\"o\">.</span><span class=\"n\">EVSEChargingMode</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">EVSEChargingMode</span><span class=\"o\">.</span><span class=\"n\">AC</span><span class=\"p\">:</span> <span class=\"s1\">&#39;AC&#39;</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "v2gevil.fuzzer.metering_receipt.FuzzerMeteringReceiptRes.msg_config", "modulename": "v2gevil.fuzzer.metering_receipt", "qualname": "FuzzerMeteringReceiptRes.msg_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.metering_receipt.FuzzerMeteringReceiptRes.msg_fuzz_dict", "modulename": "v2gevil.fuzzer.metering_receipt", "qualname": "FuzzerMeteringReceiptRes.msg_fuzz_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.metering_receipt.FuzzerMeteringReceiptRes.msg_default_dict", "modulename": "v2gevil.fuzzer.metering_receipt", "qualname": "FuzzerMeteringReceiptRes.msg_default_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.metering_receipt.FuzzerMeteringReceiptRes.charging_mode", "modulename": "v2gevil.fuzzer.metering_receipt", "qualname": "FuzzerMeteringReceiptRes.charging_mode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.metering_receipt.FuzzerMeteringReceiptRes.fuzz", "modulename": "v2gevil.fuzzer.metering_receipt", "qualname": "FuzzerMeteringReceiptRes.fuzz", "kind": "function", "doc": "<p>Fuzz the message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.payment_details", "modulename": "v2gevil.fuzzer.payment_details", "kind": "module", "doc": "<p>Fuzzer classes for Payment Details request and response messages.</p>\n"}, {"fullname": "v2gevil.fuzzer.payment_details.logger", "modulename": "v2gevil.fuzzer.payment_details", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.fuzzer.payment_details (WARNING)&gt;"}, {"fullname": "v2gevil.fuzzer.payment_details.FuzzerPaymentDetailsRes", "modulename": "v2gevil.fuzzer.payment_details", "qualname": "FuzzerPaymentDetailsRes", "kind": "class", "doc": "<p>Fuzzer Class for Payment Details Response message</p>\n"}, {"fullname": "v2gevil.fuzzer.payment_details.FuzzerPaymentDetailsRes.__init__", "modulename": "v2gevil.fuzzer.payment_details", "qualname": "FuzzerPaymentDetailsRes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_fuzz_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_default_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "v2gevil.fuzzer.payment_details.FuzzerPaymentDetailsRes.msg_config", "modulename": "v2gevil.fuzzer.payment_details", "qualname": "FuzzerPaymentDetailsRes.msg_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.payment_details.FuzzerPaymentDetailsRes.msg_fuzz_dict", "modulename": "v2gevil.fuzzer.payment_details", "qualname": "FuzzerPaymentDetailsRes.msg_fuzz_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.payment_details.FuzzerPaymentDetailsRes.msg_default_dict", "modulename": "v2gevil.fuzzer.payment_details", "qualname": "FuzzerPaymentDetailsRes.msg_default_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.payment_details.FuzzerPaymentDetailsRes.fuzz", "modulename": "v2gevil.fuzzer.payment_details", "qualname": "FuzzerPaymentDetailsRes.fuzz", "kind": "function", "doc": "<p>Fuzz the message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.payment_service_selection", "modulename": "v2gevil.fuzzer.payment_service_selection", "kind": "module", "doc": "<p>Fuzzer classes for Payment Service Selection request and response messages.</p>\n"}, {"fullname": "v2gevil.fuzzer.payment_service_selection.logger", "modulename": "v2gevil.fuzzer.payment_service_selection", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.fuzzer.payment_service_selection (WARNING)&gt;"}, {"fullname": "v2gevil.fuzzer.payment_service_selection.FuzzerPaymentServiceSelectionRes", "modulename": "v2gevil.fuzzer.payment_service_selection", "qualname": "FuzzerPaymentServiceSelectionRes", "kind": "class", "doc": "<p>Fuzzer Class for Payment Service Selection Response message</p>\n"}, {"fullname": "v2gevil.fuzzer.payment_service_selection.FuzzerPaymentServiceSelectionRes.__init__", "modulename": "v2gevil.fuzzer.payment_service_selection", "qualname": "FuzzerPaymentServiceSelectionRes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_fuzz_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_default_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "v2gevil.fuzzer.payment_service_selection.FuzzerPaymentServiceSelectionRes.msg_config", "modulename": "v2gevil.fuzzer.payment_service_selection", "qualname": "FuzzerPaymentServiceSelectionRes.msg_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.payment_service_selection.FuzzerPaymentServiceSelectionRes.msg_fuzz_dict", "modulename": "v2gevil.fuzzer.payment_service_selection", "qualname": "FuzzerPaymentServiceSelectionRes.msg_fuzz_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.payment_service_selection.FuzzerPaymentServiceSelectionRes.msg_default_dict", "modulename": "v2gevil.fuzzer.payment_service_selection", "qualname": "FuzzerPaymentServiceSelectionRes.msg_default_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.payment_service_selection.FuzzerPaymentServiceSelectionRes.fuzz", "modulename": "v2gevil.fuzzer.payment_service_selection", "qualname": "FuzzerPaymentServiceSelectionRes.fuzz", "kind": "function", "doc": "<p>Fuzz the message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.power_delivery", "modulename": "v2gevil.fuzzer.power_delivery", "kind": "module", "doc": "<p>Fuzzer classes for Power Delivery request and response messages.</p>\n"}, {"fullname": "v2gevil.fuzzer.power_delivery.logger", "modulename": "v2gevil.fuzzer.power_delivery", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.fuzzer.power_delivery (WARNING)&gt;"}, {"fullname": "v2gevil.fuzzer.power_delivery.FuzzerPowerDeliveryRes", "modulename": "v2gevil.fuzzer.power_delivery", "qualname": "FuzzerPowerDeliveryRes", "kind": "class", "doc": "<p>Fuzzer Class for Power Delivery Response message</p>\n"}, {"fullname": "v2gevil.fuzzer.power_delivery.FuzzerPowerDeliveryRes.__init__", "modulename": "v2gevil.fuzzer.power_delivery", "qualname": "FuzzerPowerDeliveryRes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_fuzz_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_default_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">charging_mode</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">station</span><span class=\"o\">.</span><span class=\"n\">station_enums</span><span class=\"o\">.</span><span class=\"n\">EVSEChargingMode</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">EVSEChargingMode</span><span class=\"o\">.</span><span class=\"n\">AC</span><span class=\"p\">:</span> <span class=\"s1\">&#39;AC&#39;</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "v2gevil.fuzzer.power_delivery.FuzzerPowerDeliveryRes.msg_config", "modulename": "v2gevil.fuzzer.power_delivery", "qualname": "FuzzerPowerDeliveryRes.msg_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.power_delivery.FuzzerPowerDeliveryRes.msg_fuzz_dict", "modulename": "v2gevil.fuzzer.power_delivery", "qualname": "FuzzerPowerDeliveryRes.msg_fuzz_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.power_delivery.FuzzerPowerDeliveryRes.msg_default_dict", "modulename": "v2gevil.fuzzer.power_delivery", "qualname": "FuzzerPowerDeliveryRes.msg_default_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.power_delivery.FuzzerPowerDeliveryRes.charging_mode", "modulename": "v2gevil.fuzzer.power_delivery", "qualname": "FuzzerPowerDeliveryRes.charging_mode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.power_delivery.FuzzerPowerDeliveryRes.fuzz", "modulename": "v2gevil.fuzzer.power_delivery", "qualname": "FuzzerPowerDeliveryRes.fuzz", "kind": "function", "doc": "<p>Fuzz the message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.pre_charge", "modulename": "v2gevil.fuzzer.pre_charge", "kind": "module", "doc": "<p>Fuzzer classes for Pre Charge request and response messages.</p>\n"}, {"fullname": "v2gevil.fuzzer.pre_charge.FuzzerPreChargeRes", "modulename": "v2gevil.fuzzer.pre_charge", "qualname": "FuzzerPreChargeRes", "kind": "class", "doc": "<p>Fuzzer class for Cable Check response message</p>\n"}, {"fullname": "v2gevil.fuzzer.pre_charge.FuzzerPreChargeRes.__init__", "modulename": "v2gevil.fuzzer.pre_charge", "qualname": "FuzzerPreChargeRes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_fuzz_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_default_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "v2gevil.fuzzer.pre_charge.FuzzerPreChargeRes.msg_config", "modulename": "v2gevil.fuzzer.pre_charge", "qualname": "FuzzerPreChargeRes.msg_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.pre_charge.FuzzerPreChargeRes.msg_fuzz_dict", "modulename": "v2gevil.fuzzer.pre_charge", "qualname": "FuzzerPreChargeRes.msg_fuzz_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.pre_charge.FuzzerPreChargeRes.msg_default_dict", "modulename": "v2gevil.fuzzer.pre_charge", "qualname": "FuzzerPreChargeRes.msg_default_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.pre_charge.FuzzerPreChargeRes.fuzz", "modulename": "v2gevil.fuzzer.pre_charge", "qualname": "FuzzerPreChargeRes.fuzz", "kind": "function", "doc": "<p>Fuzz the message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.service_detail", "modulename": "v2gevil.fuzzer.service_detail", "kind": "module", "doc": "<p>Fuzzer classes for Service Detail request and response messages.</p>\n"}, {"fullname": "v2gevil.fuzzer.service_detail.logger", "modulename": "v2gevil.fuzzer.service_detail", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.fuzzer.service_detail (WARNING)&gt;"}, {"fullname": "v2gevil.fuzzer.service_detail.FuzzerServiceDetailRes", "modulename": "v2gevil.fuzzer.service_detail", "qualname": "FuzzerServiceDetailRes", "kind": "class", "doc": "<p>Fuzzer Class for Service Detail Response message</p>\n"}, {"fullname": "v2gevil.fuzzer.service_detail.FuzzerServiceDetailRes.__init__", "modulename": "v2gevil.fuzzer.service_detail", "qualname": "FuzzerServiceDetailRes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_fuzz_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_default_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "v2gevil.fuzzer.service_detail.FuzzerServiceDetailRes.msg_config", "modulename": "v2gevil.fuzzer.service_detail", "qualname": "FuzzerServiceDetailRes.msg_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.service_detail.FuzzerServiceDetailRes.msg_fuzz_dict", "modulename": "v2gevil.fuzzer.service_detail", "qualname": "FuzzerServiceDetailRes.msg_fuzz_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.service_detail.FuzzerServiceDetailRes.msg_default_dict", "modulename": "v2gevil.fuzzer.service_detail", "qualname": "FuzzerServiceDetailRes.msg_default_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.service_detail.FuzzerServiceDetailRes.fuzz", "modulename": "v2gevil.fuzzer.service_detail", "qualname": "FuzzerServiceDetailRes.fuzz", "kind": "function", "doc": "<p>Fuzz the message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.service_discovery", "modulename": "v2gevil.fuzzer.service_discovery", "kind": "module", "doc": "<p>Fuzzer classes for Service Discovery Request and Response messages</p>\n"}, {"fullname": "v2gevil.fuzzer.service_discovery.logger", "modulename": "v2gevil.fuzzer.service_discovery", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.fuzzer.service_discovery (WARNING)&gt;"}, {"fullname": "v2gevil.fuzzer.service_discovery.FuzzerServiceDiscoveryRes", "modulename": "v2gevil.fuzzer.service_discovery", "qualname": "FuzzerServiceDiscoveryRes", "kind": "class", "doc": "<p>Fuzzer Class for Session Setup Response message</p>\n"}, {"fullname": "v2gevil.fuzzer.service_discovery.FuzzerServiceDiscoveryRes.__init__", "modulename": "v2gevil.fuzzer.service_discovery", "qualname": "FuzzerServiceDiscoveryRes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_fuzz_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_default_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "v2gevil.fuzzer.service_discovery.FuzzerServiceDiscoveryRes.msg_config", "modulename": "v2gevil.fuzzer.service_discovery", "qualname": "FuzzerServiceDiscoveryRes.msg_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.service_discovery.FuzzerServiceDiscoveryRes.msg_fuzz_dict", "modulename": "v2gevil.fuzzer.service_discovery", "qualname": "FuzzerServiceDiscoveryRes.msg_fuzz_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.service_discovery.FuzzerServiceDiscoveryRes.msg_default_dict", "modulename": "v2gevil.fuzzer.service_discovery", "qualname": "FuzzerServiceDiscoveryRes.msg_default_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.service_discovery.FuzzerServiceDiscoveryRes.fuzz", "modulename": "v2gevil.fuzzer.service_discovery", "qualname": "FuzzerServiceDiscoveryRes.fuzz", "kind": "function", "doc": "<p>Fuzz the message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.session_setup", "modulename": "v2gevil.fuzzer.session_setup", "kind": "module", "doc": "<p>Fuzzer classes for Session Setup Request and Response messages</p>\n"}, {"fullname": "v2gevil.fuzzer.session_setup.logger", "modulename": "v2gevil.fuzzer.session_setup", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.fuzzer.session_setup (WARNING)&gt;"}, {"fullname": "v2gevil.fuzzer.session_setup.FuzzerSessionSetupRes", "modulename": "v2gevil.fuzzer.session_setup", "qualname": "FuzzerSessionSetupRes", "kind": "class", "doc": "<p>Fuzzer Class for Session Setup Response message</p>\n"}, {"fullname": "v2gevil.fuzzer.session_setup.FuzzerSessionSetupRes.__init__", "modulename": "v2gevil.fuzzer.session_setup", "qualname": "FuzzerSessionSetupRes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_fuzz_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_default_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "v2gevil.fuzzer.session_setup.FuzzerSessionSetupRes.msg_config", "modulename": "v2gevil.fuzzer.session_setup", "qualname": "FuzzerSessionSetupRes.msg_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.session_setup.FuzzerSessionSetupRes.msg_fuzz_dict", "modulename": "v2gevil.fuzzer.session_setup", "qualname": "FuzzerSessionSetupRes.msg_fuzz_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.session_setup.FuzzerSessionSetupRes.msg_default_dict", "modulename": "v2gevil.fuzzer.session_setup", "qualname": "FuzzerSessionSetupRes.msg_default_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.session_setup.FuzzerSessionSetupRes.fuzz", "modulename": "v2gevil.fuzzer.session_setup", "qualname": "FuzzerSessionSetupRes.fuzz", "kind": "function", "doc": "<p>Fuzz the message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.session_stop", "modulename": "v2gevil.fuzzer.session_stop", "kind": "module", "doc": "<p>Fuzzer classes for Power Delivery request and response messages.</p>\n"}, {"fullname": "v2gevil.fuzzer.session_stop.logger", "modulename": "v2gevil.fuzzer.session_stop", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.fuzzer.session_stop (WARNING)&gt;"}, {"fullname": "v2gevil.fuzzer.session_stop.FuzzerSessionStopRes", "modulename": "v2gevil.fuzzer.session_stop", "qualname": "FuzzerSessionStopRes", "kind": "class", "doc": "<p>Fuzzer Class for Session Stop Response message</p>\n"}, {"fullname": "v2gevil.fuzzer.session_stop.FuzzerSessionStopRes.__init__", "modulename": "v2gevil.fuzzer.session_stop", "qualname": "FuzzerSessionStopRes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_fuzz_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_default_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "v2gevil.fuzzer.session_stop.FuzzerSessionStopRes.msg_config", "modulename": "v2gevil.fuzzer.session_stop", "qualname": "FuzzerSessionStopRes.msg_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.session_stop.FuzzerSessionStopRes.msg_fuzz_dict", "modulename": "v2gevil.fuzzer.session_stop", "qualname": "FuzzerSessionStopRes.msg_fuzz_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.session_stop.FuzzerSessionStopRes.msg_default_dict", "modulename": "v2gevil.fuzzer.session_stop", "qualname": "FuzzerSessionStopRes.msg_default_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.session_stop.FuzzerSessionStopRes.fuzz", "modulename": "v2gevil.fuzzer.session_stop", "qualname": "FuzzerSessionStopRes.fuzz", "kind": "function", "doc": "<p>Fuzz the message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.fuzzer.welding_detection", "modulename": "v2gevil.fuzzer.welding_detection", "kind": "module", "doc": "<p>Fuzzer classes for Welding Detection request and response messages.</p>\n"}, {"fullname": "v2gevil.fuzzer.welding_detection.FuzzerWeldingDetectionRes", "modulename": "v2gevil.fuzzer.welding_detection", "qualname": "FuzzerWeldingDetectionRes", "kind": "class", "doc": "<p>Fuzzer class for Welding Detection response message</p>\n"}, {"fullname": "v2gevil.fuzzer.welding_detection.FuzzerWeldingDetectionRes.__init__", "modulename": "v2gevil.fuzzer.welding_detection", "qualname": "FuzzerWeldingDetectionRes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">msg_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_fuzz_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msg_default_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "v2gevil.fuzzer.welding_detection.FuzzerWeldingDetectionRes.msg_config", "modulename": "v2gevil.fuzzer.welding_detection", "qualname": "FuzzerWeldingDetectionRes.msg_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.welding_detection.FuzzerWeldingDetectionRes.msg_fuzz_dict", "modulename": "v2gevil.fuzzer.welding_detection", "qualname": "FuzzerWeldingDetectionRes.msg_fuzz_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.welding_detection.FuzzerWeldingDetectionRes.msg_default_dict", "modulename": "v2gevil.fuzzer.welding_detection", "qualname": "FuzzerWeldingDetectionRes.msg_default_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.fuzzer.welding_detection.FuzzerWeldingDetectionRes.fuzz", "modulename": "v2gevil.fuzzer.welding_detection", "qualname": "FuzzerWeldingDetectionRes.fuzz", "kind": "function", "doc": "<p>Fuzz the message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages", "modulename": "v2gevil.messages", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "v2gevil.messages.AppProtocol", "modulename": "v2gevil.messages.AppProtocol", "kind": "module", "doc": "<p>Module for AppProtocol messages.</p>\n\n<p>The implementation is based on ISO 15118-2:2014.</p>\n"}, {"fullname": "v2gevil.messages.AppProtocol.responseCodeType", "modulename": "v2gevil.messages.AppProtocol", "qualname": "responseCodeType", "kind": "class", "doc": "<p>Enum responseCodeType.</p>\n\n<p>Enum for responseCodeType. xs:string in the schema.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.messages.AppProtocol.responseCodeType.SUCCESS_NEGOTIATION", "modulename": "v2gevil.messages.AppProtocol", "qualname": "responseCodeType.SUCCESS_NEGOTIATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.SUCCESS_NEGOTIATION: &#x27;OK_SuccessfulNegotiation&#x27;&gt;"}, {"fullname": "v2gevil.messages.AppProtocol.responseCodeType.SUCCESS_MINOR_DEVIATION", "modulename": "v2gevil.messages.AppProtocol", "qualname": "responseCodeType.SUCCESS_MINOR_DEVIATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.SUCCESS_MINOR_DEVIATION: &#x27;OK_SuccessfulNegotiationMinorDeviation&#x27;&gt;"}, {"fullname": "v2gevil.messages.AppProtocol.responseCodeType.FAILED_NEGOTIATION", "modulename": "v2gevil.messages.AppProtocol", "qualname": "responseCodeType.FAILED_NEGOTIATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_NEGOTIATION: &#x27;FAILED_Negotiation&#x27;&gt;"}, {"fullname": "v2gevil.messages.AppProtocol.AppProtocolType", "modulename": "v2gevil.messages.AppProtocol", "qualname": "AppProtocolType", "kind": "class", "doc": "<p>ComlexType AppProtocol.</p>\n\n<p>Includes the elements ProtocolNamespace, VersionMajor, VersionMinor, SchemaID and Priority.</p>\n\n<p>Attributes:\n    proto_ns: The namespace URI of the specific protocol (protocol name).\n    version_major: The major version number of protocol indicated in the ProtocolNamespace.\n    version_minor: The minor version number of protocol indicated in the ProtocolNamespace.\n    schema_id: This element is used by EVCC to indicate the SchemaID assigned by the EVCC to the protocol.\n    priority: This element is used by EVCC to indicate the priority of the protocol.            SECC shall select the protocol based on the priority.            The highest priority is indicated by the lowest number(1-20).</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.AppProtocol.AppProtocolType.model_config", "modulename": "v2gevil.messages.AppProtocol", "qualname": "AppProtocolType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.AppProtocol.AppProtocolType.proto_ns", "modulename": "v2gevil.messages.AppProtocol", "qualname": "AppProtocolType.proto_ns", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.AppProtocol.AppProtocolType.version_major", "modulename": "v2gevil.messages.AppProtocol", "qualname": "AppProtocolType.version_major", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.AppProtocol.AppProtocolType.version_minor", "modulename": "v2gevil.messages.AppProtocol", "qualname": "AppProtocolType.version_minor", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.AppProtocol.AppProtocolType.schema_id", "modulename": "v2gevil.messages.AppProtocol", "qualname": "AppProtocolType.schema_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.AppProtocol.AppProtocolType.priority", "modulename": "v2gevil.messages.AppProtocol", "qualname": "AppProtocolType.priority", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.AppProtocol.AppProtocolType.model_fields", "modulename": "v2gevil.messages.AppProtocol", "qualname": "AppProtocolType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;proto_ns&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;ProtocolNamespace&#x27;, alias_priority=2), &#x27;version_major&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;VersionNumberMajor&#x27;, alias_priority=2), &#x27;version_minor&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;VersionNumberMinor&#x27;, alias_priority=2), &#x27;schema_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;SchemaID&#x27;, alias_priority=2), &#x27;priority&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;Priority&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.AppProtocol.supportedAppProtocolReq", "modulename": "v2gevil.messages.AppProtocol", "qualname": "supportedAppProtocolReq", "kind": "class", "doc": "<p>Message supportedAppProtocolReq.</p>\n\n<p>Request message for supportedAppProtocolReq.</p>\n\n<p>Attributes:\n    app_protocol: The AppProtocol element contains the information about the protocol supported by the EVCC.\n        The AppProtocol element is a complex type that contains the elements ProtocolNamespace, VersionMajor, VersionMinor, SchemaID and Priority.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.AppProtocol.supportedAppProtocolReq.model_config", "modulename": "v2gevil.messages.AppProtocol", "qualname": "supportedAppProtocolReq.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.AppProtocol.supportedAppProtocolReq.app_protocol", "modulename": "v2gevil.messages.AppProtocol", "qualname": "supportedAppProtocolReq.app_protocol", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[v2gevil.messages.AppProtocol.AppProtocolType]"}, {"fullname": "v2gevil.messages.AppProtocol.supportedAppProtocolReq.response_class_name", "modulename": "v2gevil.messages.AppProtocol", "qualname": "supportedAppProtocolReq.response_class_name", "kind": "function", "doc": "<p>Return the name of the request class.</p>\n\n<p>Returns:\n    str: The name of the request class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.AppProtocol.supportedAppProtocolReq.model_fields", "modulename": "v2gevil.messages.AppProtocol", "qualname": "supportedAppProtocolReq.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;app_protocol&#x27;: FieldInfo(annotation=List[AppProtocolType], required=True, alias=&#x27;AppProtocol&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.AppProtocol.supportedAppProtocolRes", "modulename": "v2gevil.messages.AppProtocol", "qualname": "supportedAppProtocolRes", "kind": "class", "doc": "<p>Message supportedAppProtocolRes.</p>\n\n<p>Response message for supportedAppProtocolRes.</p>\n\n<p>Attributes:\n    response_code: The response code to indicate if at least one            of the protocols provides by EVCC is supported by the SECC.\n    schema_id: SchemaID of the protocol/schema which is agreed            as application protocol for the following communication session.            SECC shall select from its own list of supported protocols            the protocol with highest Priority indicated by the EVCC.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.AppProtocol.supportedAppProtocolRes.model_config", "modulename": "v2gevil.messages.AppProtocol", "qualname": "supportedAppProtocolRes.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.AppProtocol.supportedAppProtocolRes.response_code", "modulename": "v2gevil.messages.AppProtocol", "qualname": "supportedAppProtocolRes.response_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.AppProtocol.responseCodeType"}, {"fullname": "v2gevil.messages.AppProtocol.supportedAppProtocolRes.schema_id", "modulename": "v2gevil.messages.AppProtocol", "qualname": "supportedAppProtocolRes.schema_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.AppProtocol.supportedAppProtocolRes.request_class_name", "modulename": "v2gevil.messages.AppProtocol", "qualname": "supportedAppProtocolRes.request_class_name", "kind": "function", "doc": "<p>Return the name of the request class.</p>\n\n<p>Returns:\n    str: The name of the request class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.AppProtocol.supportedAppProtocolRes.model_fields", "modulename": "v2gevil.messages.AppProtocol", "qualname": "supportedAppProtocolRes.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;response_code&#x27;: FieldInfo(annotation=responseCodeType, required=True, alias=&#x27;ResponseCode&#x27;, alias_priority=2), &#x27;schema_id&#x27;: FieldInfo(annotation=str, required=False, alias=&#x27;SchemaID&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody", "modulename": "v2gevil.messages.MsgBody", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "v2gevil.messages.MsgBody.BodyBaseType", "modulename": "v2gevil.messages.MsgBody", "qualname": "BodyBaseType", "kind": "class", "doc": "<p>Base class for V2G message body.</p>\n\n<p>Abstract class.</p>\n", "bases": "abc.ABC, pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgBody.BodyBaseType.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "BodyBaseType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.BodyBaseType.response_class_name", "modulename": "v2gevil.messages.MsgBody", "qualname": "BodyBaseType.response_class_name", "kind": "function", "doc": "<p>Return the name of the response class.</p>\n\n<p>Returns:\n    str: The name of the response class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.MsgBody.BodyBaseType.request_class_name", "modulename": "v2gevil.messages.MsgBody", "qualname": "BodyBaseType.request_class_name", "kind": "function", "doc": "<p>Return the name of the request class.</p>\n\n<p>Returns:\n    str: The name of the request class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.MsgBody.BodyBaseType.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "BodyBaseType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgBody.SessionSetupReq", "modulename": "v2gevil.messages.MsgBody", "qualname": "SessionSetupReq", "kind": "class", "doc": "<p>Representation of V2GMessage SessionSetupReq.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.SessionSetupReq.evcc_id", "modulename": "v2gevil.messages.MsgBody", "qualname": "SessionSetupReq.evcc_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgBody.SessionSetupReq.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "SessionSetupReq.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.SessionSetupReq.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "SessionSetupReq.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;evcc_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;EVCCID&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.SessionSetupRes", "modulename": "v2gevil.messages.MsgBody", "qualname": "SessionSetupRes", "kind": "class", "doc": "<p>Representation of V2GMessage SessionSetupRes.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.SessionSetupRes.response_code", "modulename": "v2gevil.messages.MsgBody", "qualname": "SessionSetupRes.response_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.responseCodeType"}, {"fullname": "v2gevil.messages.MsgBody.SessionSetupRes.evse_id", "modulename": "v2gevil.messages.MsgBody", "qualname": "SessionSetupRes.evse_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgBody.SessionSetupRes.evse_timestamp", "modulename": "v2gevil.messages.MsgBody", "qualname": "SessionSetupRes.evse_timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgBody.SessionSetupRes.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "SessionSetupRes.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.SessionSetupRes.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "SessionSetupRes.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;response_code&#x27;: FieldInfo(annotation=responseCodeType, required=True, alias=&#x27;ResponseCode&#x27;, alias_priority=2), &#x27;evse_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;EVSEID&#x27;, alias_priority=2), &#x27;evse_timestamp&#x27;: FieldInfo(annotation=int, required=False, alias=&#x27;EVSETimeStamp&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDiscoveryReq", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDiscoveryReq", "kind": "class", "doc": "<p>Representation of V2GMessage ServiceDiscoveryReq.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDiscoveryReq.service_scope", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDiscoveryReq.service_scope", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDiscoveryReq.service_category", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDiscoveryReq.service_category", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.serviceCategoryType"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDiscoveryReq.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDiscoveryReq.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDiscoveryReq.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDiscoveryReq.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;service_scope&#x27;: FieldInfo(annotation=str, required=False, alias=&#x27;ServiceScope&#x27;, alias_priority=2), &#x27;service_category&#x27;: FieldInfo(annotation=serviceCategoryType, required=False, alias=&#x27;ServiceCategory&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDiscoveryRes", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDiscoveryRes", "kind": "class", "doc": "<p>Representation of V2GMessage ServiceDiscoveryRes.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDiscoveryRes.response_code", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDiscoveryRes.response_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.responseCodeType"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDiscoveryRes.payement_option_list", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDiscoveryRes.payement_option_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PaymentOptionListType"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDiscoveryRes.charge_service", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDiscoveryRes.charge_service", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.ChargeServiceType"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDiscoveryRes.service_list", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDiscoveryRes.service_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.ServiceListType"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDiscoveryRes.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDiscoveryRes.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDiscoveryRes.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDiscoveryRes.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;response_code&#x27;: FieldInfo(annotation=responseCodeType, required=True, alias=&#x27;ResponseCode&#x27;, alias_priority=2), &#x27;payement_option_list&#x27;: FieldInfo(annotation=PaymentOptionListType, required=True, alias=&#x27;PaymentOptionList&#x27;, alias_priority=2), &#x27;charge_service&#x27;: FieldInfo(annotation=ChargeServiceType, required=True, alias=&#x27;ChargeService&#x27;, alias_priority=2), &#x27;service_list&#x27;: FieldInfo(annotation=ServiceListType, required=False, alias=&#x27;ServiceList&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDetailReq", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDetailReq", "kind": "class", "doc": "<p>Representation of V2GMessage ServiceDetailReq.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDetailReq.service_id", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDetailReq.service_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDetailReq.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDetailReq.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDetailReq.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDetailReq.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;service_id&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;ServiceID&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDetailRes", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDetailRes", "kind": "class", "doc": "<p>Representation of V2GMessage ServiceDetailRes.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDetailRes.response_code", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDetailRes.response_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.responseCodeType"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDetailRes.service_id", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDetailRes.service_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDetailRes.service_parameter_list", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDetailRes.service_parameter_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.ServiceParameterListType"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDetailRes.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDetailRes.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.ServiceDetailRes.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "ServiceDetailRes.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;response_code&#x27;: FieldInfo(annotation=responseCodeType, required=True, alias=&#x27;ResponseCode&#x27;, alias_priority=2), &#x27;service_id&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;ServiceID&#x27;, alias_priority=2), &#x27;service_parameter_list&#x27;: FieldInfo(annotation=ServiceParameterListType, required=False, alias=&#x27;ServiceParameterList&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.PaymentServiceSelectionReq", "modulename": "v2gevil.messages.MsgBody", "qualname": "PaymentServiceSelectionReq", "kind": "class", "doc": "<p>Representation of V2GMessage PaymentServiceSelectionReq.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.PaymentServiceSelectionReq.selected_payment_option", "modulename": "v2gevil.messages.MsgBody", "qualname": "PaymentServiceSelectionReq.selected_payment_option", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.paymentOptionType"}, {"fullname": "v2gevil.messages.MsgBody.PaymentServiceSelectionReq.selected_service_list", "modulename": "v2gevil.messages.MsgBody", "qualname": "PaymentServiceSelectionReq.selected_service_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.SelectedServiceListType"}, {"fullname": "v2gevil.messages.MsgBody.PaymentServiceSelectionReq.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "PaymentServiceSelectionReq.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.PaymentServiceSelectionReq.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "PaymentServiceSelectionReq.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;selected_payment_option&#x27;: FieldInfo(annotation=paymentOptionType, required=True, alias=&#x27;SelectedPaymentOption&#x27;, alias_priority=2), &#x27;selected_service_list&#x27;: FieldInfo(annotation=SelectedServiceListType, required=True, alias=&#x27;SelectedServiceList&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.PaymentServiceSelectionRes", "modulename": "v2gevil.messages.MsgBody", "qualname": "PaymentServiceSelectionRes", "kind": "class", "doc": "<p>Representation of V2GMessage PaymentServiceSelectionRes.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.PaymentServiceSelectionRes.response_code", "modulename": "v2gevil.messages.MsgBody", "qualname": "PaymentServiceSelectionRes.response_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.responseCodeType"}, {"fullname": "v2gevil.messages.MsgBody.PaymentServiceSelectionRes.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "PaymentServiceSelectionRes.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.PaymentServiceSelectionRes.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "PaymentServiceSelectionRes.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;response_code&#x27;: FieldInfo(annotation=responseCodeType, required=True, alias=&#x27;ResponseCode&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.PaymentDetailsReq", "modulename": "v2gevil.messages.MsgBody", "qualname": "PaymentDetailsReq", "kind": "class", "doc": "<p>Representation of V2GMessage PaymentDetailsReq.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.PaymentDetailsReq.e_maid", "modulename": "v2gevil.messages.MsgBody", "qualname": "PaymentDetailsReq.e_maid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgBody.PaymentDetailsReq.contract_signature_cert_chain", "modulename": "v2gevil.messages.MsgBody", "qualname": "PaymentDetailsReq.contract_signature_cert_chain", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.CertificateChainType"}, {"fullname": "v2gevil.messages.MsgBody.PaymentDetailsReq.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "PaymentDetailsReq.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.PaymentDetailsReq.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "PaymentDetailsReq.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;e_maid&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;eMAID&#x27;, alias_priority=2), &#x27;contract_signature_cert_chain&#x27;: FieldInfo(annotation=CertificateChainType, required=True, alias=&#x27;ContractSignatureCertChain&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.PaymentDetailsRes", "modulename": "v2gevil.messages.MsgBody", "qualname": "PaymentDetailsRes", "kind": "class", "doc": "<p>Representation of V2GMessage PaymentDetailsRes.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.PaymentDetailsRes.response_code", "modulename": "v2gevil.messages.MsgBody", "qualname": "PaymentDetailsRes.response_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.responseCodeType"}, {"fullname": "v2gevil.messages.MsgBody.PaymentDetailsRes.gen_challenge", "modulename": "v2gevil.messages.MsgBody", "qualname": "PaymentDetailsRes.gen_challenge", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgBody.PaymentDetailsRes.evse_timestamp", "modulename": "v2gevil.messages.MsgBody", "qualname": "PaymentDetailsRes.evse_timestamp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgBody.PaymentDetailsRes.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "PaymentDetailsRes.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.PaymentDetailsRes.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "PaymentDetailsRes.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;response_code&#x27;: FieldInfo(annotation=responseCodeType, required=True, alias=&#x27;ResponseCode&#x27;, alias_priority=2), &#x27;gen_challenge&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;GenChallenge&#x27;, alias_priority=2), &#x27;evse_timestamp&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;EVSETimeStamp&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.AuthorizationReq", "modulename": "v2gevil.messages.MsgBody", "qualname": "AuthorizationReq", "kind": "class", "doc": "<p>Representation of V2GMessage AuthorizationReq.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.AuthorizationReq.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "AuthorizationReq.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True, &#x27;populate_by_name&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.AuthorizationReq.id", "modulename": "v2gevil.messages.MsgBody", "qualname": "AuthorizationReq.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgBody.AuthorizationReq.gen_challenge", "modulename": "v2gevil.messages.MsgBody", "qualname": "AuthorizationReq.gen_challenge", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgBody.AuthorizationReq.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "AuthorizationReq.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;id&#x27;: FieldInfo(annotation=str, required=False, alias_priority=2, validation_alias=&#x27;@Id&#x27;, serialization_alias=&#x27;@Id&#x27;), &#x27;gen_challenge&#x27;: FieldInfo(annotation=str, required=False, alias=&#x27;GenChallenge&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.AuthorizationRes", "modulename": "v2gevil.messages.MsgBody", "qualname": "AuthorizationRes", "kind": "class", "doc": "<p>Representation of V2GMessage AuthorizationRes.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.AuthorizationRes.response_code", "modulename": "v2gevil.messages.MsgBody", "qualname": "AuthorizationRes.response_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.responseCodeType"}, {"fullname": "v2gevil.messages.MsgBody.AuthorizationRes.evse_processing", "modulename": "v2gevil.messages.MsgBody", "qualname": "AuthorizationRes.evse_processing", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.EVSEProcessingType"}, {"fullname": "v2gevil.messages.MsgBody.AuthorizationRes.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "AuthorizationRes.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.AuthorizationRes.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "AuthorizationRes.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;response_code&#x27;: FieldInfo(annotation=responseCodeType, required=True, alias=&#x27;ResponseCode&#x27;, alias_priority=2), &#x27;evse_processing&#x27;: FieldInfo(annotation=EVSEProcessingType, required=True, alias=&#x27;EVSEProcessing&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.ChargeParameterDiscoveryReq", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargeParameterDiscoveryReq", "kind": "class", "doc": "<p>Representation of V2GMessage ChargeParameterDiscoveryReq.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.ChargeParameterDiscoveryReq.max_entries_sascheduletuple", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargeParameterDiscoveryReq.max_entries_sascheduletuple", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgBody.ChargeParameterDiscoveryReq.requested_energy_transfer_mode", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargeParameterDiscoveryReq.requested_energy_transfer_mode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.EnergyTransferModeType"}, {"fullname": "v2gevil.messages.MsgBody.ChargeParameterDiscoveryReq.ac_ev_charge_parameter", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargeParameterDiscoveryReq.ac_ev_charge_parameter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.AC_EVChargeParameterType"}, {"fullname": "v2gevil.messages.MsgBody.ChargeParameterDiscoveryReq.dc_ev_charge_parameter", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargeParameterDiscoveryReq.dc_ev_charge_parameter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.DC_EVChargeParameterType"}, {"fullname": "v2gevil.messages.MsgBody.ChargeParameterDiscoveryReq.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargeParameterDiscoveryReq.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.ChargeParameterDiscoveryReq.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargeParameterDiscoveryReq.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;max_entries_sascheduletuple&#x27;: FieldInfo(annotation=int, required=False, alias=&#x27;MaxEntriesSAScheduleTuple&#x27;, alias_priority=2), &#x27;requested_energy_transfer_mode&#x27;: FieldInfo(annotation=EnergyTransferModeType, required=True, alias=&#x27;RequestedEnergyTransferMode&#x27;, alias_priority=2), &#x27;ac_ev_charge_parameter&#x27;: FieldInfo(annotation=AC_EVChargeParameterType, required=False, alias=&#x27;AC_EVChargeParameter&#x27;, alias_priority=2), &#x27;dc_ev_charge_parameter&#x27;: FieldInfo(annotation=DC_EVChargeParameterType, required=False, alias=&#x27;DC_EVChargeParameter&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.ChargeParameterDiscoveryRes", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargeParameterDiscoveryRes", "kind": "class", "doc": "<p>Representation of V2GMessage ChargeParameterDiscoveryRes.</p>\n\n<p>At least one of these two attributes\n(AC_EVSEChargeParameter, DC_EVSEChargeParameter) must be set</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.ChargeParameterDiscoveryRes.response_code", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargeParameterDiscoveryRes.response_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.responseCodeType"}, {"fullname": "v2gevil.messages.MsgBody.ChargeParameterDiscoveryRes.evse_processing", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargeParameterDiscoveryRes.evse_processing", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.EVSEProcessingType"}, {"fullname": "v2gevil.messages.MsgBody.ChargeParameterDiscoveryRes.sa_schedules", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargeParameterDiscoveryRes.sa_schedules", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.SAScheduleListType"}, {"fullname": "v2gevil.messages.MsgBody.ChargeParameterDiscoveryRes.ac_ev_charge_parameter", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargeParameterDiscoveryRes.ac_ev_charge_parameter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.AC_EVSEChargeParameterType"}, {"fullname": "v2gevil.messages.MsgBody.ChargeParameterDiscoveryRes.dc_ev_charge_parameter", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargeParameterDiscoveryRes.dc_ev_charge_parameter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.DC_EVSEChargeParameterType"}, {"fullname": "v2gevil.messages.MsgBody.ChargeParameterDiscoveryRes.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargeParameterDiscoveryRes.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.ChargeParameterDiscoveryRes.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargeParameterDiscoveryRes.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;response_code&#x27;: FieldInfo(annotation=responseCodeType, required=True, alias=&#x27;ResponseCode&#x27;, alias_priority=2), &#x27;evse_processing&#x27;: FieldInfo(annotation=EVSEProcessingType, required=True, alias=&#x27;EVSEProcessing&#x27;, alias_priority=2), &#x27;sa_schedules&#x27;: FieldInfo(annotation=SAScheduleListType, required=False, alias=&#x27;SAScheduleList&#x27;, alias_priority=2), &#x27;ac_ev_charge_parameter&#x27;: FieldInfo(annotation=AC_EVSEChargeParameterType, required=False, alias=&#x27;AC_EVSEChargeParameter&#x27;, alias_priority=2), &#x27;dc_ev_charge_parameter&#x27;: FieldInfo(annotation=DC_EVSEChargeParameterType, required=False, alias=&#x27;DC_EVSEChargeParameter&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.PowerDeliveryReq", "modulename": "v2gevil.messages.MsgBody", "qualname": "PowerDeliveryReq", "kind": "class", "doc": "<p>Representation of V2GMessage PowerDeliveryReq.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.PowerDeliveryReq.charge_progress", "modulename": "v2gevil.messages.MsgBody", "qualname": "PowerDeliveryReq.charge_progress", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.chargeProgressType"}, {"fullname": "v2gevil.messages.MsgBody.PowerDeliveryReq.sa_schedule_tuple_id", "modulename": "v2gevil.messages.MsgBody", "qualname": "PowerDeliveryReq.sa_schedule_tuple_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgBody.PowerDeliveryReq.charging_profile", "modulename": "v2gevil.messages.MsgBody", "qualname": "PowerDeliveryReq.charging_profile", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.ChargingProfileType"}, {"fullname": "v2gevil.messages.MsgBody.PowerDeliveryReq.dc_ev_power_delivery_parameter", "modulename": "v2gevil.messages.MsgBody", "qualname": "PowerDeliveryReq.dc_ev_power_delivery_parameter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.DC_EVPowerDeliveryParameterType"}, {"fullname": "v2gevil.messages.MsgBody.PowerDeliveryReq.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "PowerDeliveryReq.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.PowerDeliveryReq.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "PowerDeliveryReq.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;charge_progress&#x27;: FieldInfo(annotation=chargeProgressType, required=True, alias=&#x27;ChargeProgress&#x27;, alias_priority=2), &#x27;sa_schedule_tuple_id&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;SAScheduleTupleID&#x27;, alias_priority=2), &#x27;charging_profile&#x27;: FieldInfo(annotation=ChargingProfileType, required=False, alias=&#x27;ChargingProfile&#x27;, alias_priority=2), &#x27;dc_ev_power_delivery_parameter&#x27;: FieldInfo(annotation=DC_EVPowerDeliveryParameterType, required=False, alias=&#x27;DC_EVPowerDeliveryParameter&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.PowerDeliveryRes", "modulename": "v2gevil.messages.MsgBody", "qualname": "PowerDeliveryRes", "kind": "class", "doc": "<p>Representation of V2GMessage PowerDeliveryRes.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.PowerDeliveryRes.response_code", "modulename": "v2gevil.messages.MsgBody", "qualname": "PowerDeliveryRes.response_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.responseCodeType"}, {"fullname": "v2gevil.messages.MsgBody.PowerDeliveryRes.ac_evse_status", "modulename": "v2gevil.messages.MsgBody", "qualname": "PowerDeliveryRes.ac_evse_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.AC_EVSEStatusType"}, {"fullname": "v2gevil.messages.MsgBody.PowerDeliveryRes.dc_evse_status", "modulename": "v2gevil.messages.MsgBody", "qualname": "PowerDeliveryRes.dc_evse_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.DC_EVSEStatusType"}, {"fullname": "v2gevil.messages.MsgBody.PowerDeliveryRes.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "PowerDeliveryRes.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.PowerDeliveryRes.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "PowerDeliveryRes.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;response_code&#x27;: FieldInfo(annotation=responseCodeType, required=True, alias=&#x27;ResponseCode&#x27;, alias_priority=2), &#x27;ac_evse_status&#x27;: FieldInfo(annotation=AC_EVSEStatusType, required=False, alias=&#x27;AC_EVSEStatus&#x27;, alias_priority=2), &#x27;dc_evse_status&#x27;: FieldInfo(annotation=DC_EVSEStatusType, required=False, alias=&#x27;DC_EVSEStatus&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.MeteringReceiptReq", "modulename": "v2gevil.messages.MsgBody", "qualname": "MeteringReceiptReq", "kind": "class", "doc": "<p>Representation of V2GMessage MeteringReceiptReq.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.MeteringReceiptReq.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "MeteringReceiptReq.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True, &#x27;populate_by_name&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.MeteringReceiptReq.id", "modulename": "v2gevil.messages.MsgBody", "qualname": "MeteringReceiptReq.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgBody.MeteringReceiptReq.session_id", "modulename": "v2gevil.messages.MsgBody", "qualname": "MeteringReceiptReq.session_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgBody.MeteringReceiptReq.sa_schedule_tuple_id", "modulename": "v2gevil.messages.MsgBody", "qualname": "MeteringReceiptReq.sa_schedule_tuple_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgBody.MeteringReceiptReq.meter_info", "modulename": "v2gevil.messages.MsgBody", "qualname": "MeteringReceiptReq.meter_info", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.MeterInfoType"}, {"fullname": "v2gevil.messages.MsgBody.MeteringReceiptReq.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "MeteringReceiptReq.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;id&#x27;: FieldInfo(annotation=str, required=True, alias_priority=2, validation_alias=&#x27;@Id&#x27;, serialization_alias=&#x27;@Id&#x27;), &#x27;session_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;SessionID&#x27;, alias_priority=2), &#x27;sa_schedule_tuple_id&#x27;: FieldInfo(annotation=int, required=False, alias=&#x27;SAScheduleTupleID&#x27;, alias_priority=2), &#x27;meter_info&#x27;: FieldInfo(annotation=MeterInfoType, required=True, alias=&#x27;MeterInfo&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.MeteringReceiptRes", "modulename": "v2gevil.messages.MsgBody", "qualname": "MeteringReceiptRes", "kind": "class", "doc": "<p>Representation of V2GMessage MeteringReceiptRes.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.MeteringReceiptRes.response_code", "modulename": "v2gevil.messages.MsgBody", "qualname": "MeteringReceiptRes.response_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.responseCodeType"}, {"fullname": "v2gevil.messages.MsgBody.MeteringReceiptRes.ac_evse_status", "modulename": "v2gevil.messages.MsgBody", "qualname": "MeteringReceiptRes.ac_evse_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.AC_EVSEStatusType"}, {"fullname": "v2gevil.messages.MsgBody.MeteringReceiptRes.dc_evse_status", "modulename": "v2gevil.messages.MsgBody", "qualname": "MeteringReceiptRes.dc_evse_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.DC_EVSEStatusType"}, {"fullname": "v2gevil.messages.MsgBody.MeteringReceiptRes.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "MeteringReceiptRes.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.MeteringReceiptRes.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "MeteringReceiptRes.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;response_code&#x27;: FieldInfo(annotation=responseCodeType, required=True, alias=&#x27;ResponseCode&#x27;, alias_priority=2), &#x27;ac_evse_status&#x27;: FieldInfo(annotation=AC_EVSEStatusType, required=False, alias=&#x27;AC_EVSEStatus&#x27;, alias_priority=2), &#x27;dc_evse_status&#x27;: FieldInfo(annotation=DC_EVSEStatusType, required=False, alias=&#x27;DC_EVSEStatus&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.SessionStopReq", "modulename": "v2gevil.messages.MsgBody", "qualname": "SessionStopReq", "kind": "class", "doc": "<p>Representation of V2GMessage SessionStopReq.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.SessionStopReq.charging_session", "modulename": "v2gevil.messages.MsgBody", "qualname": "SessionStopReq.charging_session", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.chargingSessionType"}, {"fullname": "v2gevil.messages.MsgBody.SessionStopReq.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "SessionStopReq.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.SessionStopReq.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "SessionStopReq.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;charging_session&#x27;: FieldInfo(annotation=chargingSessionType, required=True, alias=&#x27;ChargingSession&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.SessionStopRes", "modulename": "v2gevil.messages.MsgBody", "qualname": "SessionStopRes", "kind": "class", "doc": "<p>Representation of V2GMessage SessionStopRes.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.SessionStopRes.response_code", "modulename": "v2gevil.messages.MsgBody", "qualname": "SessionStopRes.response_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.responseCodeType"}, {"fullname": "v2gevil.messages.MsgBody.SessionStopRes.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "SessionStopRes.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.SessionStopRes.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "SessionStopRes.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;response_code&#x27;: FieldInfo(annotation=responseCodeType, required=True, alias=&#x27;ResponseCode&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.CertificateUpdateReq", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateUpdateReq", "kind": "class", "doc": "<p>Representation of V2GMessage CertificateUpdateReq.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.CertificateUpdateReq.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateUpdateReq.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True, &#x27;populate_by_name&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.CertificateUpdateReq.id", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateUpdateReq.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgBody.CertificateUpdateReq.contract_signature_cert_chain", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateUpdateReq.contract_signature_cert_chain", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.CertificateChainType"}, {"fullname": "v2gevil.messages.MsgBody.CertificateUpdateReq.e_maid", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateUpdateReq.e_maid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgBody.CertificateUpdateReq.list_of_root_certificate_ids", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateUpdateReq.list_of_root_certificate_ids", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.ListOfRootCertificateIDsType"}, {"fullname": "v2gevil.messages.MsgBody.CertificateUpdateReq.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateUpdateReq.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;id&#x27;: FieldInfo(annotation=str, required=True, alias_priority=2, validation_alias=&#x27;@Id&#x27;, serialization_alias=&#x27;@Id&#x27;), &#x27;contract_signature_cert_chain&#x27;: FieldInfo(annotation=CertificateChainType, required=True, alias=&#x27;ContractSignatureCertChain&#x27;, alias_priority=2), &#x27;e_maid&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;eMAID&#x27;, alias_priority=2), &#x27;list_of_root_certificate_ids&#x27;: FieldInfo(annotation=ListOfRootCertificateIDsType, required=True, alias=&#x27;ListOfRootCertificateIDs&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.CertificateUpdateRes", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateUpdateRes", "kind": "class", "doc": "<p>Representation of V2GMessage CertificateUpdateRes.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.CertificateUpdateRes.response_code", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateUpdateRes.response_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.responseCodeType"}, {"fullname": "v2gevil.messages.MsgBody.CertificateUpdateRes.contract_signature_cert_chain", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateUpdateRes.contract_signature_cert_chain", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.CertificateChainType"}, {"fullname": "v2gevil.messages.MsgBody.CertificateUpdateRes.contract_signature_encrypted_private_key", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateUpdateRes.contract_signature_encrypted_private_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.ContractSignatureEncryptedPrivateKeyType"}, {"fullname": "v2gevil.messages.MsgBody.CertificateUpdateRes.dh_public_key", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateUpdateRes.dh_public_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.DiffieHellmanPublickeyType"}, {"fullname": "v2gevil.messages.MsgBody.CertificateUpdateRes.e_maid", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateUpdateRes.e_maid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.EMAIDType"}, {"fullname": "v2gevil.messages.MsgBody.CertificateUpdateRes.retry_counter", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateUpdateRes.retry_counter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgBody.CertificateUpdateRes.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateUpdateRes.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.CertificateUpdateRes.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateUpdateRes.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;response_code&#x27;: FieldInfo(annotation=responseCodeType, required=True, alias=&#x27;ResponseCode&#x27;, alias_priority=2), &#x27;contract_signature_cert_chain&#x27;: FieldInfo(annotation=CertificateChainType, required=True, alias=&#x27;ContractSignatureCertChain&#x27;, alias_priority=2), &#x27;contract_signature_encrypted_private_key&#x27;: FieldInfo(annotation=ContractSignatureEncryptedPrivateKeyType, required=True, alias=&#x27;ContractSignatureEncryptedPrivateKey&#x27;, alias_priority=2), &#x27;dh_public_key&#x27;: FieldInfo(annotation=DiffieHellmanPublickeyType, required=True, alias=&#x27;DHpublickey&#x27;, alias_priority=2), &#x27;e_maid&#x27;: FieldInfo(annotation=EMAIDType, required=True, alias=&#x27;eMAID&#x27;, alias_priority=2), &#x27;retry_counter&#x27;: FieldInfo(annotation=int, required=False, alias=&#x27;RetryCounter&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.CertificateInstallationReq", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateInstallationReq", "kind": "class", "doc": "<p>Representation of V2GMessage CertificateInstallationReq.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.CertificateInstallationReq.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateInstallationReq.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True, &#x27;populate_by_name&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.CertificateInstallationReq.id", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateInstallationReq.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgBody.CertificateInstallationReq.oem_provisioning_cert", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateInstallationReq.oem_provisioning_cert", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgBody.CertificateInstallationReq.list_of_root_certificate_ids", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateInstallationReq.list_of_root_certificate_ids", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.ListOfRootCertificateIDsType"}, {"fullname": "v2gevil.messages.MsgBody.CertificateInstallationReq.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateInstallationReq.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;id&#x27;: FieldInfo(annotation=str, required=True, alias_priority=2, validation_alias=&#x27;@Id&#x27;, serialization_alias=&#x27;@Id&#x27;), &#x27;oem_provisioning_cert&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;OEMProvisioningCert&#x27;, alias_priority=2), &#x27;list_of_root_certificate_ids&#x27;: FieldInfo(annotation=ListOfRootCertificateIDsType, required=True, alias=&#x27;ListOfRootCertificateIDs&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.CertificateInstallationRes", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateInstallationRes", "kind": "class", "doc": "<p>Representation of V2GMessage CertificateInstallationRes.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.CertificateInstallationRes.response_code", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateInstallationRes.response_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.responseCodeType"}, {"fullname": "v2gevil.messages.MsgBody.CertificateInstallationRes.sa_provisioning_certificate_chain", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateInstallationRes.sa_provisioning_certificate_chain", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.CertificateChainType"}, {"fullname": "v2gevil.messages.MsgBody.CertificateInstallationRes.contract_signature_cert_chain", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateInstallationRes.contract_signature_cert_chain", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.CertificateChainType"}, {"fullname": "v2gevil.messages.MsgBody.CertificateInstallationRes.contract_signature_encrypted_private_key", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateInstallationRes.contract_signature_encrypted_private_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.ContractSignatureEncryptedPrivateKeyType"}, {"fullname": "v2gevil.messages.MsgBody.CertificateInstallationRes.dh_public_key", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateInstallationRes.dh_public_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.DiffieHellmanPublickeyType"}, {"fullname": "v2gevil.messages.MsgBody.CertificateInstallationRes.e_maid", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateInstallationRes.e_maid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.EMAIDType"}, {"fullname": "v2gevil.messages.MsgBody.CertificateInstallationRes.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateInstallationRes.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.CertificateInstallationRes.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "CertificateInstallationRes.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;response_code&#x27;: FieldInfo(annotation=responseCodeType, required=True, alias=&#x27;ResponseCode&#x27;, alias_priority=2), &#x27;sa_provisioning_certificate_chain&#x27;: FieldInfo(annotation=CertificateChainType, required=True, alias=&#x27;SAProvisioningCertificateChain&#x27;, alias_priority=2), &#x27;contract_signature_cert_chain&#x27;: FieldInfo(annotation=CertificateChainType, required=True, alias=&#x27;ContractSignatureCertChain&#x27;, alias_priority=2), &#x27;contract_signature_encrypted_private_key&#x27;: FieldInfo(annotation=ContractSignatureEncryptedPrivateKeyType, required=True, alias=&#x27;ContractSignatureEncryptedPrivateKey&#x27;, alias_priority=2), &#x27;dh_public_key&#x27;: FieldInfo(annotation=DiffieHellmanPublickeyType, required=True, alias=&#x27;DHpublickey&#x27;, alias_priority=2), &#x27;e_maid&#x27;: FieldInfo(annotation=EMAIDType, required=True, alias=&#x27;eMAID&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.ChargingStatusReq", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargingStatusReq", "kind": "class", "doc": "<p>Representation of V2GMessage ChargingStatusReq.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.ChargingStatusReq.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargingStatusReq.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.ChargingStatusReq.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargingStatusReq.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgBody.ChargingStatusRes", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargingStatusRes", "kind": "class", "doc": "<p>Representation of V2GMessage ChargingStatusRes.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.ChargingStatusRes.response_code", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargingStatusRes.response_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.responseCodeType"}, {"fullname": "v2gevil.messages.MsgBody.ChargingStatusRes.evse_id", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargingStatusRes.evse_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgBody.ChargingStatusRes.sa_schedule_tuple_id", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargingStatusRes.sa_schedule_tuple_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgBody.ChargingStatusRes.evse_max_current", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargingStatusRes.evse_max_current", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgBody.ChargingStatusRes.meter_info", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargingStatusRes.meter_info", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.MeterInfoType"}, {"fullname": "v2gevil.messages.MsgBody.ChargingStatusRes.receipt_required", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargingStatusRes.receipt_required", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "v2gevil.messages.MsgBody.ChargingStatusRes.ac_evse_status", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargingStatusRes.ac_evse_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.AC_EVSEStatusType"}, {"fullname": "v2gevil.messages.MsgBody.ChargingStatusRes.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargingStatusRes.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.ChargingStatusRes.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "ChargingStatusRes.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;response_code&#x27;: FieldInfo(annotation=responseCodeType, required=True, alias=&#x27;ResponseCode&#x27;, alias_priority=2), &#x27;evse_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;EVSEID&#x27;, alias_priority=2), &#x27;sa_schedule_tuple_id&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;SAScheduleTupleID&#x27;, alias_priority=2), &#x27;evse_max_current&#x27;: FieldInfo(annotation=PhysicalValueType, required=False, alias=&#x27;EVSEMaxCurrent&#x27;, alias_priority=2), &#x27;meter_info&#x27;: FieldInfo(annotation=MeterInfoType, required=True, alias=&#x27;MeterInfo&#x27;, alias_priority=2), &#x27;receipt_required&#x27;: FieldInfo(annotation=bool, required=False, alias=&#x27;ReceiptRequired&#x27;, alias_priority=2), &#x27;ac_evse_status&#x27;: FieldInfo(annotation=AC_EVSEStatusType, required=True, alias=&#x27;AC_EVSEStatus&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.CableCheckReq", "modulename": "v2gevil.messages.MsgBody", "qualname": "CableCheckReq", "kind": "class", "doc": "<p>Representation of V2GMessage CableCheckReq.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.CableCheckReq.dc_ev_status", "modulename": "v2gevil.messages.MsgBody", "qualname": "CableCheckReq.dc_ev_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.DC_EVStatusType"}, {"fullname": "v2gevil.messages.MsgBody.CableCheckReq.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "CableCheckReq.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.CableCheckReq.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "CableCheckReq.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;dc_ev_status&#x27;: FieldInfo(annotation=DC_EVStatusType, required=True, alias=&#x27;DC_EVStatus&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.CableCheckRes", "modulename": "v2gevil.messages.MsgBody", "qualname": "CableCheckRes", "kind": "class", "doc": "<p>Representation of V2GMessage CableCheckRes.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.CableCheckRes.response_code", "modulename": "v2gevil.messages.MsgBody", "qualname": "CableCheckRes.response_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.responseCodeType"}, {"fullname": "v2gevil.messages.MsgBody.CableCheckRes.dc_evse_status", "modulename": "v2gevil.messages.MsgBody", "qualname": "CableCheckRes.dc_evse_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.DC_EVSEStatusType"}, {"fullname": "v2gevil.messages.MsgBody.CableCheckRes.evse_processing", "modulename": "v2gevil.messages.MsgBody", "qualname": "CableCheckRes.evse_processing", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.EVSEProcessingType"}, {"fullname": "v2gevil.messages.MsgBody.CableCheckRes.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "CableCheckRes.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.CableCheckRes.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "CableCheckRes.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;response_code&#x27;: FieldInfo(annotation=responseCodeType, required=True, alias=&#x27;ResponseCode&#x27;, alias_priority=2), &#x27;dc_evse_status&#x27;: FieldInfo(annotation=DC_EVSEStatusType, required=True, alias=&#x27;DC_EVSEStatus&#x27;, alias_priority=2), &#x27;evse_processing&#x27;: FieldInfo(annotation=EVSEProcessingType, required=True, alias=&#x27;EVSEProcessing&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.PreChargeReq", "modulename": "v2gevil.messages.MsgBody", "qualname": "PreChargeReq", "kind": "class", "doc": "<p>Representation of V2GMessage PreChargeReq.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.PreChargeReq.dc_ev_status", "modulename": "v2gevil.messages.MsgBody", "qualname": "PreChargeReq.dc_ev_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.DC_EVStatusType"}, {"fullname": "v2gevil.messages.MsgBody.PreChargeReq.ev_target_voltage", "modulename": "v2gevil.messages.MsgBody", "qualname": "PreChargeReq.ev_target_voltage", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgBody.PreChargeReq.ev_target_current", "modulename": "v2gevil.messages.MsgBody", "qualname": "PreChargeReq.ev_target_current", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgBody.PreChargeReq.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "PreChargeReq.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.PreChargeReq.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "PreChargeReq.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;dc_ev_status&#x27;: FieldInfo(annotation=DC_EVStatusType, required=True, alias=&#x27;DC_EVStatus&#x27;, alias_priority=2), &#x27;ev_target_voltage&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EVTargetVoltage&#x27;, alias_priority=2), &#x27;ev_target_current&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EVTargetCurrent&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.PreChargeRes", "modulename": "v2gevil.messages.MsgBody", "qualname": "PreChargeRes", "kind": "class", "doc": "<p>Representation of V2GMessage PreChargeRes.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.PreChargeRes.response_code", "modulename": "v2gevil.messages.MsgBody", "qualname": "PreChargeRes.response_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.responseCodeType"}, {"fullname": "v2gevil.messages.MsgBody.PreChargeRes.dc_evse_status", "modulename": "v2gevil.messages.MsgBody", "qualname": "PreChargeRes.dc_evse_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.DC_EVSEStatusType"}, {"fullname": "v2gevil.messages.MsgBody.PreChargeRes.evse_present_voltage", "modulename": "v2gevil.messages.MsgBody", "qualname": "PreChargeRes.evse_present_voltage", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgBody.PreChargeRes.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "PreChargeRes.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.PreChargeRes.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "PreChargeRes.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;response_code&#x27;: FieldInfo(annotation=responseCodeType, required=True, alias=&#x27;ResponseCode&#x27;, alias_priority=2), &#x27;dc_evse_status&#x27;: FieldInfo(annotation=DC_EVSEStatusType, required=True, alias=&#x27;DC_EVSEStatus&#x27;, alias_priority=2), &#x27;evse_present_voltage&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EVSEPresentVoltage&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandReq", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandReq", "kind": "class", "doc": "<p>Representation of V2GMessage CurrentDemandReq.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandReq.dc_ev_status", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandReq.dc_ev_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.DC_EVStatusType"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandReq.ev_target_current", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandReq.ev_target_current", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandReq.ev_maximum_voltage_limit", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandReq.ev_maximum_voltage_limit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandReq.ev_maximum_power_limit", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandReq.ev_maximum_power_limit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandReq.bulk_charging_complete", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandReq.bulk_charging_complete", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandReq.charging_complete", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandReq.charging_complete", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandReq.remaining_time_to_full_soc", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandReq.remaining_time_to_full_soc", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandReq.remaining_time_to_bulk_soc", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandReq.remaining_time_to_bulk_soc", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandReq.ev_target_voltage", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandReq.ev_target_voltage", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandReq.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandReq.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandReq.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandReq.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;dc_ev_status&#x27;: FieldInfo(annotation=DC_EVStatusType, required=True, alias=&#x27;DC_EVStatus&#x27;, alias_priority=2), &#x27;ev_target_current&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EVTargetCurrent&#x27;, alias_priority=2), &#x27;ev_maximum_voltage_limit&#x27;: FieldInfo(annotation=PhysicalValueType, required=False, alias=&#x27;EVMaximumVoltageLimit&#x27;, alias_priority=2), &#x27;ev_maximum_power_limit&#x27;: FieldInfo(annotation=PhysicalValueType, required=False, alias=&#x27;EVMaximumPowerLimit&#x27;, alias_priority=2), &#x27;bulk_charging_complete&#x27;: FieldInfo(annotation=bool, required=False, alias=&#x27;BulkChargingComplete&#x27;, alias_priority=2), &#x27;charging_complete&#x27;: FieldInfo(annotation=bool, required=True, alias=&#x27;ChargingComplete&#x27;, alias_priority=2), &#x27;remaining_time_to_full_soc&#x27;: FieldInfo(annotation=PhysicalValueType, required=False, alias=&#x27;RemainingTimeToFullSoC&#x27;, alias_priority=2), &#x27;remaining_time_to_bulk_soc&#x27;: FieldInfo(annotation=PhysicalValueType, required=False, alias=&#x27;RemainingTimeToBulkSoC&#x27;, alias_priority=2), &#x27;ev_target_voltage&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EVTargetVoltage&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandRes", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandRes", "kind": "class", "doc": "<p>Representation of V2GMessage CurrentDemandRes.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandRes.response_code", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandRes.response_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.responseCodeType"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandRes.dc_evse_status", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandRes.dc_evse_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.DC_EVSEStatusType"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandRes.evse_present_voltage", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandRes.evse_present_voltage", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandRes.evse_present_current", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandRes.evse_present_current", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandRes.evse_current_limit_achieved", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandRes.evse_current_limit_achieved", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandRes.evse_voltage_limit_achieved", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandRes.evse_voltage_limit_achieved", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandRes.evse_power_limit_achieved", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandRes.evse_power_limit_achieved", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandRes.evse_maximum_voltage_limit", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandRes.evse_maximum_voltage_limit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandRes.evse_maximum_current_limit", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandRes.evse_maximum_current_limit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandRes.evse_maximum_power_limit", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandRes.evse_maximum_power_limit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandRes.evse_id", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandRes.evse_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandRes.sa_schedule_tuple_id", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandRes.sa_schedule_tuple_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandRes.meter_info", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandRes.meter_info", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.MeterInfoType"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandRes.receipt_required", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandRes.receipt_required", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandRes.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandRes.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.CurrentDemandRes.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "CurrentDemandRes.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;response_code&#x27;: FieldInfo(annotation=responseCodeType, required=True, alias=&#x27;ResponseCode&#x27;, alias_priority=2), &#x27;dc_evse_status&#x27;: FieldInfo(annotation=DC_EVSEStatusType, required=True, alias=&#x27;DC_EVSEStatus&#x27;, alias_priority=2), &#x27;evse_present_voltage&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EVSEPresentVoltage&#x27;, alias_priority=2), &#x27;evse_present_current&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EVSEPresentCurrent&#x27;, alias_priority=2), &#x27;evse_current_limit_achieved&#x27;: FieldInfo(annotation=bool, required=True, alias=&#x27;EVSECurrentLimitAchieved&#x27;, alias_priority=2), &#x27;evse_voltage_limit_achieved&#x27;: FieldInfo(annotation=bool, required=True, alias=&#x27;EVSEVoltageLimitAchieved&#x27;, alias_priority=2), &#x27;evse_power_limit_achieved&#x27;: FieldInfo(annotation=bool, required=True, alias=&#x27;EVSEPowerLimitAchieved&#x27;, alias_priority=2), &#x27;evse_maximum_voltage_limit&#x27;: FieldInfo(annotation=PhysicalValueType, required=False, alias=&#x27;EVSEMaximumVoltageLimit&#x27;, alias_priority=2), &#x27;evse_maximum_current_limit&#x27;: FieldInfo(annotation=PhysicalValueType, required=False, alias=&#x27;EVSEMaximumCurrentLimit&#x27;, alias_priority=2), &#x27;evse_maximum_power_limit&#x27;: FieldInfo(annotation=PhysicalValueType, required=False, alias=&#x27;EVSEMaximumPowerLimit&#x27;, alias_priority=2), &#x27;evse_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;EVSEID&#x27;, alias_priority=2), &#x27;sa_schedule_tuple_id&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;SAScheduleTupleID&#x27;, alias_priority=2), &#x27;meter_info&#x27;: FieldInfo(annotation=MeterInfoType, required=False, alias=&#x27;MeterInfo&#x27;, alias_priority=2), &#x27;receipt_required&#x27;: FieldInfo(annotation=bool, required=False, alias=&#x27;ReceiptRequired&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.WeldingDetectionReq", "modulename": "v2gevil.messages.MsgBody", "qualname": "WeldingDetectionReq", "kind": "class", "doc": "<p>Representation of V2GMessage WeldingDetectionReq.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.WeldingDetectionReq.dc_ev_status", "modulename": "v2gevil.messages.MsgBody", "qualname": "WeldingDetectionReq.dc_ev_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.DC_EVStatusType"}, {"fullname": "v2gevil.messages.MsgBody.WeldingDetectionReq.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "WeldingDetectionReq.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.WeldingDetectionReq.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "WeldingDetectionReq.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;dc_ev_status&#x27;: FieldInfo(annotation=DC_EVStatusType, required=True, alias=&#x27;DC_EVStatus&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.WeldingDetectionRes", "modulename": "v2gevil.messages.MsgBody", "qualname": "WeldingDetectionRes", "kind": "class", "doc": "<p>Representation of V2GMessage WeldingDetectionRes.</p>\n", "bases": "BodyBaseType"}, {"fullname": "v2gevil.messages.MsgBody.WeldingDetectionRes.response_code", "modulename": "v2gevil.messages.MsgBody", "qualname": "WeldingDetectionRes.response_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.responseCodeType"}, {"fullname": "v2gevil.messages.MsgBody.WeldingDetectionRes.dc_evse_status", "modulename": "v2gevil.messages.MsgBody", "qualname": "WeldingDetectionRes.dc_evse_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.DC_EVSEStatusType"}, {"fullname": "v2gevil.messages.MsgBody.WeldingDetectionRes.evse_present_voltage", "modulename": "v2gevil.messages.MsgBody", "qualname": "WeldingDetectionRes.evse_present_voltage", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgBody.WeldingDetectionRes.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "WeldingDetectionRes.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgBody.WeldingDetectionRes.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "WeldingDetectionRes.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;response_code&#x27;: FieldInfo(annotation=responseCodeType, required=True, alias=&#x27;ResponseCode&#x27;, alias_priority=2), &#x27;dc_evse_status&#x27;: FieldInfo(annotation=DC_EVSEStatusType, required=True, alias=&#x27;DC_EVSEStatus&#x27;, alias_priority=2), &#x27;evse_present_voltage&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EVSEPresentVoltage&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgBody.Body", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body", "kind": "class", "doc": "<p>Base class for V2G message body.</p>\n\n<p>This class contains BodyElement in the XSD schema as attributes.\nBodyElement is abstract type in the XSD schema, so it can be any type of message.\nThis abstract type is represented by BodyBaseType class in this module.\nThe attribute will be only one, because it indicates the type of message.</p>\n\n<p>Attributes:\n    body: The body of the V2G message.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgBody.Body.session_setup_req", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.session_setup_req", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.SessionSetupReq"}, {"fullname": "v2gevil.messages.MsgBody.Body.session_setup_res", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.session_setup_res", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.SessionSetupRes"}, {"fullname": "v2gevil.messages.MsgBody.Body.service_discovery_req", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.service_discovery_req", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.ServiceDiscoveryReq"}, {"fullname": "v2gevil.messages.MsgBody.Body.service_discovery_res", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.service_discovery_res", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.ServiceDiscoveryRes"}, {"fullname": "v2gevil.messages.MsgBody.Body.service_detail_req", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.service_detail_req", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.ServiceDetailReq"}, {"fullname": "v2gevil.messages.MsgBody.Body.service_detail_res", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.service_detail_res", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.ServiceDetailRes"}, {"fullname": "v2gevil.messages.MsgBody.Body.payment_service_sel_req", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.payment_service_sel_req", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.PaymentServiceSelectionReq"}, {"fullname": "v2gevil.messages.MsgBody.Body.payment_service_sel_res", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.payment_service_sel_res", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.PaymentServiceSelectionRes"}, {"fullname": "v2gevil.messages.MsgBody.Body.payment_details_req", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.payment_details_req", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.PaymentDetailsReq"}, {"fullname": "v2gevil.messages.MsgBody.Body.payment_details_res", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.payment_details_res", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.PaymentDetailsRes"}, {"fullname": "v2gevil.messages.MsgBody.Body.authorization_req", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.authorization_req", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.AuthorizationReq"}, {"fullname": "v2gevil.messages.MsgBody.Body.authorization_res", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.authorization_res", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.AuthorizationRes"}, {"fullname": "v2gevil.messages.MsgBody.Body.charge_param_discovery_req", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.charge_param_discovery_req", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.ChargeParameterDiscoveryReq"}, {"fullname": "v2gevil.messages.MsgBody.Body.charge_param_discovery_res", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.charge_param_discovery_res", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.ChargeParameterDiscoveryRes"}, {"fullname": "v2gevil.messages.MsgBody.Body.power_delivery_req", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.power_delivery_req", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.PowerDeliveryReq"}, {"fullname": "v2gevil.messages.MsgBody.Body.power_delivery_res", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.power_delivery_res", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.PowerDeliveryRes"}, {"fullname": "v2gevil.messages.MsgBody.Body.metering_receipt_req", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.metering_receipt_req", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.MeteringReceiptReq"}, {"fullname": "v2gevil.messages.MsgBody.Body.metering_receipt_res", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.metering_receipt_res", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.MeteringReceiptRes"}, {"fullname": "v2gevil.messages.MsgBody.Body.session_stop_req", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.session_stop_req", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.SessionStopReq"}, {"fullname": "v2gevil.messages.MsgBody.Body.session_stop_res", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.session_stop_res", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.SessionStopRes"}, {"fullname": "v2gevil.messages.MsgBody.Body.certificate_update_req", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.certificate_update_req", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.CertificateUpdateReq"}, {"fullname": "v2gevil.messages.MsgBody.Body.certificate_update_res", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.certificate_update_res", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.CertificateUpdateRes"}, {"fullname": "v2gevil.messages.MsgBody.Body.certificate_installation_req", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.certificate_installation_req", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.CertificateInstallationReq"}, {"fullname": "v2gevil.messages.MsgBody.Body.certificate_installation_res", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.certificate_installation_res", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.CertificateInstallationRes"}, {"fullname": "v2gevil.messages.MsgBody.Body.charging_status_req", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.charging_status_req", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.ChargingStatusReq"}, {"fullname": "v2gevil.messages.MsgBody.Body.charging_status_res", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.charging_status_res", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.ChargingStatusRes"}, {"fullname": "v2gevil.messages.MsgBody.Body.cable_check_req", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.cable_check_req", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.CableCheckReq"}, {"fullname": "v2gevil.messages.MsgBody.Body.cable_check_res", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.cable_check_res", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.CableCheckRes"}, {"fullname": "v2gevil.messages.MsgBody.Body.pre_charge_req", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.pre_charge_req", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.PreChargeReq"}, {"fullname": "v2gevil.messages.MsgBody.Body.pre_charge_res", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.pre_charge_res", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.PreChargeRes"}, {"fullname": "v2gevil.messages.MsgBody.Body.current_demand_req", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.current_demand_req", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.CurrentDemandReq"}, {"fullname": "v2gevil.messages.MsgBody.Body.current_demand_res", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.current_demand_res", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.CurrentDemandRes"}, {"fullname": "v2gevil.messages.MsgBody.Body.welding_detection_req", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.welding_detection_req", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.WeldingDetectionReq"}, {"fullname": "v2gevil.messages.MsgBody.Body.welding_detection_res", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.welding_detection_res", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.WeldingDetectionRes"}, {"fullname": "v2gevil.messages.MsgBody.Body.model_config", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgBody.Body.model_fields", "modulename": "v2gevil.messages.MsgBody", "qualname": "Body.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;session_setup_req&#x27;: FieldInfo(annotation=SessionSetupReq, required=False, alias=&#x27;SessionSetupReq&#x27;, alias_priority=2), &#x27;session_setup_res&#x27;: FieldInfo(annotation=SessionSetupRes, required=False, alias=&#x27;SessionSetupRes&#x27;, alias_priority=2), &#x27;service_discovery_req&#x27;: FieldInfo(annotation=ServiceDiscoveryReq, required=False, alias=&#x27;ServiceDiscoveryReq&#x27;, alias_priority=2), &#x27;service_discovery_res&#x27;: FieldInfo(annotation=ServiceDiscoveryRes, required=False, alias=&#x27;ServiceDiscoveryRes&#x27;, alias_priority=2), &#x27;service_detail_req&#x27;: FieldInfo(annotation=ServiceDetailReq, required=False, alias=&#x27;ServiceDetailReq&#x27;, alias_priority=2), &#x27;service_detail_res&#x27;: FieldInfo(annotation=ServiceDetailRes, required=False, alias=&#x27;ServiceDetailRes&#x27;, alias_priority=2), &#x27;payment_service_sel_req&#x27;: FieldInfo(annotation=PaymentServiceSelectionReq, required=False, alias=&#x27;PaymentServiceSelectionReq&#x27;, alias_priority=2), &#x27;payment_service_sel_res&#x27;: FieldInfo(annotation=PaymentServiceSelectionRes, required=False, alias=&#x27;PaymentServiceSelectionRes&#x27;, alias_priority=2), &#x27;payment_details_req&#x27;: FieldInfo(annotation=PaymentDetailsReq, required=False, alias=&#x27;PaymentDetailsReq&#x27;, alias_priority=2), &#x27;payment_details_res&#x27;: FieldInfo(annotation=PaymentDetailsRes, required=False, alias=&#x27;PaymentDetailsRes&#x27;, alias_priority=2), &#x27;authorization_req&#x27;: FieldInfo(annotation=AuthorizationReq, required=False, alias=&#x27;AuthorizationReq&#x27;, alias_priority=2), &#x27;authorization_res&#x27;: FieldInfo(annotation=AuthorizationRes, required=False, alias=&#x27;AuthorizationRes&#x27;, alias_priority=2), &#x27;charge_param_discovery_req&#x27;: FieldInfo(annotation=ChargeParameterDiscoveryReq, required=False, alias=&#x27;ChargeParameterDiscoveryReq&#x27;, alias_priority=2), &#x27;charge_param_discovery_res&#x27;: FieldInfo(annotation=ChargeParameterDiscoveryRes, required=False, alias=&#x27;ChargeParameterDiscoveryRes&#x27;, alias_priority=2), &#x27;power_delivery_req&#x27;: FieldInfo(annotation=PowerDeliveryReq, required=False, alias=&#x27;PowerDeliveryReq&#x27;, alias_priority=2), &#x27;power_delivery_res&#x27;: FieldInfo(annotation=PowerDeliveryRes, required=False, alias=&#x27;PowerDeliveryRes&#x27;, alias_priority=2), &#x27;metering_receipt_req&#x27;: FieldInfo(annotation=MeteringReceiptReq, required=False, alias=&#x27;MeteringReceiptReq&#x27;, alias_priority=2), &#x27;metering_receipt_res&#x27;: FieldInfo(annotation=MeteringReceiptRes, required=False, alias=&#x27;MeteringReceiptRes&#x27;, alias_priority=2), &#x27;session_stop_req&#x27;: FieldInfo(annotation=SessionStopReq, required=False, alias=&#x27;SessionStopReq&#x27;, alias_priority=2), &#x27;session_stop_res&#x27;: FieldInfo(annotation=SessionStopRes, required=False, alias=&#x27;SessionStopRes&#x27;, alias_priority=2), &#x27;certificate_update_req&#x27;: FieldInfo(annotation=CertificateUpdateReq, required=False, alias=&#x27;CertificateUpdateReq&#x27;, alias_priority=2), &#x27;certificate_update_res&#x27;: FieldInfo(annotation=CertificateUpdateRes, required=False, alias=&#x27;CertificateUpdateRes&#x27;, alias_priority=2), &#x27;certificate_installation_req&#x27;: FieldInfo(annotation=CertificateInstallationReq, required=False, alias=&#x27;CertificateInstallationReq&#x27;, alias_priority=2), &#x27;certificate_installation_res&#x27;: FieldInfo(annotation=CertificateInstallationRes, required=False, alias=&#x27;CertificateInstallationRes&#x27;, alias_priority=2), &#x27;charging_status_req&#x27;: FieldInfo(annotation=ChargingStatusReq, required=False, alias=&#x27;ChargingStatusReq&#x27;, alias_priority=2), &#x27;charging_status_res&#x27;: FieldInfo(annotation=ChargingStatusRes, required=False, alias=&#x27;ChargingStatusRes&#x27;, alias_priority=2), &#x27;cable_check_req&#x27;: FieldInfo(annotation=CableCheckReq, required=False, alias=&#x27;CableCheckReq&#x27;, alias_priority=2), &#x27;cable_check_res&#x27;: FieldInfo(annotation=CableCheckRes, required=False, alias=&#x27;CableCheckRes&#x27;, alias_priority=2), &#x27;pre_charge_req&#x27;: FieldInfo(annotation=PreChargeReq, required=False, alias=&#x27;PreChargeReq&#x27;, alias_priority=2), &#x27;pre_charge_res&#x27;: FieldInfo(annotation=PreChargeRes, required=False, alias=&#x27;PreChargeRes&#x27;, alias_priority=2), &#x27;current_demand_req&#x27;: FieldInfo(annotation=CurrentDemandReq, required=False, alias=&#x27;CurrentDemandReq&#x27;, alias_priority=2), &#x27;current_demand_res&#x27;: FieldInfo(annotation=CurrentDemandRes, required=False, alias=&#x27;CurrentDemandRes&#x27;, alias_priority=2), &#x27;welding_detection_req&#x27;: FieldInfo(annotation=WeldingDetectionReq, required=False, alias=&#x27;WeldingDetectionReq&#x27;, alias_priority=2), &#x27;welding_detection_res&#x27;: FieldInfo(annotation=WeldingDetectionRes, required=False, alias=&#x27;WeldingDetectionRes&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes", "modulename": "v2gevil.messages.MsgDataTypes", "kind": "module", "doc": "<p>This module is for defining all types which are used in V2G messages.</p>\n\n<p>Based on the XSD schema: V2G_CI_MsgDataTypes.xsd</p>\n\n<p>simple types: starts with lower case letter\n    - I implement as class only simple types which are enums =&gt; contains only values\n    - Other simple types, where is only restriction and info about the type, I don't implement as separate class\n    - Update:\n    - There was a need to implement some of the simple types as class, cause they are used by complex types\n    - These simple types are implemented as class, but they are abstract, cause they are extended by other types\n    - simpleTypes: eMAIDType, dHpublickeyType, privateKeyType\n    - complexTypes that use these simpleTypes: EMADType, DiffieHellmanPublickeyType, ContractSignatureEncryptedPrivateKeyType, \ncomplex types: starts with UPPER case letter</p>\n"}, {"fullname": "v2gevil.messages.MsgDataTypes.serviceCategoryType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "serviceCategoryType", "kind": "class", "doc": "<p>Enumerated values for serviceCategoryType</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.messages.MsgDataTypes.serviceCategoryType.EV_CHARGING", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "serviceCategoryType.EV_CHARGING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;serviceCategoryType.EV_CHARGING: &#x27;EVCharging&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.serviceCategoryType.INTERNET", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "serviceCategoryType.INTERNET", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;serviceCategoryType.INTERNET: &#x27;Internet&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.serviceCategoryType.CONTRACT_CERTIFICATE", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "serviceCategoryType.CONTRACT_CERTIFICATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;serviceCategoryType.CONTRACT_CERTIFICATE: &#x27;ContractCertificate&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.serviceCategoryType.OTHER_CUSTOM", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "serviceCategoryType.OTHER_CUSTOM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;serviceCategoryType.OTHER_CUSTOM: &#x27;OtherCustom&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.ServiceType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ServiceType", "kind": "class", "doc": "<p>ComplexType ServiceType.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.ServiceType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ServiceType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgDataTypes.ServiceType.service_id", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ServiceType.service_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.ServiceType.service_name", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ServiceType.service_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgDataTypes.ServiceType.service_category", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ServiceType.service_category", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.serviceCategoryType"}, {"fullname": "v2gevil.messages.MsgDataTypes.ServiceType.service_scope", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ServiceType.service_scope", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgDataTypes.ServiceType.free_service", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ServiceType.free_service", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "v2gevil.messages.MsgDataTypes.ServiceType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ServiceType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;service_id&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;ServiceID&#x27;, alias_priority=2), &#x27;service_name&#x27;: FieldInfo(annotation=str, required=False, alias=&#x27;ServiceName&#x27;, alias_priority=2), &#x27;service_category&#x27;: FieldInfo(annotation=serviceCategoryType, required=True, alias=&#x27;ServiceCategory&#x27;, alias_priority=2), &#x27;service_scope&#x27;: FieldInfo(annotation=str, required=False, alias=&#x27;ServiceScope&#x27;, alias_priority=2), &#x27;free_service&#x27;: FieldInfo(annotation=bool, required=True, alias=&#x27;FreeService&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.SelectedServiceType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SelectedServiceType", "kind": "class", "doc": "<p>\"ComplexType SelectedServiceType.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.SelectedServiceType.service_id", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SelectedServiceType.service_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.SelectedServiceType.parameter_set_id", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SelectedServiceType.parameter_set_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.SelectedServiceType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SelectedServiceType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.SelectedServiceType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SelectedServiceType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;service_id&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;ServiceID&#x27;, alias_priority=2), &#x27;parameter_set_id&#x27;: FieldInfo(annotation=int, required=False, alias=&#x27;ParameterSetID&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.SelectedServiceListType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SelectedServiceListType", "kind": "class", "doc": "<p>ComplexType SelectedServiceListType.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.SelectedServiceListType.selected_service", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SelectedServiceListType.selected_service", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[v2gevil.messages.MsgDataTypes.SelectedServiceType]"}, {"fullname": "v2gevil.messages.MsgDataTypes.SelectedServiceListType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SelectedServiceListType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.SelectedServiceListType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SelectedServiceListType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;selected_service&#x27;: FieldInfo(annotation=List[SelectedServiceType], required=True, alias=&#x27;SelectedService&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.unitSymbolType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "unitSymbolType", "kind": "class", "doc": "<p>simpleType unitSymbolType</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.messages.MsgDataTypes.unitSymbolType.HOURS", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "unitSymbolType.HOURS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;unitSymbolType.HOURS: &#x27;h&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.unitSymbolType.MINUTES", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "unitSymbolType.MINUTES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;unitSymbolType.MINUTES: &#x27;m&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.unitSymbolType.SECONDS", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "unitSymbolType.SECONDS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;unitSymbolType.SECONDS: &#x27;s&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.unitSymbolType.AMPERE", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "unitSymbolType.AMPERE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;unitSymbolType.AMPERE: &#x27;A&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.unitSymbolType.VOLT", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "unitSymbolType.VOLT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;unitSymbolType.VOLT: &#x27;V&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.unitSymbolType.WATT", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "unitSymbolType.WATT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;unitSymbolType.WATT: &#x27;W&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.unitSymbolType.WATT_HOUR", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "unitSymbolType.WATT_HOUR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;unitSymbolType.WATT_HOUR: &#x27;Wh&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.PhysicalValueType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "PhysicalValueType", "kind": "class", "doc": "<p>ComplexType PhysicalValueType.</p>\n\n<p>Value range and unit definition for message elements using PhysicalValueType    Table 68, page 110</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.PhysicalValueType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "PhysicalValueType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgDataTypes.PhysicalValueType.multiplier", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "PhysicalValueType.multiplier", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.PhysicalValueType.unit", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "PhysicalValueType.unit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.unitSymbolType"}, {"fullname": "v2gevil.messages.MsgDataTypes.PhysicalValueType.value", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "PhysicalValueType.value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.PhysicalValueType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "PhysicalValueType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;multiplier&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;Multiplier&#x27;, alias_priority=2), &#x27;unit&#x27;: FieldInfo(annotation=unitSymbolType, required=True, alias=&#x27;Unit&#x27;, alias_priority=2), &#x27;value&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;Value&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.ParameterType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ParameterType", "kind": "class", "doc": "<p>ComplexType ParameterType.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.ParameterType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ParameterType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;populate_by_name&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgDataTypes.ParameterType.name", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ParameterType.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgDataTypes.ParameterType.bool_value", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ParameterType.bool_value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "v2gevil.messages.MsgDataTypes.ParameterType.byte_value", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ParameterType.byte_value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.ParameterType.short_value", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ParameterType.short_value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.ParameterType.int_value", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ParameterType.int_value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.ParameterType.physical_value", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ParameterType.physical_value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.ParameterType.string_value", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ParameterType.string_value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgDataTypes.ParameterType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ParameterType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True, alias_priority=2, validation_alias=&#x27;@Name&#x27;, serialization_alias=&#x27;@Name&#x27;), &#x27;bool_value&#x27;: FieldInfo(annotation=bool, required=False, alias=&#x27;boolValue&#x27;, alias_priority=2), &#x27;byte_value&#x27;: FieldInfo(annotation=int, required=False, alias=&#x27;byteValue&#x27;, alias_priority=2), &#x27;short_value&#x27;: FieldInfo(annotation=int, required=False, alias=&#x27;shortValue&#x27;, alias_priority=2), &#x27;int_value&#x27;: FieldInfo(annotation=int, required=False, alias=&#x27;intValue&#x27;, alias_priority=2), &#x27;physical_value&#x27;: FieldInfo(annotation=PhysicalValueType, required=False, alias=&#x27;physicalValue&#x27;, alias_priority=2), &#x27;string_value&#x27;: FieldInfo(annotation=str, required=False, alias=&#x27;stringValue&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.ParameterSetType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ParameterSetType", "kind": "class", "doc": "<p>ComplexType ParameterSetType.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.ParameterSetType.parameter_set_id", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ParameterSetType.parameter_set_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.ParameterSetType.parameter", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ParameterSetType.parameter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[v2gevil.messages.MsgDataTypes.ParameterType]"}, {"fullname": "v2gevil.messages.MsgDataTypes.ParameterSetType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ParameterSetType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.ParameterSetType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ParameterSetType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;parameter_set_id&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;ParameterSetID&#x27;, alias_priority=2), &#x27;parameter&#x27;: FieldInfo(annotation=List[ParameterType], required=True, alias=&#x27;Parameter&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.faultCodeType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "faultCodeType", "kind": "class", "doc": "<p>Enumerated values for faultCodeType</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.messages.MsgDataTypes.faultCodeType.PARSING_ERROR", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "faultCodeType.PARSING_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;faultCodeType.PARSING_ERROR: &#x27;ParsingError&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.faultCodeType.NO_TLS_ROOT_CERT_AVAILABLE", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "faultCodeType.NO_TLS_ROOT_CERT_AVAILABLE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;faultCodeType.NO_TLS_ROOT_CERT_AVAILABLE: &#x27;NoTLSRootCertificatAvailable&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.faultCodeType.UNKNOWN_ERROR", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "faultCodeType.UNKNOWN_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;faultCodeType.UNKNOWN_ERROR: &#x27;UnknownError&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.NotificationType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "NotificationType", "kind": "class", "doc": "<p>ComplexType NotificationType.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.NotificationType.fault_code", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "NotificationType.fault_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.faultCodeType"}, {"fullname": "v2gevil.messages.MsgDataTypes.NotificationType.fault_msg", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "NotificationType.fault_msg", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgDataTypes.NotificationType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "NotificationType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.NotificationType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "NotificationType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;fault_code&#x27;: FieldInfo(annotation=faultCodeType, required=True, alias=&#x27;FaultCode&#x27;, alias_priority=2), &#x27;fault_msg&#x27;: FieldInfo(annotation=str, required=False, alias=&#x27;FaultMsg&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType", "kind": "class", "doc": "<p>Enumerated values for responseCodeType, simpleType responseCodeType</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.OK", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.OK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.OK: &#x27;OK&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.OK_NEW_SESSION_ESTABLISHED", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.OK_NEW_SESSION_ESTABLISHED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.OK_NEW_SESSION_ESTABLISHED: &#x27;OK_NewSessionEstablished&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.OK_OLD_SESSION_ESTABLISHED", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.OK_OLD_SESSION_ESTABLISHED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.OK_OLD_SESSION_ESTABLISHED: &#x27;OK_OldSessionJoined&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.OK_CERT_EXPIRES_SOON", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.OK_CERT_EXPIRES_SOON", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.OK_CERT_EXPIRES_SOON: &#x27;OK_CertificateExpiresSoon&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED: &#x27;FAILED&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED_SEQUENCE_ERROR", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED_SEQUENCE_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_SEQUENCE_ERROR: &#x27;FAILED_SequenceError&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED_SERVICE_ID_INVALIED", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED_SERVICE_ID_INVALIED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_SERVICE_ID_INVALIED: &#x27;FAILED_ServiceIDInvalid&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED_UNKNOWN_SESSION", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED_UNKNOWN_SESSION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_UNKNOWN_SESSION: &#x27;FAILED_UnknownSession&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED_SERVICE_SEL_INVALID", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED_SERVICE_SEL_INVALID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_SERVICE_SEL_INVALID: &#x27;FAILED_ServiceSelectionInvalid&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED_PAYNMENT_SEL_INVALID", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED_PAYNMENT_SEL_INVALID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_PAYNMENT_SEL_INVALID: &#x27;FAILED_PaymentSelectionInvalid&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED_CERT_EXPIRED", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED_CERT_EXPIRED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_CERT_EXPIRED: &#x27;FAILED_CertificateExpired&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED_SIGNATURE_ERROR", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED_SIGNATURE_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_SIGNATURE_ERROR: &#x27;FAILED_SignatureError&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED_NO_CERT_AVAILABLE", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED_NO_CERT_AVAILABLE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_NO_CERT_AVAILABLE: &#x27;FAILED_NoCertificateAvailable&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED_CERT_CHAIN_ERROR", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED_CERT_CHAIN_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_CERT_CHAIN_ERROR: &#x27;FAILED_CertChainError&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED_CHALLENGE_INVALID", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED_CHALLENGE_INVALID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_CHALLENGE_INVALID: &#x27;FAILED_ChallengeInvalid&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED_CONTRACT_CANCELED", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED_CONTRACT_CANCELED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_CONTRACT_CANCELED: &#x27;FAILED_ContractCanceled&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED_WRONG_CHARGE_PARAM", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED_WRONG_CHARGE_PARAM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_WRONG_CHARGE_PARAM: &#x27;FAILED_WrongChargeParameter&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED_POWER_DELIVERY_NOT_APPLIED", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED_POWER_DELIVERY_NOT_APPLIED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_POWER_DELIVERY_NOT_APPLIED: &#x27;FAILED_PowerDeliveryNotApplied&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED_TARIFF_SEL_INVALID", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED_TARIFF_SEL_INVALID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_TARIFF_SEL_INVALID: &#x27;FAILED_TariffSelectionInvalid&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED_CHARGING_PROFILE_INVALID", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED_CHARGING_PROFILE_INVALID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_CHARGING_PROFILE_INVALID: &#x27;FAILED_ChargingProfileInvalid&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED_METERING_SIGNATURE_NOT_VALID", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED_METERING_SIGNATURE_NOT_VALID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_METERING_SIGNATURE_NOT_VALID: &#x27;FAILED_MeteringSignatureNotValid&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED_NO_CHARGE_SERVICE_SEL", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED_NO_CHARGE_SERVICE_SEL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_NO_CHARGE_SERVICE_SEL: &#x27;FAILED_NoChargeServiceSelected&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED_WRONG_ENERGY_TRANSFER_MODE", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED_WRONG_ENERGY_TRANSFER_MODE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_WRONG_ENERGY_TRANSFER_MODE: &#x27;FAILED_WrongEnergyTransferMode&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED_CONTRACTOR_ERROR", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED_CONTRACTOR_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_CONTRACTOR_ERROR: &#x27;FAILED_ContactorError&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED_CERT_NOT_ALLOWED_AT_THIS_EVSE", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED_CERT_NOT_ALLOWED_AT_THIS_EVSE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_CERT_NOT_ALLOWED_AT_THIS_EVSE: &#x27;FAILED_CertificateNotAllowedAtThisEVSE&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.responseCodeType.FAILED_CERT_REVOKED", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "responseCodeType.FAILED_CERT_REVOKED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;responseCodeType.FAILED_CERT_REVOKED: &#x27;FAILED_CertificateRevoked&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.paymentOptionType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "paymentOptionType", "kind": "class", "doc": "<p>Enumerated values for paymentOptionListType</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.messages.MsgDataTypes.paymentOptionType.CONTRACT", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "paymentOptionType.CONTRACT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;paymentOptionType.CONTRACT: &#x27;Contract&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.paymentOptionType.EXTERNAL_PAYMENT", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "paymentOptionType.EXTERNAL_PAYMENT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;paymentOptionType.EXTERNAL_PAYMENT: &#x27;ExternalPayment&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.PaymentOptionListType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "PaymentOptionListType", "kind": "class", "doc": "<p>ComplexType PaymentOptionListType.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.PaymentOptionListType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "PaymentOptionListType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgDataTypes.PaymentOptionListType.payment_option", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "PaymentOptionListType.payment_option", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[v2gevil.messages.MsgDataTypes.paymentOptionType]"}, {"fullname": "v2gevil.messages.MsgDataTypes.PaymentOptionListType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "PaymentOptionListType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;payment_option&#x27;: FieldInfo(annotation=List[paymentOptionType], required=True, alias=&#x27;PaymentOption&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.ServiceListType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ServiceListType", "kind": "class", "doc": "<p>ComplexType ServiceListType.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.ServiceListType.service", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ServiceListType.service", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[v2gevil.messages.MsgDataTypes.ServiceType]"}, {"fullname": "v2gevil.messages.MsgDataTypes.ServiceListType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ServiceListType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.ServiceListType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ServiceListType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;service&#x27;: FieldInfo(annotation=List[ServiceType], required=True, alias=&#x27;Service&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.EnergyTransferModeType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EnergyTransferModeType", "kind": "class", "doc": "<p>Enumerated values for EnergyTransferModeType</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.messages.MsgDataTypes.EnergyTransferModeType.AC_SINGLE_PHASE_CORE", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EnergyTransferModeType.AC_SINGLE_PHASE_CORE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EnergyTransferModeType.AC_SINGLE_PHASE_CORE: &#x27;AC_single_phase_core&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.EnergyTransferModeType.AC_THREE_PHASE_CORE", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EnergyTransferModeType.AC_THREE_PHASE_CORE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EnergyTransferModeType.AC_THREE_PHASE_CORE: &#x27;AC_three_phase_core&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.EnergyTransferModeType.DC_CORE", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EnergyTransferModeType.DC_CORE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EnergyTransferModeType.DC_CORE: &#x27;DC_core&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.EnergyTransferModeType.DC_EXTENDED", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EnergyTransferModeType.DC_EXTENDED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EnergyTransferModeType.DC_EXTENDED: &#x27;DC_extended&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.EnergyTransferModeType.DC_COMBO_CORE", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EnergyTransferModeType.DC_COMBO_CORE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EnergyTransferModeType.DC_COMBO_CORE: &#x27;DC_combo_core&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.EnergyTransferModeType.DC_UNIQUE", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EnergyTransferModeType.DC_UNIQUE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EnergyTransferModeType.DC_UNIQUE: &#x27;DC_unique&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.SupportedEnergyTransferModeType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SupportedEnergyTransferModeType", "kind": "class", "doc": "<p>ComplexType SupportedEnergyTransferModeType.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.SupportedEnergyTransferModeType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SupportedEnergyTransferModeType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgDataTypes.SupportedEnergyTransferModeType.energy_transfered_mode", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SupportedEnergyTransferModeType.energy_transfered_mode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[v2gevil.messages.MsgDataTypes.EnergyTransferModeType]"}, {"fullname": "v2gevil.messages.MsgDataTypes.SupportedEnergyTransferModeType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SupportedEnergyTransferModeType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;energy_transfered_mode&#x27;: FieldInfo(annotation=List[EnergyTransferModeType], required=True, alias=&#x27;EnergyTransferMode&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.ChargeServiceType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ChargeServiceType", "kind": "class", "doc": "<p>ComplexType ChargeServiceType.</p>\n", "bases": "ServiceType"}, {"fullname": "v2gevil.messages.MsgDataTypes.ChargeServiceType.supported_energy_transfer_mode", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ChargeServiceType.supported_energy_transfer_mode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.SupportedEnergyTransferModeType"}, {"fullname": "v2gevil.messages.MsgDataTypes.ChargeServiceType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ChargeServiceType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgDataTypes.ChargeServiceType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ChargeServiceType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;service_id&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;ServiceID&#x27;, alias_priority=2), &#x27;service_name&#x27;: FieldInfo(annotation=str, required=False, alias=&#x27;ServiceName&#x27;, alias_priority=2), &#x27;service_category&#x27;: FieldInfo(annotation=serviceCategoryType, required=True, alias=&#x27;ServiceCategory&#x27;, alias_priority=2), &#x27;service_scope&#x27;: FieldInfo(annotation=str, required=False, alias=&#x27;ServiceScope&#x27;, alias_priority=2), &#x27;free_service&#x27;: FieldInfo(annotation=bool, required=True, alias=&#x27;FreeService&#x27;, alias_priority=2), &#x27;supported_energy_transfer_mode&#x27;: FieldInfo(annotation=SupportedEnergyTransferModeType, required=True, alias=&#x27;SupportedEnergyTransferMode&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.ServiceParameterListType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ServiceParameterListType", "kind": "class", "doc": "<p>ComplexType ServiceParameterListType.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.ServiceParameterListType.parameter_set", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ServiceParameterListType.parameter_set", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[v2gevil.messages.MsgDataTypes.ParameterSetType]"}, {"fullname": "v2gevil.messages.MsgDataTypes.ServiceParameterListType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ServiceParameterListType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.ServiceParameterListType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ServiceParameterListType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;parameter_set&#x27;: FieldInfo(annotation=List[ParameterSetType], required=True, alias=&#x27;ParameterSet&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.SubCertificatesType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SubCertificatesType", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.2/usage/models/\">https://docs.pydantic.dev/2.2/usage/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly specified during validation.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.SubCertificatesType.certificate", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SubCertificatesType.certificate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "v2gevil.messages.MsgDataTypes.SubCertificatesType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SubCertificatesType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.SubCertificatesType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SubCertificatesType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;certificate&#x27;: FieldInfo(annotation=List[str], required=True, alias=&#x27;Certificate&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.CertificateChainType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "CertificateChainType", "kind": "class", "doc": "<p>ComplexType CertificateChainType.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.CertificateChainType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "CertificateChainType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;populate_by_name&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgDataTypes.CertificateChainType.id", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "CertificateChainType.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgDataTypes.CertificateChainType.certificate", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "CertificateChainType.certificate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgDataTypes.CertificateChainType.sub_certificates", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "CertificateChainType.sub_certificates", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.SubCertificatesType"}, {"fullname": "v2gevil.messages.MsgDataTypes.CertificateChainType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "CertificateChainType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;id&#x27;: FieldInfo(annotation=str, required=False, alias_priority=2, validation_alias=&#x27;@Id&#x27;, serialization_alias=&#x27;@Id&#x27;), &#x27;certificate&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;Certificate&#x27;, alias_priority=2), &#x27;sub_certificates&#x27;: FieldInfo(annotation=SubCertificatesType, required=False, alias=&#x27;SubCertificates&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVSEProcessingType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVSEProcessingType", "kind": "class", "doc": "<p>Enumerated values for EVSEProcessingType, simpleType EVSEProcessingType</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVSEProcessingType.ONGOING", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVSEProcessingType.ONGOING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVSEProcessingType.ONGOING: &#x27;Ongoing&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVSEProcessingType.FINISHED", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVSEProcessingType.FINISHED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVSEProcessingType.FINISHED: &#x27;Finished&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVSEProcessingType.ONGOING_WAITING_FOR_CUSTOMER_INTERACTION", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVSEProcessingType.ONGOING_WAITING_FOR_CUSTOMER_INTERACTION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVSEProcessingType.ONGOING_WAITING_FOR_CUSTOMER_INTERACTION: &#x27;OngoingWaitingForCustomerInteraction&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVSENotificationType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVSENotificationType", "kind": "class", "doc": "<p>enumerated values for EVSENotificationType</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVSENotificationType.NONE", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVSENotificationType.NONE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVSENotificationType.NONE: &#x27;None&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVSENotificationType.STOP_CHARGING", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVSENotificationType.STOP_CHARGING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVSENotificationType.STOP_CHARGING: &#x27;StopCharging&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVSENotificationType.RE_NEGOTIATION", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVSENotificationType.RE_NEGOTIATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVSENotificationType.RE_NEGOTIATION: &#x27;ReNegotiation&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVSEStatusType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVSEStatusType", "kind": "class", "doc": "<p>complexType EVSEStatusType. Abstract class - abstract in XSD</p>\n", "bases": "abc.ABC, pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVSEStatusType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVSEStatusType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVSEStatusType.notification_max_delay", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVSEStatusType.notification_max_delay", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVSEStatusType.evse_notification", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVSEStatusType.evse_notification", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.EVSENotificationType"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVSEStatusType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVSEStatusType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;notification_max_delay&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;NotificationMaxDelay&#x27;, alias_priority=2), &#x27;evse_notification&#x27;: FieldInfo(annotation=EVSENotificationType, required=True, alias=&#x27;EVSENotification&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.AC_EVSEStatusType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "AC_EVSEStatusType", "kind": "class", "doc": "<p>complexType AC_EVSEStatusType</p>\n", "bases": "EVSEStatusType"}, {"fullname": "v2gevil.messages.MsgDataTypes.AC_EVSEStatusType.rcd", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "AC_EVSEStatusType.rcd", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "v2gevil.messages.MsgDataTypes.AC_EVSEStatusType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "AC_EVSEStatusType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgDataTypes.AC_EVSEStatusType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "AC_EVSEStatusType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;notification_max_delay&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;NotificationMaxDelay&#x27;, alias_priority=2), &#x27;evse_notification&#x27;: FieldInfo(annotation=EVSENotificationType, required=True, alias=&#x27;EVSENotification&#x27;, alias_priority=2), &#x27;rcd&#x27;: FieldInfo(annotation=bool, required=True, alias=&#x27;RCD&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.isolationLevelType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "isolationLevelType", "kind": "class", "doc": "<p>enumerated values for isolationLevelType</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.messages.MsgDataTypes.isolationLevelType.INVALID", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "isolationLevelType.INVALID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;isolationLevelType.INVALID: &#x27;Invalid&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.isolationLevelType.VALID", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "isolationLevelType.VALID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;isolationLevelType.VALID: &#x27;Valid&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.isolationLevelType.WARNING", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "isolationLevelType.WARNING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;isolationLevelType.WARNING: &#x27;Warning&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.isolationLevelType.FAULT", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "isolationLevelType.FAULT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;isolationLevelType.FAULT: &#x27;Fault&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.isolationLevelType.NO_IMD", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "isolationLevelType.NO_IMD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;isolationLevelType.NO_IMD: &#x27;No_IMD&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEStatusCodeType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEStatusCodeType", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEStatusCodeType.EVSE_NOT_READY", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEStatusCodeType.EVSE_NOT_READY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVSEStatusCodeType.EVSE_NOT_READY: &#x27;EVSE_NotReady&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEStatusCodeType.EVSE_READY", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEStatusCodeType.EVSE_READY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVSEStatusCodeType.EVSE_READY: &#x27;EVSE_Ready&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEStatusCodeType.EVSE_SHUTDOWN", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEStatusCodeType.EVSE_SHUTDOWN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVSEStatusCodeType.EVSE_SHUTDOWN: &#x27;EVSE_Shutdown&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEStatusCodeType.EVSE_UTILITY_INTERRUPT_EVENT", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEStatusCodeType.EVSE_UTILITY_INTERRUPT_EVENT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVSEStatusCodeType.EVSE_UTILITY_INTERRUPT_EVENT: &#x27;EVSE_UtilityInterruptEvent&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEStatusCodeType.EVSE_ISOLATION_MONITORING_ACTIVE", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEStatusCodeType.EVSE_ISOLATION_MONITORING_ACTIVE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVSEStatusCodeType.EVSE_ISOLATION_MONITORING_ACTIVE: &#x27;EVSE_IsolationMonitoringActive&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEStatusCodeType.EVSE_EMERGENCY_SHUTDOWN", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEStatusCodeType.EVSE_EMERGENCY_SHUTDOWN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVSEStatusCodeType.EVSE_EMERGENCY_SHUTDOWN: &#x27;EVSE_EmergencyShutdown&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEStatusCodeType.EVSE_MALFUNCTION", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEStatusCodeType.EVSE_MALFUNCTION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVSEStatusCodeType.EVSE_MALFUNCTION: &#x27;EVSE_Malfunction&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEStatusCodeType.RESERVED_8", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEStatusCodeType.RESERVED_8", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVSEStatusCodeType.RESERVED_8: &#x27;Reserved_8&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEStatusCodeType.RESERVED_9", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEStatusCodeType.RESERVED_9", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVSEStatusCodeType.RESERVED_9: &#x27;Reserved_9&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEStatusCodeType.RESERVED_A", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEStatusCodeType.RESERVED_A", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVSEStatusCodeType.RESERVED_A: &#x27;Reserved_A&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEStatusCodeType.RESERVED_B", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEStatusCodeType.RESERVED_B", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVSEStatusCodeType.RESERVED_B: &#x27;Reserved_B&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEStatusCodeType.RESERVED_C", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEStatusCodeType.RESERVED_C", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVSEStatusCodeType.RESERVED_C: &#x27;Reserved_C&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEStatusType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEStatusType", "kind": "class", "doc": "<p>complexType DC_EVSEStatusType</p>\n", "bases": "EVSEStatusType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEStatusType.evse_isolation_status", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEStatusType.evse_isolation_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.isolationLevelType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEStatusType.evse_status_code", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEStatusType.evse_status_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.DC_EVSEStatusCodeType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEStatusType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEStatusType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;use_enum_values&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEStatusType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEStatusType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;notification_max_delay&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;NotificationMaxDelay&#x27;, alias_priority=2), &#x27;evse_notification&#x27;: FieldInfo(annotation=EVSENotificationType, required=True, alias=&#x27;EVSENotification&#x27;, alias_priority=2), &#x27;evse_isolation_status&#x27;: FieldInfo(annotation=isolationLevelType, required=False, alias=&#x27;EVSEIsolationStatus&#x27;, alias_priority=2), &#x27;evse_status_code&#x27;: FieldInfo(annotation=DC_EVSEStatusCodeType, required=True, alias=&#x27;EVSEStatusCode&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVSEChargeParameterType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVSEChargeParameterType", "kind": "class", "doc": "<p>complexType EVSEChargeParameterType. Abstract class - abstract in XSD</p>\n", "bases": "abc.ABC, pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVSEChargeParameterType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVSEChargeParameterType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVSEChargeParameterType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVSEChargeParameterType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.AC_EVSEChargeParameterType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "AC_EVSEChargeParameterType", "kind": "class", "doc": "<p>complexType AC_EVSEChargeParameterType</p>\n", "bases": "EVSEChargeParameterType"}, {"fullname": "v2gevil.messages.MsgDataTypes.AC_EVSEChargeParameterType.ac_evse_status", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "AC_EVSEChargeParameterType.ac_evse_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.AC_EVSEStatusType"}, {"fullname": "v2gevil.messages.MsgDataTypes.AC_EVSEChargeParameterType.evse_nominal_voltage", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "AC_EVSEChargeParameterType.evse_nominal_voltage", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.AC_EVSEChargeParameterType.evse_max_current", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "AC_EVSEChargeParameterType.evse_max_current", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.AC_EVSEChargeParameterType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "AC_EVSEChargeParameterType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.AC_EVSEChargeParameterType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "AC_EVSEChargeParameterType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;ac_evse_status&#x27;: FieldInfo(annotation=AC_EVSEStatusType, required=True, alias=&#x27;AC_EVSEStatus&#x27;, alias_priority=2), &#x27;evse_nominal_voltage&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EVSENominalVoltage&#x27;, alias_priority=2), &#x27;evse_max_current&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EVSEMaxCurrent&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEChargeParameterType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEChargeParameterType", "kind": "class", "doc": "<p>complexType DC_EVSEChargeParameterType</p>\n", "bases": "EVSEChargeParameterType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEChargeParameterType.dc_evse_status", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEChargeParameterType.dc_evse_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.DC_EVSEStatusType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEChargeParameterType.evse_max_current_limit", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEChargeParameterType.evse_max_current_limit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEChargeParameterType.evse_max_power_limit", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEChargeParameterType.evse_max_power_limit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEChargeParameterType.evse_max_voltage_limit", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEChargeParameterType.evse_max_voltage_limit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEChargeParameterType.evse_min_current_limit", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEChargeParameterType.evse_min_current_limit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEChargeParameterType.evse_min_voltage_limit", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEChargeParameterType.evse_min_voltage_limit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEChargeParameterType.evse_current_regulation_tolerance", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEChargeParameterType.evse_current_regulation_tolerance", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEChargeParameterType.evse_peak_current_ripple", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEChargeParameterType.evse_peak_current_ripple", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEChargeParameterType.evse_energy_to_be_delivered", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEChargeParameterType.evse_energy_to_be_delivered", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEChargeParameterType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEChargeParameterType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVSEChargeParameterType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVSEChargeParameterType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;dc_evse_status&#x27;: FieldInfo(annotation=DC_EVSEStatusType, required=True, alias=&#x27;DC_EVSEStatus&#x27;, alias_priority=2), &#x27;evse_max_current_limit&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EVSEMaximumCurrentLimit&#x27;, alias_priority=2), &#x27;evse_max_power_limit&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EVSEMaximumPowerLimit&#x27;, alias_priority=2), &#x27;evse_max_voltage_limit&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EVSEMaximumVoltageLimit&#x27;, alias_priority=2), &#x27;evse_min_current_limit&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EVSEMinimumCurrentLimit&#x27;, alias_priority=2), &#x27;evse_min_voltage_limit&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EVSEMinimumVoltageLimit&#x27;, alias_priority=2), &#x27;evse_current_regulation_tolerance&#x27;: FieldInfo(annotation=PhysicalValueType, required=False, alias=&#x27;EVSECurrentRegulationTolerance&#x27;, alias_priority=2), &#x27;evse_peak_current_ripple&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EVSEPeakCurrentRipple&#x27;, alias_priority=2), &#x27;evse_energy_to_be_delivered&#x27;: FieldInfo(annotation=PhysicalValueType, required=False, alias=&#x27;EVSEEnergyToBeDelivered&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVChargeParameterType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVChargeParameterType", "kind": "class", "doc": "<p>complexType EVChargeParameterType. Abstract class - abstract in XSD</p>\n", "bases": "abc.ABC, pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVChargeParameterType.departure_time", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVChargeParameterType.departure_time", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVChargeParameterType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVChargeParameterType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVChargeParameterType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVChargeParameterType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;departure_time&#x27;: FieldInfo(annotation=int, required=False, alias=&#x27;DepartureTime&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.AC_EVChargeParameterType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "AC_EVChargeParameterType", "kind": "class", "doc": "<p>complexType AC_EVChargeParameterType</p>\n", "bases": "EVChargeParameterType"}, {"fullname": "v2gevil.messages.MsgDataTypes.AC_EVChargeParameterType.e_amount", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "AC_EVChargeParameterType.e_amount", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.AC_EVChargeParameterType.ev_max_voltage", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "AC_EVChargeParameterType.ev_max_voltage", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.AC_EVChargeParameterType.ev_max_current", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "AC_EVChargeParameterType.ev_max_current", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.AC_EVChargeParameterType.ev_min_current", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "AC_EVChargeParameterType.ev_min_current", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.AC_EVChargeParameterType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "AC_EVChargeParameterType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.AC_EVChargeParameterType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "AC_EVChargeParameterType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;departure_time&#x27;: FieldInfo(annotation=int, required=False, alias=&#x27;DepartureTime&#x27;, alias_priority=2), &#x27;e_amount&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EAmount&#x27;, alias_priority=2), &#x27;ev_max_voltage&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EVMaxVoltage&#x27;, alias_priority=2), &#x27;ev_max_current&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EVMaxCurrent&#x27;, alias_priority=2), &#x27;ev_min_current&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EVMinCurrent&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVErrorCodeType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVErrorCodeType", "kind": "class", "doc": "<p>enumerated values for DC_EVErrorCodeType</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVErrorCodeType.NO_ERROR", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVErrorCodeType.NO_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVErrorCodeType.NO_ERROR: &#x27;NO_ERROR&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVErrorCodeType.FAILED_RESS_TEMP_INHIBIT", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVErrorCodeType.FAILED_RESS_TEMP_INHIBIT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVErrorCodeType.FAILED_RESS_TEMP_INHIBIT: &#x27;FAILED_RESSTemperatureInhibit&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVErrorCodeType.FAILED_EV_SHIFT_POS", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVErrorCodeType.FAILED_EV_SHIFT_POS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVErrorCodeType.FAILED_EV_SHIFT_POS: &#x27;FAILED_EVShiftPosition&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVErrorCodeType.FAILED_CHARGER_CONNECTOR_LOCK_FAULT", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVErrorCodeType.FAILED_CHARGER_CONNECTOR_LOCK_FAULT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVErrorCodeType.FAILED_CHARGER_CONNECTOR_LOCK_FAULT: &#x27;FAILED_ChargerConnectorLockFault&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVErrorCodeType.FAILED_EV_RESS_MALFUNCTION", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVErrorCodeType.FAILED_EV_RESS_MALFUNCTION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVErrorCodeType.FAILED_EV_RESS_MALFUNCTION: &#x27;FAILED_EVRESSMalfunction&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVErrorCodeType.FAILED_CHARGING_CURR_DIFF", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVErrorCodeType.FAILED_CHARGING_CURR_DIFF", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVErrorCodeType.FAILED_CHARGING_CURR_DIFF: &#x27;FAILED_ChargingCurrentdifferential&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVErrorCodeType.FAILED_CHARGING_VOLT_OUT_OF_RANGE", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVErrorCodeType.FAILED_CHARGING_VOLT_OUT_OF_RANGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVErrorCodeType.FAILED_CHARGING_VOLT_OUT_OF_RANGE: &#x27;FAILED_ChargingVoltageOutOfRange&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVErrorCodeType.RESERVED_A", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVErrorCodeType.RESERVED_A", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVErrorCodeType.RESERVED_A: &#x27;Reserved_A&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVErrorCodeType.RESERVED_B", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVErrorCodeType.RESERVED_B", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVErrorCodeType.RESERVED_B: &#x27;Reserved_B&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVErrorCodeType.RESERVED_C", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVErrorCodeType.RESERVED_C", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVErrorCodeType.RESERVED_C: &#x27;Reserved_C&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVErrorCodeType.FAILED_CHARGING_SYSTEM_INCOMPATIBILITY", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVErrorCodeType.FAILED_CHARGING_SYSTEM_INCOMPATIBILITY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVErrorCodeType.FAILED_CHARGING_SYSTEM_INCOMPATIBILITY: &#x27;FAILED_ChargingSystemIncompatibility&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVErrorCodeType.NO_DATA", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVErrorCodeType.NO_DATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DC_EVErrorCodeType.NO_DATA: &#x27;NoData&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVStatusType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVStatusType", "kind": "class", "doc": "<p>complexType DC_EVStatusType</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVStatusType.ev_ready", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVStatusType.ev_ready", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVStatusType.ev_error_code", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVStatusType.ev_error_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.DC_EVErrorCodeType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVStatusType.ev_ress_soc", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVStatusType.ev_ress_soc", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVStatusType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVStatusType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVStatusType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVStatusType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;ev_ready&#x27;: FieldInfo(annotation=bool, required=True, alias=&#x27;EVReady&#x27;, alias_priority=2), &#x27;ev_error_code&#x27;: FieldInfo(annotation=DC_EVErrorCodeType, required=True, alias=&#x27;EVErrorCode&#x27;, alias_priority=2), &#x27;ev_ress_soc&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;EVRESSSOC&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVChargeParameterType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVChargeParameterType", "kind": "class", "doc": "<p>complexType DC_EVChargeParameterType</p>\n", "bases": "EVChargeParameterType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVChargeParameterType.dc_ev_status", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVChargeParameterType.dc_ev_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.DC_EVStatusType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVChargeParameterType.ev_maximum_current_limit", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVChargeParameterType.ev_maximum_current_limit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVChargeParameterType.ev_maximum_power_limit", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVChargeParameterType.ev_maximum_power_limit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVChargeParameterType.ev_maximum_voltage_limit", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVChargeParameterType.ev_maximum_voltage_limit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVChargeParameterType.ev_energy_capacity", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVChargeParameterType.ev_energy_capacity", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVChargeParameterType.ev_energy_request", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVChargeParameterType.ev_energy_request", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVChargeParameterType.full_soc", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVChargeParameterType.full_soc", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVChargeParameterType.bulk_soc", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVChargeParameterType.bulk_soc", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVChargeParameterType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVChargeParameterType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVChargeParameterType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVChargeParameterType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;departure_time&#x27;: FieldInfo(annotation=int, required=False, alias=&#x27;DepartureTime&#x27;, alias_priority=2), &#x27;dc_ev_status&#x27;: FieldInfo(annotation=DC_EVStatusType, required=True, alias=&#x27;DC_EVStatus&#x27;, alias_priority=2), &#x27;ev_maximum_current_limit&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EVMaximumCurrentLimit&#x27;, alias_priority=2), &#x27;ev_maximum_power_limit&#x27;: FieldInfo(annotation=PhysicalValueType, required=False, alias=&#x27;EVMaximumPowerLimit&#x27;, alias_priority=2), &#x27;ev_maximum_voltage_limit&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;EVMaximumVoltageLimit&#x27;, alias_priority=2), &#x27;ev_energy_capacity&#x27;: FieldInfo(annotation=PhysicalValueType, required=False, alias=&#x27;EVEnergyCapacity&#x27;, alias_priority=2), &#x27;ev_energy_request&#x27;: FieldInfo(annotation=PhysicalValueType, required=False, alias=&#x27;EVEnergyRequest&#x27;, alias_priority=2), &#x27;full_soc&#x27;: FieldInfo(annotation=int, required=False, alias=&#x27;FullSOC&#x27;, alias_priority=2), &#x27;bulk_soc&#x27;: FieldInfo(annotation=int, required=False, alias=&#x27;BulkSOC&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.IntervalType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "IntervalType", "kind": "class", "doc": "<p>complexType IntervalType. Abstract class - abstract in XSD</p>\n", "bases": "abc.ABC, pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.IntervalType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "IntervalType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.IntervalType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "IntervalType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.RelativeTimeIntervalType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "RelativeTimeIntervalType", "kind": "class", "doc": "<p>complexType RelativeTimeIntervalType</p>\n", "bases": "IntervalType"}, {"fullname": "v2gevil.messages.MsgDataTypes.RelativeTimeIntervalType.start", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "RelativeTimeIntervalType.start", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.RelativeTimeIntervalType.duration", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "RelativeTimeIntervalType.duration", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgDataTypes.RelativeTimeIntervalType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "RelativeTimeIntervalType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.RelativeTimeIntervalType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "RelativeTimeIntervalType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;start&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;start&#x27;, alias_priority=2), &#x27;duration&#x27;: FieldInfo(annotation=str, required=False, alias=&#x27;duration&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.EntryType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EntryType", "kind": "class", "doc": "<p>complexType EntryType. Abstract class - abstract in XSD</p>\n", "bases": "abc.ABC, pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.EntryType.time_interval", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EntryType.time_interval", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.IntervalType"}, {"fullname": "v2gevil.messages.MsgDataTypes.EntryType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EntryType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.EntryType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EntryType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;time_interval&#x27;: FieldInfo(annotation=IntervalType, required=True, alias=&#x27;TimeInterval&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.PMaxScheduleEntryType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "PMaxScheduleEntryType", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.2/usage/models/\">https://docs.pydantic.dev/2.2/usage/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly specified during validation.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.PMaxScheduleEntryType.time_interval", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "PMaxScheduleEntryType.time_interval", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.RelativeTimeIntervalType"}, {"fullname": "v2gevil.messages.MsgDataTypes.PMaxScheduleEntryType.p_max", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "PMaxScheduleEntryType.p_max", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.PMaxScheduleEntryType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "PMaxScheduleEntryType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.PMaxScheduleEntryType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "PMaxScheduleEntryType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;time_interval&#x27;: FieldInfo(annotation=RelativeTimeIntervalType, required=True, alias=&#x27;RelativeTimeInterval&#x27;, alias_priority=2), &#x27;p_max&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;PMax&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.PMaxScheduleType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "PMaxScheduleType", "kind": "class", "doc": "<p>complexType PMaxScheduleType</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.PMaxScheduleType.p_max_schedule_entry", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "PMaxScheduleType.p_max_schedule_entry", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[v2gevil.messages.MsgDataTypes.PMaxScheduleEntryType]"}, {"fullname": "v2gevil.messages.MsgDataTypes.PMaxScheduleType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "PMaxScheduleType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.PMaxScheduleType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "PMaxScheduleType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;p_max_schedule_entry&#x27;: FieldInfo(annotation=List[PMaxScheduleEntryType], required=True, alias=&#x27;PMaxScheduleEntry&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.costKindType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "costKindType", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.messages.MsgDataTypes.costKindType.RELATIVE_PRICE_PERCENTAGE", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "costKindType.RELATIVE_PRICE_PERCENTAGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;costKindType.RELATIVE_PRICE_PERCENTAGE: &#x27;relativePricePercentage&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.costKindType.RENEWABLE_GENERATION_PERCENTAGE", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "costKindType.RENEWABLE_GENERATION_PERCENTAGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;costKindType.RENEWABLE_GENERATION_PERCENTAGE: &#x27;RenewableGenerationPercentage&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.costKindType.CARBON_DIOXIDE_EMISSIONS", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "costKindType.CARBON_DIOXIDE_EMISSIONS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;costKindType.CARBON_DIOXIDE_EMISSIONS: &#x27;CarbonDioxideEmissions&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.CostType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "CostType", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.2/usage/models/\">https://docs.pydantic.dev/2.2/usage/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly specified during validation.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.CostType.cost_kind", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "CostType.cost_kind", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.costKindType"}, {"fullname": "v2gevil.messages.MsgDataTypes.CostType.amount", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "CostType.amount", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.CostType.amount_multiplier", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "CostType.amount_multiplier", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.CostType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "CostType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.CostType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "CostType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;cost_kind&#x27;: FieldInfo(annotation=costKindType, required=True, alias=&#x27;costKind&#x27;, alias_priority=2), &#x27;amount&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;amount&#x27;, alias_priority=2), &#x27;amount_multiplier&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;amountMultiplier&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.ConsumptionCostType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ConsumptionCostType", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.2/usage/models/\">https://docs.pydantic.dev/2.2/usage/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly specified during validation.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.ConsumptionCostType.start_value", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ConsumptionCostType.start_value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.ConsumptionCostType.cost", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ConsumptionCostType.cost", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[v2gevil.messages.MsgDataTypes.CostType]"}, {"fullname": "v2gevil.messages.MsgDataTypes.ConsumptionCostType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ConsumptionCostType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.ConsumptionCostType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ConsumptionCostType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;start_value&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;startValue&#x27;, alias_priority=2), &#x27;cost&#x27;: FieldInfo(annotation=List[CostType], required=True, alias=&#x27;Cost&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.SalesTariffEntryType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SalesTariffEntryType", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.2/usage/models/\">https://docs.pydantic.dev/2.2/usage/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly specified during validation.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.SalesTariffEntryType.time_interval", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SalesTariffEntryType.time_interval", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.RelativeTimeIntervalType"}, {"fullname": "v2gevil.messages.MsgDataTypes.SalesTariffEntryType.e_price_level", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SalesTariffEntryType.e_price_level", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.SalesTariffEntryType.consumption_cost", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SalesTariffEntryType.consumption_cost", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[v2gevil.messages.MsgDataTypes.ConsumptionCostType]"}, {"fullname": "v2gevil.messages.MsgDataTypes.SalesTariffEntryType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SalesTariffEntryType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.SalesTariffEntryType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SalesTariffEntryType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;time_interval&#x27;: FieldInfo(annotation=RelativeTimeIntervalType, required=True, alias=&#x27;RelativeTimeInterval&#x27;, alias_priority=2), &#x27;e_price_level&#x27;: FieldInfo(annotation=int, required=False, alias=&#x27;EPriceLevel&#x27;, alias_priority=2), &#x27;consumption_cost&#x27;: FieldInfo(annotation=List[ConsumptionCostType], required=False, alias=&#x27;ConsumptionCost&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.SalesTariffType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SalesTariffType", "kind": "class", "doc": "<p>complexType SalesTariffType</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.SalesTariffType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SalesTariffType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;populate_by_name&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgDataTypes.SalesTariffType.id", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SalesTariffType.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgDataTypes.SalesTariffType.sales_tariff_id", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SalesTariffType.sales_tariff_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.SalesTariffType.sales_tariff_description", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SalesTariffType.sales_tariff_description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgDataTypes.SalesTariffType.num_e_price_levels", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SalesTariffType.num_e_price_levels", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.SalesTariffType.sales_tariff_entry", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SalesTariffType.sales_tariff_entry", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[v2gevil.messages.MsgDataTypes.SalesTariffEntryType]"}, {"fullname": "v2gevil.messages.MsgDataTypes.SalesTariffType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SalesTariffType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;id&#x27;: FieldInfo(annotation=str, required=True, alias_priority=2, validation_alias=&#x27;@Id&#x27;, serialization_alias=&#x27;@Id&#x27;), &#x27;sales_tariff_id&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;SalesTariffID&#x27;, alias_priority=2), &#x27;sales_tariff_description&#x27;: FieldInfo(annotation=str, required=False, alias=&#x27;SalesTariffDescription&#x27;, alias_priority=2), &#x27;num_e_price_levels&#x27;: FieldInfo(annotation=int, required=False, alias=&#x27;NumEPriceLevels&#x27;, alias_priority=2), &#x27;sales_tariff_entry&#x27;: FieldInfo(annotation=List[SalesTariffEntryType], required=True, alias=&#x27;SalesTariffEntry&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.SAScheduleTupleType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SAScheduleTupleType", "kind": "class", "doc": "<p>complexType SAScheduleTupleType</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.SAScheduleTupleType.sa_schedule_tuple_id", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SAScheduleTupleType.sa_schedule_tuple_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.SAScheduleTupleType.p_max_schedule", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SAScheduleTupleType.p_max_schedule", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PMaxScheduleType"}, {"fullname": "v2gevil.messages.MsgDataTypes.SAScheduleTupleType.sales_tafiff", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SAScheduleTupleType.sales_tafiff", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.SalesTariffType"}, {"fullname": "v2gevil.messages.MsgDataTypes.SAScheduleTupleType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SAScheduleTupleType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.SAScheduleTupleType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SAScheduleTupleType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;sa_schedule_tuple_id&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;SAScheduleTupleID&#x27;, alias_priority=2), &#x27;p_max_schedule&#x27;: FieldInfo(annotation=PMaxScheduleType, required=True, alias=&#x27;PMaxSchedule&#x27;, alias_priority=2), &#x27;sales_tafiff&#x27;: FieldInfo(annotation=SalesTariffType, required=True, alias=&#x27;SalesTariff&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.SAScheduleListType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SAScheduleListType", "kind": "class", "doc": "<p>complexType SAScheduleListType</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.SAScheduleListType.sa_schedule_tuple", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SAScheduleListType.sa_schedule_tuple", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[v2gevil.messages.MsgDataTypes.SAScheduleTupleType]"}, {"fullname": "v2gevil.messages.MsgDataTypes.SAScheduleListType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SAScheduleListType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.SAScheduleListType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "SAScheduleListType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;sa_schedule_tuple&#x27;: FieldInfo(annotation=List[SAScheduleTupleType], required=True, alias=&#x27;SAScheduleTuple&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.chargeProgressType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "chargeProgressType", "kind": "class", "doc": "<p>Enumerated values for chargeProgressType</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.messages.MsgDataTypes.chargeProgressType.START", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "chargeProgressType.START", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;chargeProgressType.START: &#x27;Start&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.chargeProgressType.STOP", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "chargeProgressType.STOP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;chargeProgressType.STOP: &#x27;Stop&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.chargeProgressType.RENEGOTIATE", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "chargeProgressType.RENEGOTIATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;chargeProgressType.RENEGOTIATE: &#x27;Renegotiate&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.ProfileEntryType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ProfileEntryType", "kind": "class", "doc": "<p>\"complexType ProfileEntryType</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.ProfileEntryType.charging_profile_entry_start", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ProfileEntryType.charging_profile_entry_start", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.ProfileEntryType.charging_profile_entry_max_power", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ProfileEntryType.charging_profile_entry_max_power", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.PhysicalValueType"}, {"fullname": "v2gevil.messages.MsgDataTypes.ProfileEntryType.charging_profile_entry_max_number_of_phases_in_use", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ProfileEntryType.charging_profile_entry_max_number_of_phases_in_use", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.ProfileEntryType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ProfileEntryType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.ProfileEntryType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ProfileEntryType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;charging_profile_entry_start&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;ChargingProfileEntryStart&#x27;, alias_priority=2), &#x27;charging_profile_entry_max_power&#x27;: FieldInfo(annotation=PhysicalValueType, required=True, alias=&#x27;ChargingProfileEntryMaxPower&#x27;, alias_priority=2), &#x27;charging_profile_entry_max_number_of_phases_in_use&#x27;: FieldInfo(annotation=int, required=False, alias=&#x27;ChargingProfileEntryMaxNumberOfPhasesInUse&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.ChargingProfileType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ChargingProfileType", "kind": "class", "doc": "<p>complexType ChargingProfileType</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.ChargingProfileType.profile_entry", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ChargingProfileType.profile_entry", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[v2gevil.messages.MsgDataTypes.ProfileEntryType]"}, {"fullname": "v2gevil.messages.MsgDataTypes.ChargingProfileType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ChargingProfileType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.ChargingProfileType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ChargingProfileType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;profile_entry&#x27;: FieldInfo(annotation=List[ProfileEntryType], required=True, alias=&#x27;ProfileEntry&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVPowerDeliveryParameterType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVPowerDeliveryParameterType", "kind": "class", "doc": "<p>complexType EVPowerDeliveryParameterType. Abstract class - abstract in XSD</p>\n", "bases": "abc.ABC, pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVPowerDeliveryParameterType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVPowerDeliveryParameterType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.EVPowerDeliveryParameterType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EVPowerDeliveryParameterType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVPowerDeliveryParameterType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVPowerDeliveryParameterType", "kind": "class", "doc": "<p>complexType DC_EVPowerDeliveryParameterType,</p>\n", "bases": "EVPowerDeliveryParameterType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVPowerDeliveryParameterType.dc_ev_status", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVPowerDeliveryParameterType.dc_ev_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.DC_EVStatusType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVPowerDeliveryParameterType.bulk_charging_complete", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVPowerDeliveryParameterType.bulk_charging_complete", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVPowerDeliveryParameterType.charging_complete", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVPowerDeliveryParameterType.charging_complete", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVPowerDeliveryParameterType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVPowerDeliveryParameterType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.DC_EVPowerDeliveryParameterType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DC_EVPowerDeliveryParameterType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;dc_ev_status&#x27;: FieldInfo(annotation=DC_EVStatusType, required=True, alias=&#x27;DC_EVStatus&#x27;, alias_priority=2), &#x27;bulk_charging_complete&#x27;: FieldInfo(annotation=bool, required=False, alias=&#x27;BulkChargingComplete&#x27;, alias_priority=2), &#x27;charging_complete&#x27;: FieldInfo(annotation=bool, required=True, alias=&#x27;ChargingComplete&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.MeterInfoType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "MeterInfoType", "kind": "class", "doc": "<p>complexType MeterInfoType</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.MeterInfoType.meter_id", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "MeterInfoType.meter_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.MeterInfoType.meter_reading", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "MeterInfoType.meter_reading", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.MeterInfoType.sig_meter_reading", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "MeterInfoType.sig_meter_reading", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgDataTypes.MeterInfoType.meter_status", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "MeterInfoType.meter_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.MeterInfoType.t_meter", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "MeterInfoType.t_meter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "v2gevil.messages.MsgDataTypes.MeterInfoType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "MeterInfoType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.MeterInfoType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "MeterInfoType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;meter_id&#x27;: FieldInfo(annotation=int, required=True, alias=&#x27;MeterID&#x27;, alias_priority=2), &#x27;meter_reading&#x27;: FieldInfo(annotation=int, required=False, alias=&#x27;MeterReading&#x27;, alias_priority=2), &#x27;sig_meter_reading&#x27;: FieldInfo(annotation=str, required=False, alias=&#x27;SigMeterReading&#x27;, alias_priority=2), &#x27;meter_status&#x27;: FieldInfo(annotation=int, required=False, alias=&#x27;MeterStatus&#x27;, alias_priority=2), &#x27;t_meter&#x27;: FieldInfo(annotation=int, required=False, alias=&#x27;TMeter&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.chargingSessionType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "chargingSessionType", "kind": "class", "doc": "<p>enumerated values for chargingSessionType</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.messages.MsgDataTypes.chargingSessionType.TERMINATE", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "chargingSessionType.TERMINATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;chargingSessionType.TERMINATE: &#x27;Terminate&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.chargingSessionType.PAUSE", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "chargingSessionType.PAUSE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;chargingSessionType.PAUSE: &#x27;Pause&#x27;&gt;"}, {"fullname": "v2gevil.messages.MsgDataTypes.ListOfRootCertificateIDsType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ListOfRootCertificateIDsType", "kind": "class", "doc": "<p>complexType ListOfRootCertificateIDsType</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.ListOfRootCertificateIDsType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ListOfRootCertificateIDsType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.ListOfRootCertificateIDsType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ListOfRootCertificateIDsType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.privateKeyType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "privateKeyType", "kind": "class", "doc": "<p>simpleType privateKeyType</p>\n", "bases": "abc.ABC, pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.privateKeyType.value", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "privateKeyType.value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgDataTypes.privateKeyType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "privateKeyType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.privateKeyType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "privateKeyType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;value&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;value&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.ContractSignatureEncryptedPrivateKeyType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ContractSignatureEncryptedPrivateKeyType", "kind": "class", "doc": "<p>is extension of privateKeyType</p>\n", "bases": "privateKeyType"}, {"fullname": "v2gevil.messages.MsgDataTypes.ContractSignatureEncryptedPrivateKeyType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ContractSignatureEncryptedPrivateKeyType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;populate_by_name&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgDataTypes.ContractSignatureEncryptedPrivateKeyType.id", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ContractSignatureEncryptedPrivateKeyType.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgDataTypes.ContractSignatureEncryptedPrivateKeyType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "ContractSignatureEncryptedPrivateKeyType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;value&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;value&#x27;, alias_priority=2), &#x27;id&#x27;: FieldInfo(annotation=str, required=True, alias_priority=2, validation_alias=&#x27;@Id&#x27;, serialization_alias=&#x27;@Id&#x27;)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.dHpublickeyType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "dHpublickeyType", "kind": "class", "doc": "<p>simpleType dHpublickeyType</p>\n", "bases": "abc.ABC, pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.dHpublickeyType.value", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "dHpublickeyType.value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgDataTypes.dHpublickeyType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "dHpublickeyType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.dHpublickeyType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "dHpublickeyType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;value&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;value&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.DiffieHellmanPublickeyType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DiffieHellmanPublickeyType", "kind": "class", "doc": "<p>is extension of dHpublickeyType</p>\n", "bases": "dHpublickeyType"}, {"fullname": "v2gevil.messages.MsgDataTypes.DiffieHellmanPublickeyType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DiffieHellmanPublickeyType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;populate_by_name&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgDataTypes.DiffieHellmanPublickeyType.id", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DiffieHellmanPublickeyType.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgDataTypes.DiffieHellmanPublickeyType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "DiffieHellmanPublickeyType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;value&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;value&#x27;, alias_priority=2), &#x27;id&#x27;: FieldInfo(annotation=str, required=True, alias_priority=2, validation_alias=&#x27;@Id&#x27;, serialization_alias=&#x27;@Id&#x27;)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.eMAIDType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "eMAIDType", "kind": "class", "doc": "<p>simpleType eMAIDType</p>\n", "bases": "abc.ABC, pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDataTypes.eMAIDType.value", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "eMAIDType.value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgDataTypes.eMAIDType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "eMAIDType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDataTypes.eMAIDType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "eMAIDType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;value&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;value&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgDataTypes.EMAIDType", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EMAIDType", "kind": "class", "doc": "<p>is extension of eMAIDType</p>\n", "bases": "eMAIDType"}, {"fullname": "v2gevil.messages.MsgDataTypes.EMAIDType.model_config", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EMAIDType.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;populate_by_name&#x27;: True}"}, {"fullname": "v2gevil.messages.MsgDataTypes.EMAIDType.id", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EMAIDType.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgDataTypes.EMAIDType.model_fields", "modulename": "v2gevil.messages.MsgDataTypes", "qualname": "EMAIDType.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;value&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;value&#x27;, alias_priority=2), &#x27;id&#x27;: FieldInfo(annotation=str, required=True, alias_priority=2, validation_alias=&#x27;@Id&#x27;, serialization_alias=&#x27;@Id&#x27;)}"}, {"fullname": "v2gevil.messages.MsgDef", "modulename": "v2gevil.messages.MsgDef", "kind": "module", "doc": "<p>Module for V2G message definition</p>\n"}, {"fullname": "v2gevil.messages.MsgDef.V2G_Message", "modulename": "v2gevil.messages.MsgDef", "qualname": "V2G_Message", "kind": "class", "doc": "<p>Base class for V2G messages.</p>\n\n<p>Attributes:\n    header: The header of the V2G message.\n    body: The body of the V2G message.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgDef.V2G_Message.header", "modulename": "v2gevil.messages.MsgDef", "qualname": "V2G_Message.header", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgHeader.Header"}, {"fullname": "v2gevil.messages.MsgDef.V2G_Message.body", "modulename": "v2gevil.messages.MsgDef", "qualname": "V2G_Message.body", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgBody.Body"}, {"fullname": "v2gevil.messages.MsgDef.V2G_Message.model_dump_with_root", "modulename": "v2gevil.messages.MsgDef", "qualname": "V2G_Message.model_dump_with_root", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.MsgDef.V2G_Message.model_config", "modulename": "v2gevil.messages.MsgDef", "qualname": "V2G_Message.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgDef.V2G_Message.model_fields", "modulename": "v2gevil.messages.MsgDef", "qualname": "V2G_Message.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;header&#x27;: FieldInfo(annotation=Header, required=True, alias=&#x27;Header&#x27;, alias_priority=2), &#x27;body&#x27;: FieldInfo(annotation=Body, required=True, alias=&#x27;Body&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.MsgHeader", "modulename": "v2gevil.messages.MsgHeader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "v2gevil.messages.MsgHeader.Header", "modulename": "v2gevil.messages.MsgHeader", "qualname": "Header", "kind": "class", "doc": "<p>Base class for V2G message header.</p>\n\n<p>Attributes:\n    session_id: The session ID of the V2G message.\n    notification: The notification of the V2G message.\n    session_info: The session info of the V2G message.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "v2gevil.messages.MsgHeader.Header.session_id", "modulename": "v2gevil.messages.MsgHeader", "qualname": "Header.session_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgHeader.Header.notification", "modulename": "v2gevil.messages.MsgHeader", "qualname": "Header.notification", "kind": "variable", "doc": "<p></p>\n", "annotation": ": v2gevil.messages.MsgDataTypes.NotificationType"}, {"fullname": "v2gevil.messages.MsgHeader.Header.signature", "modulename": "v2gevil.messages.MsgHeader", "qualname": "Header.signature", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "v2gevil.messages.MsgHeader.Header.model_config", "modulename": "v2gevil.messages.MsgHeader", "qualname": "Header.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "v2gevil.messages.MsgHeader.Header.model_fields", "modulename": "v2gevil.messages.MsgHeader", "qualname": "Header.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;session_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;SessionID&#x27;, alias_priority=2), &#x27;notification&#x27;: FieldInfo(annotation=NotificationType, required=False, alias=&#x27;Notification&#x27;, alias_priority=2), &#x27;signature&#x27;: FieldInfo(annotation=str, required=False, alias=&#x27;Signature&#x27;, alias_priority=2)}"}, {"fullname": "v2gevil.messages.generator", "modulename": "v2gevil.messages.generator", "kind": "module", "doc": "<p>This module contains the message generator for the V2G communication.</p>\n\n<p>The message generator is responsible for generating the dictionary,\nin which is name of the request message and the corresponding response message\nas key-value pair.\nThe value is a dictionary, which contains the name and value for each field\nof the response message.</p>\n"}, {"fullname": "v2gevil.messages.generator.logger", "modulename": "v2gevil.messages.generator", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.messages.generator (WARNING)&gt;"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator", "kind": "class", "doc": "<p>Message generator class for the station.\nThis class is responsible for generating the dictionaries for the\nstation.</p>\n\n<p>Differ between AC or DC charging mode. Default charging mode is AC.</p>\n"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.__init__", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">charging_mode</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">station</span><span class=\"o\">.</span><span class=\"n\">station_enums</span><span class=\"o\">.</span><span class=\"n\">EVSEChargingMode</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">EVSEChargingMode</span><span class=\"o\">.</span><span class=\"n\">AC</span><span class=\"p\">:</span> <span class=\"s1\">&#39;AC&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">override_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.charging_mode", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.charging_mode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.default_dict", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.default_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.add_model_to_dict", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.add_model_to_dict", "kind": "function", "doc": "<p>Add model_dump to dictionary.\nKey is the name of the class of the model object.\nValue is the model_dump of the model object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dictionary</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">model_obj</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">BodyBaseType</span><span class=\"p\">,</span> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">AppProtocol</span><span class=\"o\">.</span><span class=\"n\">supportedAppProtocolRes</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.load_default_dict", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.load_default_dict", "kind": "function", "doc": "<p>Load default dictionary from file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">station</span><span class=\"o\">.</span><span class=\"n\">station_enums</span><span class=\"o\">.</span><span class=\"n\">EVSEDefaultDictPaths</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.save_default_dict", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.save_default_dict", "kind": "function", "doc": "<p>Save default dictionary to file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">station</span><span class=\"o\">.</span><span class=\"n\">station_enums</span><span class=\"o\">.</span><span class=\"n\">EVSEDefaultDictPaths</span>,</span><span class=\"param\">\t<span class=\"n\">dictionary</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.generate_default_dict_AC", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.generate_default_dict_AC", "kind": "function", "doc": "<p>Generate default dictionary for AC charging mode.</p>\n\n<p>Generated dictionary is also saved to file            if not exists or if override_flag is True.</p>\n\n<p>Args:\n    override_flag (bool, optional): If True, existing file will be overriden.                Defaults to False.</p>\n\n<p>Returns:\n    Generated dictionary for AC charging mode.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">override_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.generate_default_dict_DC", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.generate_default_dict_DC", "kind": "function", "doc": "<p>Generate default dictionary for DC charging mode.</p>\n\n<p>Generated dictionory is also saved to file            if not exists or if override_flag is True.</p>\n\n<p>Args:\n    override_flag (bool, optional): If True, existing file will be overriden.                Defaults to False.</p>\n\n<p>Returns:\n    Generated dictionary for DC charging mode.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">override_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.generate_default_dict", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.generate_default_dict", "kind": "function", "doc": "<p>Generate default dictionary for all messages.</p>\n\n<p>Save generated default dictionary into the file            if not exists or if override_flag is True</p>\n\n<p>Args:\n    override_flag (bool, optional): If True, existing file will be overriden.                Defaults to False.</p>\n\n<p>Returns:\n    Generated dictionary for AC or DC charging mode, based on the                charging mode of the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">override_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_default_supportedAppProtocolRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_default_supportedAppProtocolRes", "kind": "function", "doc": "<p>Generate default supportedAppProtocolRes message.</p>\n\n<p>This method will generate the default response message for the\nsupportedAppProtocolReq message.\nThis message is generated the same way for both charging modes.</p>\n\n<p>For this message is charging mode irrelevant, parameters and values        does not depend on the charging mode.</p>\n\n<p>Note: This default message covers all fields of the message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">AppProtocol</span><span class=\"o\">.</span><span class=\"n\">supportedAppProtocolRes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_default_SessionSetupRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_default_SessionSetupRes", "kind": "function", "doc": "<p>Generate default SessionSetupRes message.</p>\n\n<p>This method will generate the default response message for the\nSessionSetupReq message.\nThis message is generated the same way for both charging modes.</p>\n\n<p>For this message is charging mode irrelevant, parameters and values        does not depend on the charging mode.</p>\n\n<p>Note: This default message covers all fields of the message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">SessionSetupRes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_default_ServiceDiscoveryRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_default_ServiceDiscoveryRes", "kind": "function", "doc": "<p>Generate default ServiceDiscoveryRes message.</p>\n\n<p>This method will generate the default response message for the\nServiceDiscoveryReq message.</p>\n\n<p>This message is generated the same way for both charging modes.</p>\n\n<p>Notes: For now this message is generated for AC and DC in the same way.            All supported charging services as defined by SupportedEnergyTransferMode.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">ServiceDiscoveryRes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_default_ServiceDetailRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_default_ServiceDetailRes", "kind": "function", "doc": "<p>Generate default ServiceDetailRes message.</p>\n\n<p>This method will generate the default response message for the\nServiceDetailReq message.\nThis message is generated the same way for both charging modes.</p>\n\n<p>For this message is charging mode irrelevant, parameters and values        does not depend on the charging mode.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">ServiceDetailRes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_default_PaymentServiceSelectionRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_default_PaymentServiceSelectionRes", "kind": "function", "doc": "<p>Generate default PaymentServiceSelectionRes message.</p>\n\n<p>This method will generate the default response message for the\nPaymentServiceSelectionReq message.\nThis message is generated the same way for both charging modes.</p>\n\n<p>For this message is charging mode irrelevant, parameters and values        does not depend on the charging mode.</p>\n\n<p>Note: This default message covers all fields of the message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">PaymentServiceSelectionRes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_default_PaymentDetailsRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_default_PaymentDetailsRes", "kind": "function", "doc": "<p>Generate default PaymentDetailsRes message.</p>\n\n<p>This method will generate the default response message for the\nPaymentDetailsReq message.\nThis message is generated the same way for both charging modes.</p>\n\n<p>For this message is charging mode irrelevant, parameters and values        does not depend on the charging mode.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">PaymentDetailsRes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_default_AuthorizationRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_default_AuthorizationRes", "kind": "function", "doc": "<p>Generate default AuthorizationRes message.</p>\n\n<p>This method will generate the default response message for the\nAuthorizationReq message.\nThis message is generated the same way for both charging modes.</p>\n\n<p>For this message is charging mode irrelevant, parameters and values        does not depend on the charging mode.</p>\n\n<p>Note: This default message covers all fields of the message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">AuthorizationRes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_default_ChargeParameterDiscoveryRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_default_ChargeParameterDiscoveryRes", "kind": "function", "doc": "<p>Generate default ChargeParameterDiscoveryRes message.</p>\n\n<p>This method will generate the default response message for the\nChargeParameterDiscoveryReq message. Used parameters and values are based on\ncharging mode value.\nThis message can be generated for AC or DC charging mode.</p>\n\n<p>Args:\n    charging_mode (EVSEChargingMode, optional): Charging mode indicator,                depending on the charging mode, parameters and values                may differ in the generated message.                Defaults to None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">charging_mode</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">station</span><span class=\"o\">.</span><span class=\"n\">station_enums</span><span class=\"o\">.</span><span class=\"n\">EVSEChargingMode</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">ChargeParameterDiscoveryRes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_default_PowerDeliveryRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_default_PowerDeliveryRes", "kind": "function", "doc": "<p>Generate default PowerDeliveryRes message.</p>\n\n<p>This method will generate the default response message for the\nPowerDeliveryReq message. Used parameters and values are based on\ncharging mode value.\nThis message can be generated for AC or DC charging mode.</p>\n\n<p>Args:\n    charging_mode (EVSEChargingMode, optional): Charging mode indicator,                depending on the charging mode, parameters and values                may differ in the generated message.                Defaults to EVSEChargingMode.AC.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">charging_mode</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">station</span><span class=\"o\">.</span><span class=\"n\">station_enums</span><span class=\"o\">.</span><span class=\"n\">EVSEChargingMode</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">PowerDeliveryRes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_default_MeteringReceiptRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_default_MeteringReceiptRes", "kind": "function", "doc": "<p>Generate default MeteringReceiptRes message.</p>\n\n<p>This method will generate the default response message for the\nMeteringReceiptReq message. Used parameters and values are based on\ncharging mode value.\nThis message can be generated for AC or DC charging mode.</p>\n\n<p>Args:\n    charging_mode (EVSEChargingMode, optional): Charging mode indicator,                depending on the charging mode, parameters and values                may differ in the generated message.                Defaults to EVSEChargingMode.AC.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">charging_mode</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">station</span><span class=\"o\">.</span><span class=\"n\">station_enums</span><span class=\"o\">.</span><span class=\"n\">EVSEChargingMode</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">MeteringReceiptRes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_default_SessionStopRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_default_SessionStopRes", "kind": "function", "doc": "<p>Generate default SessionStopRes message.</p>\n\n<p>This method will generate the default response message for the\nSessionStopReq message.\nThis message is generated the same way for both charging modes.</p>\n\n<p>For this message is charging mode irrelevant, parameters and values        does not depend on the charging mode.</p>\n\n<p>Note: This default message covers all fields of the message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">SessionStopRes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_default_CertificateUpdateRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_default_CertificateUpdateRes", "kind": "function", "doc": "<p>Generate default CertificateUpdateRes message.</p>\n\n<p>This method will generate the default response message for the\nCertificateUpdateReq message.\nThis message is generated the same way for both charging modes.</p>\n\n<p>For this message is charging mode irrelevant, parameters and values        does not depend on the charging mode.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">CertificateUpdateRes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_default_CertificateInstallationRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_default_CertificateInstallationRes", "kind": "function", "doc": "<p>Generate default CertificateInstallationRes message.</p>\n\n<p>This method will generate the default response message for the\nCertificateInstallationReq message.\nThis message is generated the same way for both charging modes.</p>\n\n<p>For this message is charging mode irrelevant, parameters and values        does not depend on the charging mode.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">CertificateInstallationRes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_default_ChargingStatusRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_default_ChargingStatusRes", "kind": "function", "doc": "<p>Generate default ChargingStatusRes message.</p>\n\n<p>This method will generate the default response message for the\nChargingStatusReq message.\nThis message can be generated only for AC charging mode.</p>\n\n<p>For this message is charging mode irrelevant, it has to be only AC.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">ChargingStatusRes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_default_CableCheckRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_default_CableCheckRes", "kind": "function", "doc": "<p>Generate default CableCheckRes message.</p>\n\n<p>This method will generate the default response message for the\nCableCheckReq message.\nThis message can be generated only for DC charging mode.</p>\n\n<p>For this message is charging mode irrelevant, it has to be DC.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">CableCheckRes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_default_PreChargeRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_default_PreChargeRes", "kind": "function", "doc": "<p>Generate default PreChargeRes message.</p>\n\n<p>This method will generate the default response message for the\nPreChargeReq message.\nThis message can be generated only for DC charging mode.</p>\n\n<p>For this message is charging mode irrelevant, it has to be DC.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">PreChargeRes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_default_CurrentDemandRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_default_CurrentDemandRes", "kind": "function", "doc": "<p>Generate default CurrentDemandRes message.</p>\n\n<p>This method will generate the default response message for the\nCurrentDemandReq message.\nThis message can be generated only for DC charging mode.</p>\n\n<p>For this message is charging mode irrelevant, it has to be DC.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">CurrentDemandRes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_default_WeldingDetectionRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_default_WeldingDetectionRes", "kind": "function", "doc": "<p>Generate default WeldingDetectionRes message.</p>\n\n<p>This method will generate the default response message for the\nWeldingDetectionReq message.\nThis message can be generated only for DC charging mode.</p>\n\n<p>For this message is charging mode irrelevant, it has to be DC.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">WeldingDetectionRes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_supportedAppProtocolRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_supportedAppProtocolRes", "kind": "function", "doc": "<p>Generate supportedAppProtocolRes message.</p>\n\n<p>This method will generate the response message for the\nsupportedAppProtocolReq message.</p>\n\n<p>Args:\n    req_msg (Union[supportedAppProtocolReq, None], optional): [description]. Defaults to None.\n    config (dict):</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">req_msg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">AppProtocol</span><span class=\"o\">.</span><span class=\"n\">supportedAppProtocolReq</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_SessionSetupRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_SessionSetupRes", "kind": "function", "doc": "<p>Generate SessionSetupRes message.</p>\n\n<p>This method will generate the response message for the\nSessionSetupReq message.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">SessionSetupReq</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_ServiceDiscoveryRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_ServiceDiscoveryRes", "kind": "function", "doc": "<p>Generate ServiceDiscoveryRes message.</p>\n\n<p>This method will generate the response message for the\nServiceDiscoveryReq message.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">ServiceDiscoveryReq</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_ServiceDetailRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_ServiceDetailRes", "kind": "function", "doc": "<p>Generate ServiceDetailRes message.</p>\n\n<p>This method will generate the response message for the\nServiceDetailReq message.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">ServiceDetailReq</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_PaymentServiceSelectionRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_PaymentServiceSelectionRes", "kind": "function", "doc": "<p>Generate PaymentServiceSelectionRes message.</p>\n\n<p>This method will generate the response message for the\nPaymentServiceSelectionReq message.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">PaymentServiceSelectionReq</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_PaymentDetailsRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_PaymentDetailsRes", "kind": "function", "doc": "<p>Generate PaymentDetailsRes message.</p>\n\n<p>This method will generate the response message for the\nPaymentDetailsReq message.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">PaymentDetailsReq</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_AuthorizationRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_AuthorizationRes", "kind": "function", "doc": "<p>Generate AuthorizationRes message.</p>\n\n<p>This method will generate the response message for the\nAuthorizationReq message.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">AuthorizationReq</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_ChargeParameterDiscoveryRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_ChargeParameterDiscoveryRes", "kind": "function", "doc": "<p>Generate ChargeParameterDiscoveryRes message.</p>\n\n<p>This method will generate the response message for the\nChargeParameterDiscoveryReq message.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">ChargeParameterDiscoveryReq</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_PowerDeliveryRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_PowerDeliveryRes", "kind": "function", "doc": "<p>Generate PowerDeliveryRes message.</p>\n\n<p>This method will generate the response message for the\nPowerDeliveryReq message.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">PowerDeliveryReq</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_MeteringReceiptRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_MeteringReceiptRes", "kind": "function", "doc": "<p>Generate MeteringReceiptRes message.</p>\n\n<p>This method will generate the response message for the\nMeteringReceiptReq message.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">MeteringReceiptReq</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_SessionStopRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_SessionStopRes", "kind": "function", "doc": "<p>Generate SessionStopRes message.</p>\n\n<p>This method will generate the response message for the\nSessionStopReq message.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">SessionStopReq</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_CertificateUpdateRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_CertificateUpdateRes", "kind": "function", "doc": "<p>Generate CertificateUpdateRes message.</p>\n\n<p>This method will generate the response message for the\nCertificateUpdateReq message.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">CertificateUpdateReq</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_CertificateInstallationRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_CertificateInstallationRes", "kind": "function", "doc": "<p>Generate CertificateInstallationRes message.</p>\n\n<p>This method will generate the response message for the\nCertificateInstallationReq message.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">CertificateInstallationReq</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_ChargingStatusRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_ChargingStatusRes", "kind": "function", "doc": "<p>Generate ChargingStatusRes message.</p>\n\n<p>This method will generate the response message for the\nChargingStatusReq message.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">ChargingStatusReq</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_CableCheckRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_CableCheckRes", "kind": "function", "doc": "<p>Generate CableCheckRes message.</p>\n\n<p>This method will generate the response message for the\nCableCheckReq message.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">CableCheckReq</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_PreChargeRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_PreChargeRes", "kind": "function", "doc": "<p>Generate PreChargeRes message.</p>\n\n<p>This method will generate the response message for the\nPreChargeReq message.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">PreChargeReq</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_CurrentDemandRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_CurrentDemandRes", "kind": "function", "doc": "<p>Generate CurrentDemandRes message.</p>\n\n<p>This method will generate the response message for the\nCurrentDemandReq message.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">CurrentDemandReq</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVSEMessageGenerator.gen_WeldingDetectionRes", "modulename": "v2gevil.messages.generator", "qualname": "EVSEMessageGenerator.gen_WeldingDetectionRes", "kind": "function", "doc": "<p>Generate WeldingDetectionRes message.</p>\n\n<p>This method will generate the response message for the\nWeldingDetectionReq message.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgBody</span><span class=\"o\">.</span><span class=\"n\">WeldingDetectionReq</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.generator.EVMessageGenerator", "modulename": "v2gevil.messages.generator", "qualname": "EVMessageGenerator", "kind": "class", "doc": "<p>Message generator class for EV(car).</p>\n\n<p>This class is responsible for generating the dictionaries for the\ncar.</p>\n\n<p>This class is not implemented yet, because the focus of the thesis\nis to test EV, so the message generator for the EV is not needed.</p>\n"}, {"fullname": "v2gevil.messages.generator.EVMessageGenerator.default_dict", "modulename": "v2gevil.messages.generator", "qualname": "EVMessageGenerator.default_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.messages.messages", "modulename": "v2gevil.messages.messages", "kind": "module", "doc": "<p>This module contains functions for converting between XML and class instances.</p>\n"}, {"fullname": "v2gevil.messages.messages.logger", "modulename": "v2gevil.messages.messages", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.messages.messages (WARNING)&gt;"}, {"fullname": "v2gevil.messages.messages.xml2class_instance", "modulename": "v2gevil.messages.messages", "qualname": "xml2class_instance", "kind": "function", "doc": "<p>Converts XML to a class instance.</p>\n\n<p>Args:\n    xml (str): XML string to convert.</p>\n\n<p>Returns:\n    class: Class instance.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">xml</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MsgDef</span><span class=\"o\">.</span><span class=\"n\">V2G_Message</span><span class=\"p\">,</span> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">AppProtocol</span><span class=\"o\">.</span><span class=\"n\">supportedAppProtocolReq</span><span class=\"p\">,</span> <span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">AppProtocol</span><span class=\"o\">.</span><span class=\"n\">supportedAppProtocolRes</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.messages.class_instance2xml", "modulename": "v2gevil.messages.messages", "qualname": "class_instance2xml", "kind": "function", "doc": "<p>Converts class instance of\n    V2G_Message or supportedAppProtocolReq/Res to XML.</p>\n\n<p>Args:\n    class_instance (class): Class instance to convert.</p>\n\n<p>Returns:\n    str: XML string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"nb\">object</span>, </span><span class=\"param\"><span class=\"n\">validate_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.messages.add_namespaces_to_keys", "modulename": "v2gevil.messages.messages", "qualname": "add_namespaces_to_keys", "kind": "function", "doc": "<p>Adds namespaces to keys of the dictionary.</p>\n\n<p>Args:\n    data (dict): Dictionary to add namespaces to.</p>\n\n<p>Returns:\n    dict: Dictionary with namespaces.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.messages.add_namespaces", "modulename": "v2gevil.messages.messages", "qualname": "add_namespaces", "kind": "function", "doc": "<p>Adds namespaces to keys of the dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">namespace_map</span>, </span><span class=\"param\"><span class=\"n\">parent_namespace</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.messages.xml2exi", "modulename": "v2gevil.messages.messages", "qualname": "xml2exi", "kind": "function", "doc": "<p>Converts XML to EXI.</p>\n\n<p>Args:\n    xml (str): XML string to convert.</p>\n\n<p>Returns:\n    str: EXI string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xml</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.messages.namespace_map", "modulename": "v2gevil.messages.namespace_map", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "v2gevil.messages.namespace_map.namespace_map", "modulename": "v2gevil.messages.namespace_map", "qualname": "namespace_map", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;v2gci_d&#x27;: [&#x27;V2G_Message&#x27;, &#x27;Header&#x27;, &#x27;Body&#x27;], &#x27;v2gci_h&#x27;: [&#x27;SessionID&#x27;, &#x27;Notification&#x27;], &#x27;v2gci_b&#x27;: [&#x27;AuthorizationReq&#x27;, &#x27;AuthorizationRes&#x27;, &#x27;CableCheckReq&#x27;, &#x27;CableCheckRes&#x27;, &#x27;CertificateInstallationReq&#x27;, &#x27;CertificateInstallationRes&#x27;, &#x27;CertificateUpdateReq&#x27;, &#x27;CertificateUpdateRes&#x27;, &#x27;ChargeParameterDiscoveryReq&#x27;, &#x27;ChargeParameterDiscoveryRes&#x27;, &#x27;ChargingStatusReq&#x27;, &#x27;ChargingStatusRes&#x27;, &#x27;CurrentDemandReq&#x27;, &#x27;CurrentDemandRes&#x27;, &#x27;MeteringReceiptReq&#x27;, &#x27;MeteringReceiptRes&#x27;, &#x27;PaymentDetailsReq&#x27;, &#x27;PaymentDetailsRes&#x27;, &#x27;PaymentServiceSelectionReq&#x27;, &#x27;PaymentServiceSelectionRes&#x27;, &#x27;PowerDeliveryReq&#x27;, &#x27;PowerDeliveryRes&#x27;, &#x27;PreChargeReq&#x27;, &#x27;PreChargeRes&#x27;, &#x27;ServiceDetailReq&#x27;, &#x27;ServiceDetailRes&#x27;, &#x27;ServiceDiscoveryReq&#x27;, &#x27;ServiceDiscoveryRes&#x27;, &#x27;SessionSetupReq&#x27;, &#x27;SessionSetupRes&#x27;, &#x27;SessionStopReq&#x27;, &#x27;SessionStopRes&#x27;, &#x27;WeldingDetectionReq&#x27;, &#x27;WeldingDetectionRes&#x27;, &#x27;ResponseCode&#x27;, &#x27;GenChallenge&#x27;, &#x27;EVSEProcessing&#x27;, &#x27;OEMProvisioningCert&#x27;, &#x27;ListOfRootCertificateIDs&#x27;, &#x27;SAProvisioningCertificateChain&#x27;, &#x27;ContractSignatureCertChain&#x27;, &#x27;ContractSignatureEncryptedPrivateKey&#x27;, &#x27;DHpublickey&#x27;, &#x27;eMAID&#x27;, &#x27;RequestedEnergyTransferMode&#x27;, &#x27;EVSEID&#x27;, &#x27;MeterInfo&#x27;, &#x27;EVTargetCurrent&#x27;, &#x27;RemainingTimeToFullSoC&#x27;, &#x27;RemainingTimeToBulkSoC&#x27;, &#x27;EVTargetVoltage&#x27;, &#x27;EVSEPresentVoltage&#x27;, &#x27;EVSEPresentCurrent&#x27;, &#x27;SelectedPaymentOption&#x27;, &#x27;SelectedServiceList&#x27;, &#x27;ChargeProgress&#x27;, &#x27;ChargingProfile&#x27;, &#x27;ServiceParameterList&#x27;, &#x27;PaymentOptionList&#x27;, &#x27;ChargeService&#x27;, &#x27;ServiceList&#x27;, &#x27;EVCCID&#x27;, &#x27;ChargingSession&#x27;, &#x27;EVMaximumVoltageLimit&#x27;, &#x27;EVSECurrentLimitAchieved&#x27;, &#x27;ServiceID&#x27;, &#x27;EVSEVoltageLimitAchieved&#x27;, &#x27;EVSEMaxCurrent&#x27;, &#x27;SAScheduleTupleID&#x27;, &#x27;EVSEPowerLimitAchieved&#x27;, &#x27;EVSETimeStamp&#x27;, &#x27;ChargingComplete&#x27;, &#x27;EVSEMaximumCurrentLimit&#x27;, &#x27;ServiceScope&#x27;, &#x27;MaxEntriesSAScheduleTuple&#x27;, &#x27;EVSEMaximumVoltageLimit&#x27;, &#x27;EVSEMaximumPowerLimit&#x27;, &#x27;DC_EVSEStatus&#x27;, &#x27;ServiceCategory&#x27;, &#x27;AC_EVSEStatus&#x27;, &#x27;BulkChargingComplete&#x27;, &#x27;SessionID&#x27;, &#x27;ReceiptRequired&#x27;, &#x27;EVMaximumPowerLimit&#x27;, &#x27;EVMaximumCurrentLimit&#x27;, &#x27;DC_EVStatus&#x27;, &#x27;RetryCounter&#x27;], &#x27;v2gci_t&#x27;: [&#x27;DC_EVStatus&#x27;, &#x27;DC_EVSEStatus&#x27;, &#x27;EVChargeParameter&#x27;, &#x27;SASchedules&#x27;, &#x27;EVSEChargeParameter&#x27;, &#x27;SAScheduleTupleID&#x27;, &#x27;EVSEMaxCurrent&#x27;, &#x27;AC_EVSEStatus&#x27;, &#x27;EVMaximumVoltageLimit&#x27;, &#x27;EVMaximumCurrentLimit&#x27;, &#x27;EVMaximumPowerLimit&#x27;, &#x27;EVSEMaximumVoltageLimit&#x27;, &#x27;EVSEMaximumCurrentLimit&#x27;, &#x27;EVSEMaximumPowerLimit&#x27;, &#x27;EVSEStatus&#x27;, &#x27;EVPowerDeliveryParameter&#x27;, &#x27;ServiceID&#x27;, &#x27;ServiceScope&#x27;, &#x27;ServiceCategory&#x27;, &#x27;physicalValue&#x27;, &#x27;SigMeterReading&#x27;, &#x27;Parameter&#x27;, &#x27;RCD&#x27;, &#x27;ChargingProfileEntryMaxPower&#x27;, &#x27;FreeService&#x27;, &#x27;MeterReading&#x27;, &#x27;EVErrorCode&#x27;, &#x27;ParameterSetID&#x27;, &#x27;MeterStatus&#x27;, &#x27;SelectedService&#x27;, &#x27;EVSENotification&#x27;, &#x27;ChargingProfileEntryMaxNumberOfPhasesInUse&#x27;, &#x27;intValue&#x27;, &#x27;EVRESSSOC&#x27;, &#x27;ParameterSet&#x27;, &#x27;ProfileEntry&#x27;, &#x27;Multiplier&#x27;, &#x27;byteValue&#x27;, &#x27;stringValue&#x27;, &#x27;SupportedEnergyTransferMode&#x27;, &#x27;EVSEStatusCode&#x27;, &#x27;boolValue&#x27;, &#x27;ServiceName&#x27;, &#x27;PaymentOption&#x27;, &#x27;shortValue&#x27;, &#x27;ChargingProfileEntryStart&#x27;, &#x27;EnergyTransferMode&#x27;, &#x27;EVReady&#x27;, &#x27;Value&#x27;, &#x27;SubCertificates&#x27;, &#x27;Service&#x27;, &#x27;Certificate&#x27;, &#x27;MeterID&#x27;, &#x27;RootCertificateID&#x27;, &#x27;TMeter&#x27;, &#x27;NotificationMaxDelay&#x27;, &#x27;Unit&#x27;, &#x27;EVSEIsolationStatus&#x27;, &#x27;Entry&#x27;, &#x27;EVStatus&#x27;, &#x27;PMaxSchedule&#x27;, &#x27;TimeInterval&#x27;, &#x27;EVEnergyCapacity&#x27;, &#x27;EVMinCurrent&#x27;, &#x27;AC_EVChargeParameter&#x27;, &#x27;start&#x27;, &#x27;DC_EVChargeParameter&#x27;, &#x27;AC_EVSEChargeParameter&#x27;, &#x27;BulkChargingComplete&#x27;, &#x27;FullSOC&#x27;, &#x27;DepartureTime&#x27;, &#x27;duration&#x27;, &#x27;ChargingComplete&#x27;, &#x27;SalesTariff&#x27;, &#x27;NumEPriceLevels&#x27;, &#x27;EVSEEnergyToBeDelivered&#x27;, &#x27;SalesTariffID&#x27;, &#x27;EAmount&#x27;, &#x27;RelativeTimeInterval&#x27;, &#x27;EVSENominalVoltage&#x27;, &#x27;EVSEMinimumCurrentLimit&#x27;, &#x27;EVSECurrentRegulationTolerance&#x27;, &#x27;DC_EVSEChargeParameter&#x27;, &#x27;SalesTariffEntry&#x27;, &#x27;SAScheduleTuple&#x27;, &#x27;EVSEPeakCurrentRipple&#x27;, &#x27;EVMaxCurrent&#x27;, &#x27;BulkSOC&#x27;, &#x27;EVMaxVoltage&#x27;, &#x27;EVEnergyRequest&#x27;, &#x27;DC_EVPowerDeliveryParameter&#x27;, &#x27;PMaxScheduleEntry&#x27;, &#x27;EVSEMinimumVoltageLimit&#x27;, &#x27;SAScheduleList&#x27;, &#x27;SalesTariffDescription&#x27;], &#x27;xmlsig&#x27;: [&#x27;Signature&#x27;, &#x27;SignedInfo&#x27;, &#x27;CanonicalizationMethod&#x27;, &#x27;SignatureMethod&#x27;, &#x27;Reference&#x27;, &#x27;Transforms&#x27;, &#x27;Transform&#x27;, &#x27;DigestMethod&#x27;, &#x27;DigestValue&#x27;, &#x27;SignatureValue&#x27;]}"}, {"fullname": "v2gevil.messages.xmldsig-core-schema", "modulename": "v2gevil.messages.xmldsig-core-schema", "kind": "module", "doc": "<p>Module for xmlsig-core-schema messages.</p>\n\n<p>I will use xmlsec library or xmlsig library for signing and verifying the messages.</p>\n"}, {"fullname": "v2gevil.schemas", "modulename": "v2gevil.schemas", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "v2gevil.sender", "modulename": "v2gevil.sender", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "v2gevil.sender.sender", "modulename": "v2gevil.sender.sender", "kind": "module", "doc": "<p>This module is not used yet. It will be used for sending messages to EVCC/SECC</p>\n\n<p>It will probably required lower layer implementation like data link layer.</p>\n"}, {"fullname": "v2gevil.sender.sender.send_v2gtp_exi_msg", "modulename": "v2gevil.sender.sender", "qualname": "send_v2gtp_exi_msg", "kind": "function", "doc": "<p>Method for sending EXI message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.sender.sender.send_v2gtp_secc_msg", "modulename": "v2gevil.sender.sender", "qualname": "send_v2gtp_secc_msg", "kind": "function", "doc": "<p>Method for sending SECC message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.sender.sender.send_v2gtp_secc_request_msg", "modulename": "v2gevil.sender.sender", "qualname": "send_v2gtp_secc_request_msg", "kind": "function", "doc": "<p>Method for sending SECC Discovery Protocol Request message</p>\n\n<p>SDP client use this protocol to discover SECCs in the network.\nSend SECC discovery request message to server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.sender.sender.send_v2gtp_secc_response_msg", "modulename": "v2gevil.sender.sender", "qualname": "send_v2gtp_secc_response_msg", "kind": "function", "doc": "<p>Method for sending SECC Discovery Protocol Response message</p>\n\n<p>SDP server use this protocol to respond to SDP client's request.\nSend SECC discovery response message to client.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.sender.sender.send_icmpv6", "modulename": "v2gevil.sender.sender", "qualname": "send_icmpv6", "kind": "function", "doc": "<p>Method for sending ICMPv6 message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.sniffer", "modulename": "v2gevil.sniffer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "v2gevil.sniffer.sniffer", "modulename": "v2gevil.sniffer.sniffer", "kind": "module", "doc": "<p>Module for sniffing packets.</p>\n\n<p>This module is used for sniffing packets.\nIt can sniff packets live on interface or analyze pcap file.</p>\n"}, {"fullname": "v2gevil.sniffer.sniffer.logger", "modulename": "v2gevil.sniffer.sniffer", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.sniffer.sniffer (WARNING)&gt;"}, {"fullname": "v2gevil.sniffer.sniffer.pyshark_sniff", "modulename": "v2gevil.sniffer.sniffer", "qualname": "pyshark_sniff", "kind": "function", "doc": "<p>Sniff packets using pyshark.</p>\n\n<p>It will be implemented in future, because I will need to check if pyshark\nis faster / more reliable than scapy for sniffing packets.\nIt's also handy because it's wrapper around tshark, so i can use dissectors\nfrom wireshark. I already use one dissector from wireshark for V2GTP packets.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.sniffer.sniffer.sniff", "modulename": "v2gevil.sniffer.sniffer", "qualname": "sniff", "kind": "function", "doc": "<p>Sniff packets live or from pcap file</p>\n\n<p>Only one of live or pcap can be True, not both at the same time.\nWill call live_sniff or analyze method based on live or pcap flag.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">live</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ipv6</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">v2gtp_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">decode_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.sniffer.sniffer.analyze", "modulename": "v2gevil.sniffer.sniffer", "qualname": "analyze", "kind": "function", "doc": "<p>Analyze packets from pcap file\nArgs:\n    file: pcap file to analyze\n    ipv6: True if only IPv6 packets should be analyzed\n    print_summary: True if only summary of packets should be printed\n    v2gtp_flag: True if only V2GTP packets should be analyzed\n    decode: True if V2GTP packets should be decoded</p>\n\n<p>Returns:\n    Depending on print_summary flag, it will return None or filtered packets</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ipv6</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">print_summary</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">v2gtp_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">decode_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.sniffer.sniffer.live_sniff", "modulename": "v2gevil.sniffer.sniffer", "qualname": "live_sniff", "kind": "function", "doc": "<p>Sniff packets live on interface</p>\n\n<p>Args:\n    interface: Interface to sniff on\n    ipv6: True if only IPv6 packets should be sniffed\n    v2gtp_flag: True if only V2GTP packets should be sniffed\n    decode: True if V2GTP packets should be decoded</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">ipv6</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>, </span><span class=\"param\"><span class=\"n\">v2gtp_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>, </span><span class=\"param\"><span class=\"n\">decode_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.sniffer.sniffer.inspect", "modulename": "v2gevil.sniffer.sniffer", "qualname": "inspect", "kind": "function", "doc": "<p>Method for inspecting one packet with given number of the packet.</p>\n\n<p>Method will inspect packet with given number from pcap file.\nIt will show only given part of packet, depending on show flag.\nIf decode flag is True and show flag is \"raw\",\nthen it will try to decode packet as V2GTP packet.</p>\n\n<p>Args:\n    file: pcap file from which to inspect packet\n    packet_num: Number of packet to inspect\n    show: Show only given part of packet\n        - all: Show all layers of packet\n        - raw: Show only Raw layer of packet\n            - If decode is True, then it will try to decode packet as V2GTP packet\n        - ipv6: Show only IPv6 layer of packet\n        - tcp: Show only TCP layer of packet\n    decode: Try to decode packet as V2GTP packet.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">packet_num</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">decode_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.station", "modulename": "v2gevil.station", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "v2gevil.station.station", "modulename": "v2gevil.station.station", "kind": "module", "doc": "<p>Module for station implementation.</p>\n"}, {"fullname": "v2gevil.station.station.logger", "modulename": "v2gevil.station.station", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.station.station (WARNING)&gt;"}, {"fullname": "v2gevil.station.station.ServerManager", "modulename": "v2gevil.station.station", "qualname": "ServerManager", "kind": "class", "doc": "<p>Class for managing the servers</p>\n\n<p>Class for managing the servers (SDP, TCP, TLS)</p>\n\n<p>Attributes:\n    interface: Interface of the station\n    ipv6_address: IPv6 address of the station, link-local address\n    protocol: Protocol to use for V2GTP communication, TCP or UDP\n    sdp_port: Port for SDP server\n    tcp_port: Port for TCP server\n    tls_flag: Flag for TLS communication\n    accept_security: Flag for accepting security from EVCC\n    udp_stop_flag: Flag for stopping SDP server\n    tcp_continue_flag: Flag for continuing TCP server\n    tcp_connection: TCP connection, used by V2GTP communication handler</p>\n"}, {"fullname": "v2gevil.station.station.ServerManager.__init__", "modulename": "v2gevil.station.station", "qualname": "ServerManager.__init__", "kind": "function", "doc": "<p>Initialize Server Manager.</p>\n\n<p>Args:\n    interface: Interface of the station\n    ipv6_address: IPv6 address of the station, link-local address\n    protocol: Protocol to use for V2GTP communication, TCP or UDP\n    sdp_port: Port for SDP server\n    tcp_port: Port for TCP server\n    tls_flag: Flag for TLS communication\n    accept_security: Flag for accepting security from EVCC\n    charging_mode: Charging mode of the station, AC or DC. Default AC.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;eth_station&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ipv6_address</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fe80::d237:45ff:fe88:b12b&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">protocol</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;</span><span class=\"se\">\\x00</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sdp_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">15118</span>,</span><span class=\"param\">\t<span class=\"n\">tcp_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">59062</span>,</span><span class=\"param\">\t<span class=\"n\">tls_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">accept_security</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">charging_mode</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">station</span><span class=\"o\">.</span><span class=\"n\">station_enums</span><span class=\"o\">.</span><span class=\"n\">EVSEChargingMode</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">EVSEChargingMode</span><span class=\"o\">.</span><span class=\"n\">AC</span><span class=\"p\">:</span> <span class=\"s1\">&#39;AC&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">ev_enumerator</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">enumerator</span><span class=\"o\">.</span><span class=\"n\">enumerator</span><span class=\"o\">.</span><span class=\"n\">EVEnumerator</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">messages_mapping_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">validate</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "v2gevil.station.station.ServerManager.interface", "modulename": "v2gevil.station.station", "qualname": "ServerManager.interface", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.station.station.ServerManager.ipv6_address", "modulename": "v2gevil.station.station", "qualname": "ServerManager.ipv6_address", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.station.station.ServerManager.protocol", "modulename": "v2gevil.station.station", "qualname": "ServerManager.protocol", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.station.station.ServerManager.tcp_port", "modulename": "v2gevil.station.station", "qualname": "ServerManager.tcp_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.station.station.ServerManager.sdp_port", "modulename": "v2gevil.station.station", "qualname": "ServerManager.sdp_port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.station.station.ServerManager.tls_flag", "modulename": "v2gevil.station.station", "qualname": "ServerManager.tls_flag", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.station.station.ServerManager.tls_version_min", "modulename": "v2gevil.station.station", "qualname": "ServerManager.tls_version_min", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.station.station.ServerManager.tls_version_max", "modulename": "v2gevil.station.station", "qualname": "ServerManager.tls_version_max", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.station.station.ServerManager.certfile_path", "modulename": "v2gevil.station.station", "qualname": "ServerManager.certfile_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.station.station.ServerManager.keyfile_path", "modulename": "v2gevil.station.station", "qualname": "ServerManager.keyfile_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.station.station.ServerManager.accept_security", "modulename": "v2gevil.station.station", "qualname": "ServerManager.accept_security", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.station.station.ServerManager.charging_mode", "modulename": "v2gevil.station.station", "qualname": "ServerManager.charging_mode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.station.station.ServerManager.ev_enumerator", "modulename": "v2gevil.station.station", "qualname": "ServerManager.ev_enumerator", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.station.station.ServerManager.messages_mapping_dict", "modulename": "v2gevil.station.station", "qualname": "ServerManager.messages_mapping_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.station.station.ServerManager.validate", "modulename": "v2gevil.station.station", "qualname": "ServerManager.validate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.station.station.ServerManager.udp_stop_flag", "modulename": "v2gevil.station.station", "qualname": "ServerManager.udp_stop_flag", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.station.station.ServerManager.tcp_continue_flag", "modulename": "v2gevil.station.station", "qualname": "ServerManager.tcp_continue_flag", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.station.station.ServerManager.tcp_connection", "modulename": "v2gevil.station.station", "qualname": "ServerManager.tcp_connection", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.station.station.ServerManager.load_messages_dict", "modulename": "v2gevil.station.station", "qualname": "ServerManager.load_messages_dict", "kind": "function", "doc": "<p>Load messages dict for request-response pairs/mapping.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.station.station.ServerManager.print_config", "modulename": "v2gevil.station.station", "qualname": "ServerManager.print_config", "kind": "function", "doc": "<p>Method for printing the configuration of the station.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.station.station.ServerManager.start", "modulename": "v2gevil.station.station", "qualname": "ServerManager.start", "kind": "function", "doc": "<p>Start station.</p>\n\n<p>To handle stop of SDP server after TCP connection is established,\nit's necessary to use asyncio.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "v2gevil.station.station.ServerManager.sdp_server", "modulename": "v2gevil.station.station", "qualname": "ServerManager.sdp_server", "kind": "function", "doc": "<p>Start SDP server.</p>\n\n<p>The SDP server is started on UDP (multicast) port 15118 (defined in ISO15118-2).\nShould accepts UDP packets with a local-link IP multicast destination address</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "v2gevil.station.station.ServerManager.tcp_server", "modulename": "v2gevil.station.station", "qualname": "ServerManager.tcp_server", "kind": "function", "doc": "<p>Run TCP server.</p>\n\n<p>Wait for connection from EVCC.\nAfter connection is established, stop the SDP server\nand wait for V2G communication session</p>\n\n<p>Based on the tls_flag, for communication is used TCP or TLS protocol.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "v2gevil.station.station.ServerManager.tls_server", "modulename": "v2gevil.station.station", "qualname": "ServerManager.tls_server", "kind": "function", "doc": "<p>Run TLS server.</p>\n\n<p>Wait for connection from EVCC.\nAfter connection is established, stop the SDP server\nand wait for V2G communication session.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">server_sock</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "v2gevil.station.station.ServerManager.v2gtp_comm_handler", "modulename": "v2gevil.station.station", "qualname": "ServerManager.v2gtp_comm_handler", "kind": "function", "doc": "<p>Handle V2GTP communication.</p>\n\n<p>After V2G communication session is established, handle V2GTP communication.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "v2gevil.station.station.load_custom_dict_from_file", "modulename": "v2gevil.station.station", "qualname": "load_custom_dict_from_file", "kind": "function", "doc": "<p>Load custom dictionary (for V2GTP request-response mapping) from file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.station.station.start_async", "modulename": "v2gevil.station.station", "qualname": "start_async", "kind": "function", "doc": "<p>Start station.</p>\n\n<p>To handle stop of SDP server after TCP connection is established,\nit's necessary to use asyncio.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;eth_station&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">accept_security</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">tls_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">charging_mode</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">station</span><span class=\"o\">.</span><span class=\"n\">station_enums</span><span class=\"o\">.</span><span class=\"n\">EVSEChargingMode</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">EVSEChargingMode</span><span class=\"o\">.</span><span class=\"n\">AC</span><span class=\"p\">:</span> <span class=\"s1\">&#39;AC&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">ev_enumerator</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">v2gevil</span><span class=\"o\">.</span><span class=\"n\">enumerator</span><span class=\"o\">.</span><span class=\"n\">enumerator</span><span class=\"o\">.</span><span class=\"n\">EVEnumerator</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">req_res_map</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">validate</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.station.station.start", "modulename": "v2gevil.station.station", "qualname": "start", "kind": "function", "doc": "<p>Start station in manual mode. There is no use of asyncio.</p>\n\n<p>This method suppose normal flow of the V2G communication.\nSequentially:\n    =&gt; SDP server is started\n    =&gt; SDP request is received\n    =&gt; SDP response is sent\n    =&gt; SDP server is stopped\n    =&gt; TCP server waits for connection\n    =&gt; TCP connection is established on request from EVCC\n    =&gt; V2G communication session is established</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;eth_station&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.station.station.sdp_server", "modulename": "v2gevil.station.station", "qualname": "sdp_server", "kind": "function", "doc": "<p>Start SDP server.</p>\n\n<p>The SDP server is started on UDP (multicast) port 15118 (defined in ISO15118-2).\nShould accepts UDP packets with a local-link IP multicast destination address</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;eth_station&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.station.station_enums", "modulename": "v2gevil.station.station_enums", "kind": "module", "doc": "<p>This module contains enums for the station module.</p>\n"}, {"fullname": "v2gevil.station.station_enums.EVSEChargingMode", "modulename": "v2gevil.station.station_enums", "qualname": "EVSEChargingMode", "kind": "class", "doc": "<p>Enum for EVSE charging type.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.station.station_enums.EVSEChargingMode.AC", "modulename": "v2gevil.station.station_enums", "qualname": "EVSEChargingMode.AC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVSEChargingMode.AC: &#x27;AC&#x27;&gt;"}, {"fullname": "v2gevil.station.station_enums.EVSEChargingMode.DC", "modulename": "v2gevil.station.station_enums", "qualname": "EVSEChargingMode.DC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVSEChargingMode.DC: &#x27;DC&#x27;&gt;"}, {"fullname": "v2gevil.station.station_enums.EVSEDetails", "modulename": "v2gevil.station.station_enums", "qualname": "EVSEDetails", "kind": "class", "doc": "<p>Enum for EVSE details.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.station.station_enums.EVSEDetails.EVSE_ID", "modulename": "v2gevil.station.station_enums", "qualname": "EVSEDetails.EVSE_ID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVSEDetails.EVSE_ID: &#x27;FRA23E45B78C&#x27;&gt;"}, {"fullname": "v2gevil.station.station_enums.EVSEDetails.SCHEMA_ID", "modulename": "v2gevil.station.station_enums", "qualname": "EVSEDetails.SCHEMA_ID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVSEDetails.SCHEMA_ID: &#x27;10&#x27;&gt;"}, {"fullname": "v2gevil.station.station_enums.EVSEDetails.PROTOCOL_NAMESPACE", "modulename": "v2gevil.station.station_enums", "qualname": "EVSEDetails.PROTOCOL_NAMESPACE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVSEDetails.PROTOCOL_NAMESPACE: &#x27;urn:iso:15118:2:2013:MsgDef&#x27;&gt;"}, {"fullname": "v2gevil.station.station_enums.EVSEDetails.INTERFACE", "modulename": "v2gevil.station.station_enums", "qualname": "EVSEDetails.INTERFACE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVSEDetails.INTERFACE: &#x27;eth_station&#x27;&gt;"}, {"fullname": "v2gevil.station.station_enums.EVSEDetails.CERT_FILE", "modulename": "v2gevil.station.station_enums", "qualname": "EVSEDetails.CERT_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVSEDetails.CERT_FILE: &#x27;certs/cpoCertChain.pem&#x27;&gt;"}, {"fullname": "v2gevil.station.station_enums.EVSEDetails.KEY_FILE", "modulename": "v2gevil.station.station_enums", "qualname": "EVSEDetails.KEY_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVSEDetails.KEY_FILE: &#x27;certs/seccLeaf.key&#x27;&gt;"}, {"fullname": "v2gevil.station.station_enums.EVSEDefaultDictPaths", "modulename": "v2gevil.station.station_enums", "qualname": "EVSEDefaultDictPaths", "kind": "class", "doc": "<p>Enum for default station dictionary filepath.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.station.station_enums.EVSEDefaultDictPaths.AC_MODE_PATH", "modulename": "v2gevil.station.station_enums", "qualname": "EVSEDefaultDictPaths.AC_MODE_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVSEDefaultDictPaths.AC_MODE_PATH: &#x27;default_dictionaries/default_dict_AC.json&#x27;&gt;"}, {"fullname": "v2gevil.station.station_enums.EVSEDefaultDictPaths.DC_MODE_PATH", "modulename": "v2gevil.station.station_enums", "qualname": "EVSEDefaultDictPaths.DC_MODE_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVSEDefaultDictPaths.DC_MODE_PATH: &#x27;default_dictionaries/default_dict_DC.json&#x27;&gt;"}, {"fullname": "v2gevil.station.station_scapy", "modulename": "v2gevil.station.station_scapy", "kind": "module", "doc": "<p>Module for station implementation.</p>\n\n<p>This implementation will be done by using Scapy library.</p>\n"}, {"fullname": "v2gevil.station.station_scapy.logger", "modulename": "v2gevil.station.station_scapy", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.station.station_scapy (WARNING)&gt;"}, {"fullname": "v2gevil.station.station_scapy.start", "modulename": "v2gevil.station.station_scapy", "qualname": "start", "kind": "function", "doc": "<p>Start car.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;eth_station&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.station.station_scapy.packet_callback", "modulename": "v2gevil.station.station_scapy", "qualname": "packet_callback", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">packet</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.station.station_scapy.start_sdp_server", "modulename": "v2gevil.station.station_scapy", "qualname": "start_sdp_server", "kind": "function", "doc": "<p>Start SDP server.</p>\n\n<p>The SDP server is started on UDP (multicast) port 15118 (defined in ISO15118-2).\nShould accepts UDP packets with a local-link IP multicast destination address</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;eth_station&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp", "modulename": "v2gevil.v2gtp", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "v2gevil.v2gtp.console_handler", "modulename": "v2gevil.v2gtp.console_handler", "kind": "module", "doc": "<p>Console handler for V2GTP</p>\n\n<p>This module contains methods for handling printing to console.\nThis is not used for now, but it will be used in future -maybe-.\nJust thinking about it, maybe it will be better to use it for printing\nto console, instead of using print in v2gtp.py.</p>\n"}, {"fullname": "v2gevil.v2gtp.console_handler.console_handler", "modulename": "v2gevil.v2gtp.console_handler", "qualname": "console_handler", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.console_handler.console_decode_handler", "modulename": "v2gevil.v2gtp.console_handler", "qualname": "console_decode_handler", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">packet_num</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.console_handler.console_extract_handler", "modulename": "v2gevil.v2gtp.console_handler", "qualname": "console_extract_handler", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp", "modulename": "v2gevil.v2gtp.v2gtp", "kind": "module", "doc": "<p>Module for V2GTP related commands.</p>\n\n<p>Here is the implementation of the V2GTP protocol,\nwhich is used for communication between EV and EVSE. \nThe implementation is based on ISO 15118-2:2014.</p>\n"}, {"fullname": "v2gevil.v2gtp.v2gtp.logger", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger v2gevil.v2gtp.v2gtp (WARNING)&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage", "kind": "class", "doc": "<p>V2GTP message class.</p>\n\n<p>Class represents V2GTP message.\nConstructor takes V2GTP message as bytes.\nContains header and payload in bytes.</p>\n"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.__init__", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.__init__", "kind": "function", "doc": "<p>Initialize V2GTP message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.message", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.header", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.header", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.payload", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.payload", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.payload_type", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.payload_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.create_message", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.create_message", "kind": "function", "doc": "<p>Create V2GTP message in bytes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>, </span><span class=\"param\"><span class=\"n\">payload_type</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.get_payload", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.get_payload", "kind": "function", "doc": "<p>Get payload.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.get_header", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.get_header", "kind": "function", "doc": "<p>Get header.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.v2gtp_exi_message", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.v2gtp_exi_message", "kind": "function", "doc": "<p>Create V2GTP EXI message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.sdp_message", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.sdp_message", "kind": "function", "doc": "<p>Create SDP message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.get_xml", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.get_xml", "kind": "function", "doc": "<p>Get XML.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.is_v2gtp_sdp_request_data", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.is_v2gtp_sdp_request_data", "kind": "function", "doc": "<p>Check if given data is V2GTP SDP request.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.is_v2gtp_sdp_response_data", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.is_v2gtp_sdp_response_data", "kind": "function", "doc": "<p>Check if given data is V2GTP SDP response.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.is_v2gtp_exi_msg_data", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.is_v2gtp_exi_msg_data", "kind": "function", "doc": "<p>Check if given data is V2GTP EXI message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.decode_v2gtp_exi_msg", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.decode_v2gtp_exi_msg", "kind": "function", "doc": "<p>Decode V2GTP EXI message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.parse_v2gtp_msg", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.parse_v2gtp_msg", "kind": "function", "doc": "<p>Parse V2GTP message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.parse_v2gtp_exi_msg", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.parse_v2gtp_exi_msg", "kind": "function", "doc": "<p>Parse V2GTP EXI message to get obj and obj_name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.parse_v2gtp_sdp_request", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.parse_v2gtp_sdp_request", "kind": "function", "doc": "<p>Parse V2GTP SDP request.</p>\n\n<p>Returns:\n    A tuple contains security byte and transport protocol byte,\n    which are received in SDP request.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.parse_v2gtp_sdp_response", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.parse_v2gtp_sdp_response", "kind": "function", "doc": "<p>Parse V2GTP SDP response.</p>\n\n<p>Returns:\n    A tuple contains server address bytes, server port bytes,\n    security byte and transport protocol byte.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.create_v2gtp_exi_msg_response", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.create_v2gtp_exi_msg_response", "kind": "function", "doc": "<p>Create V2GTP EXI message response.</p>\n\n<p>Based on the request, create response.</p>\n\n<p>Based on the enum_flag, if true return tuple of bytes of response        and name of request class. If false, return only bytes of response.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">messages_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">enum_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">validate_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"nb\">bytes</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.create_v2gtp_sdp_response", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.create_v2gtp_sdp_response", "kind": "function", "doc": "<p>Create V2GTP SDP response.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ipv6</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">V2GTPAddress</span><span class=\"o\">.</span><span class=\"n\">STATION</span><span class=\"p\">:</span> <span class=\"s1\">&#39;fe80::d237:45ff:fe88:b12b&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">15119</span>,</span><span class=\"param\">\t<span class=\"n\">protocol</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">V2GTPProtocols</span><span class=\"o\">.</span><span class=\"n\">TCP</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;</span><span class=\"se\">\\x00</span><span class=\"s1\">&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">tls_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.create_v2gtp_sdp_request", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.create_v2gtp_sdp_request", "kind": "function", "doc": "<p>Create V2GTP SDP request.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">protocol</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">V2GTPProtocols</span><span class=\"o\">.</span><span class=\"n\">TCP</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;</span><span class=\"se\">\\x00</span><span class=\"s1\">&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">tls_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.V2GTPMessage.create_response", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "V2GTPMessage.create_response", "kind": "function", "doc": "<p>Create response message.</p>\n\n<p>Based on the enum_flag, if true return tuple of bytes of response        and name of request class. If false, return only bytes of response.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ipv6</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">15119</span>,</span><span class=\"param\">\t<span class=\"n\">protocol</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">V2GTPProtocols</span><span class=\"o\">.</span><span class=\"n\">TCP</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;</span><span class=\"se\">\\x00</span><span class=\"s1\">&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">tls_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">messages_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">enum_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">validate_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"nb\">bytes</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.extract_v2gtp_pkts_from_file", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "extract_v2gtp_pkts_from_file", "kind": "function", "doc": "<p>Extract V2GTP packets from pcap file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.extract_v2gtp_pkts", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "extract_v2gtp_pkts", "kind": "function", "doc": "<p>Extract V2GTP packets</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">packets</span></span><span class=\"return-annotation\">) -> <span class=\"n\">scapy</span><span class=\"o\">.</span><span class=\"n\">plist</span><span class=\"o\">.</span><span class=\"n\">PacketList</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.has_raw_layer", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "has_raw_layer", "kind": "function", "doc": "<p>Check if packet has Raw layer. Added because check if Raw layer is in packet is used multiple times</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pkt</span><span class=\"p\">:</span> <span class=\"n\">scapy</span><span class=\"o\">.</span><span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Packet</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.has_tcp_layer", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "has_tcp_layer", "kind": "function", "doc": "<p>Check if packet has TCP layer. Added because check if TCP layer is in packet is used multiple times</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pkt</span><span class=\"p\">:</span> <span class=\"n\">scapy</span><span class=\"o\">.</span><span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Packet</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.has_ipv6_layer", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "has_ipv6_layer", "kind": "function", "doc": "<p>Check if packet has IPv6 layer. Added because check if IPv6 layer is in packet is used multiple times</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pkt</span><span class=\"p\">:</span> <span class=\"n\">scapy</span><span class=\"o\">.</span><span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Packet</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.has_v2gtp_layer", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "has_v2gtp_layer", "kind": "function", "doc": "<p>Check if packet has V2GTP layer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pkt</span><span class=\"p\">:</span> <span class=\"n\">scapy</span><span class=\"o\">.</span><span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Packet</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.is_v2gtp_exi_msg", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "is_v2gtp_exi_msg", "kind": "function", "doc": "<p>Check if payload type in header is V2GTP EXI message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pkt</span><span class=\"p\">:</span> <span class=\"n\">scapy</span><span class=\"o\">.</span><span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Packet</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.is_v2gtp_sdp_request", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "is_v2gtp_sdp_request", "kind": "function", "doc": "<p>Check if payload type in header is V2GTP SDP request.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pkt</span><span class=\"p\">:</span> <span class=\"n\">scapy</span><span class=\"o\">.</span><span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Packet</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.is_v2gtp_sdp_response", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "is_v2gtp_sdp_response", "kind": "function", "doc": "<p>Check if payload type in header is V2GTP SDP response.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pkt</span><span class=\"p\">:</span> <span class=\"n\">scapy</span><span class=\"o\">.</span><span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Packet</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.is_v2gtp_manufacturer_use", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "is_v2gtp_manufacturer_use", "kind": "function", "doc": "<p>Check if payload type in header is V2GTP Manufacturer Specific Use.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pkt</span><span class=\"p\">:</span> <span class=\"n\">scapy</span><span class=\"o\">.</span><span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Packet</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.is_v2gtp_reserved", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "is_v2gtp_reserved", "kind": "function", "doc": "<p>Check if payload type in header is V2GTP Reserved.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pkt</span><span class=\"p\">:</span> <span class=\"n\">scapy</span><span class=\"o\">.</span><span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Packet</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.check_v2gtp_payload_types", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "check_v2gtp_payload_types", "kind": "function", "doc": "<p>Check V2GTP payload type, which is defined in the V2GTP PDU header</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pkt</span><span class=\"p\">:</span> <span class=\"n\">scapy</span><span class=\"o\">.</span><span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Packet</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.parse_v2gtp_pkt", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "parse_v2gtp_pkt", "kind": "function", "doc": "<p>Parse V2GTP packet =&gt; Separate the V2GTP header from the payload</p>\n\n<p>Check if the packet has Raw layer, then check if it's V2GTP packet\nand then separate the V2GTP header from the payload</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pkt</span><span class=\"p\">:</span> <span class=\"n\">scapy</span><span class=\"o\">.</span><span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Packet</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.decode_v2gtp_exi_msg", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "decode_v2gtp_exi_msg", "kind": "function", "doc": "<p>Decode V2GTP EXI message payload type</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pkt</span><span class=\"p\">:</span> <span class=\"n\">scapy</span><span class=\"o\">.</span><span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Packet</span>,</span><span class=\"param\">\t<span class=\"n\">header</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>,</span><span class=\"param\">\t<span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.decode_v2gtp_sdp", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "decode_v2gtp_sdp", "kind": "function", "doc": "<p>Method for decode Security and Transport Protocol bytes from SDP</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">security_byte</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>, </span><span class=\"param\"><span class=\"n\">transport_proto_byte</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.decode_v2gtp_sdp_request", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "decode_v2gtp_sdp_request", "kind": "function", "doc": "<p>Decode V2GTP SDP request payload type</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pkt</span><span class=\"p\">:</span> <span class=\"n\">scapy</span><span class=\"o\">.</span><span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Packet</span>,</span><span class=\"param\">\t<span class=\"n\">header</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>,</span><span class=\"param\">\t<span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.decode_v2gtp_sdp_response", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "decode_v2gtp_sdp_response", "kind": "function", "doc": "<p>Decode V2GTP SDP response payload type</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pkt</span><span class=\"p\">:</span> <span class=\"n\">scapy</span><span class=\"o\">.</span><span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Packet</span>,</span><span class=\"param\">\t<span class=\"n\">header</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>,</span><span class=\"param\">\t<span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.decode_v2gtp_manufacturer_use", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "decode_v2gtp_manufacturer_use", "kind": "function", "doc": "<p>Decode V2GTP Manufacturer Specific Use payload type</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pkt</span><span class=\"p\">:</span> <span class=\"n\">scapy</span><span class=\"o\">.</span><span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Packet</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.decode_v2gtp_reserved", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "decode_v2gtp_reserved", "kind": "function", "doc": "<p>Decode V2GTP Reserved payload type</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pkt</span><span class=\"p\">:</span> <span class=\"n\">scapy</span><span class=\"o\">.</span><span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Packet</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.prn_decode_v2gtp_pkt", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "prn_decode_v2gtp_pkt", "kind": "function", "doc": "<p>Method for printing decoded V2GTP packet\nas prn function in scapy sniff function</p>\n\n<p>Args:\n    pkt (Packet): scapy Packet</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pkt</span><span class=\"p\">:</span> <span class=\"n\">scapy</span><span class=\"o\">.</span><span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Packet</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.prn_v2gtp_pkt", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "prn_v2gtp_pkt", "kind": "function", "doc": "<p>Methon for printing V2GTP packet as prn function in scapy sniff function</p>\n\n<p>Method for printing V2GTP packet.\nIt will be used as prn function in scapy sniff function.</p>\n\n<p>Args:\n    pkt (Packet): scapy Packet</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pkt</span><span class=\"p\">:</span> <span class=\"n\">scapy</span><span class=\"o\">.</span><span class=\"n\">packet</span><span class=\"o\">.</span><span class=\"n\">Packet</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.decode_v2gtp_pkt", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "decode_v2gtp_pkt", "kind": "function", "doc": "<p>Decode V2GTP packet as given payload type</p>\n\n<p>Args:\n    pkt (Packet): Packet to decode\n    payload_type (str, optional): Payload type to decode. Defaults to \"auto\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pkt</span>, </span><span class=\"param\"><span class=\"n\">payload_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>, </span><span class=\"param\"><span class=\"n\">print_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.decode_v2gtp_pkt_from_file", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "decode_v2gtp_pkt_from_file", "kind": "function", "doc": "<p>Decode V2GTP packet from pcap file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">packet_num</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp.decode_v2gtp_packets", "modulename": "v2gevil.v2gtp.v2gtp", "qualname": "decode_v2gtp_packets", "kind": "function", "doc": "<p>Decode V2GTP packets</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">packets</span>, </span><span class=\"param\"><span class=\"n\">print_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums", "modulename": "v2gevil.v2gtp.v2gtp_enums", "kind": "module", "doc": "<p>Enum for V2GTP</p>\n"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPMessageType", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPMessageType", "kind": "class", "doc": "<p>Enum for V2GTP message types.</p>\n", "bases": "builtins.bytes, enum.Enum"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPMessageType.SDP_REQUEST", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPMessageType.SDP_REQUEST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPMessageType.SDP_REQUEST: b&#x27;\\x90\\x00&#x27;&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPMessageType.SDP_RESPONSE", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPMessageType.SDP_RESPONSE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPMessageType.SDP_RESPONSE: b&#x27;\\x90\\x01&#x27;&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPMessageType.V2GTP_EXI_MSG", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPMessageType.V2GTP_EXI_MSG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPMessageType.V2GTP_EXI_MSG: b&#x27;\\x80\\x01&#x27;&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPProtocols", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPProtocols", "kind": "class", "doc": "<p>Enum for V2GTP protocols.</p>\n", "bases": "builtins.bytes, enum.Enum"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPProtocols.TCP", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPProtocols.TCP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPProtocols.TCP: b&#x27;\\x00&#x27;&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPProtocols.UDP", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPProtocols.UDP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPProtocols.UDP: b&#x27;\\x10&#x27;&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPProtocols.TLS", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPProtocols.TLS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPProtocols.TCP: b&#x27;\\x00&#x27;&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPProtocols.NO_TLS", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPProtocols.NO_TLS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPProtocols.UDP: b&#x27;\\x10&#x27;&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPSecurity", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPSecurity", "kind": "class", "doc": "<p>Enum for security byte in V2GTP SDP request/response.</p>\n", "bases": "builtins.bytes, enum.Enum"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPSecurity.TLS", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPSecurity.TLS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPSecurity.TLS: b&#x27;\\x00&#x27;&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPSecurity.NO_TLS", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPSecurity.NO_TLS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPSecurity.NO_TLS: b&#x27;\\x10&#x27;&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPPorts", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPPorts", "kind": "class", "doc": "<p>Enum for V2GTP ports</p>\n", "bases": "enum.IntEnum"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPPorts.V2G_UDP_SDP_SERVER", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPPorts.V2G_UDP_SDP_SERVER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPPorts.V2G_UDP_SDP_SERVER: 15118&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPPorts.V2G_UDP_SDP_CLIENT_START", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPPorts.V2G_UDP_SDP_CLIENT_START", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPPorts.V2G_UDP_SDP_CLIENT_START: 49152&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPPorts.V2G_UDP_SDP_CLIENT_END", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPPorts.V2G_UDP_SDP_CLIENT_END", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPPorts.V2G_UDP_SDP_CLIENT_END: 65535&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPPorts.V2G_DST_TCP_DATA_START", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPPorts.V2G_DST_TCP_DATA_START", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPPorts.V2G_UDP_SDP_CLIENT_START: 49152&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPPorts.V2G_DST_TCP_DATA_END", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPPorts.V2G_DST_TCP_DATA_END", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPPorts.V2G_UDP_SDP_CLIENT_END: 65535&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPPorts.V2G_SRC_TCP_DATA_START", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPPorts.V2G_SRC_TCP_DATA_START", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPPorts.V2G_UDP_SDP_CLIENT_START: 49152&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPPorts.V2G_SRC_TCP_DATA_END", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPPorts.V2G_SRC_TCP_DATA_END", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPPorts.V2G_UDP_SDP_CLIENT_END: 65535&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPVersion", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPVersion", "kind": "class", "doc": "<p>Enum for V2GTP versions.</p>\n", "bases": "builtins.bytes, enum.Enum"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPVersion.V_0_1", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPVersion.V_0_1", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPVersion.V_0_1: b&#x27;\\x01&#x27;&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPVersion.V_0_1_INVERSE", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPVersion.V_0_1_INVERSE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPVersion.V_0_1_INVERSE: b&#x27;\\xfe&#x27;&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPVersion.CURRENT_VERSION", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPVersion.CURRENT_VERSION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPVersion.V_0_1: b&#x27;\\x01&#x27;&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPVersion.CURRENT_VERSION_INVERSE", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPVersion.CURRENT_VERSION_INVERSE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPVersion.V_0_1_INVERSE: b&#x27;\\xfe&#x27;&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPAddress", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPAddress", "kind": "class", "doc": "<p>Enum for V2GTP IPv6 addresses.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPAddress.MULTICAST_ADDRESS", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPAddress.MULTICAST_ADDRESS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPAddress.MULTICAST_ADDRESS: &#x27;ff02::1&#x27;&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPAddress.STATION", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPAddress.STATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPAddress.STATION: &#x27;fe80::d237:45ff:fe88:b12b&#x27;&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPAddress.CAR", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPAddress.CAR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPAddress.CAR: &#x27;fe80::d237:45ff:fe88:b12a&#x27;&gt;"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPAppProtocols", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPAppProtocols", "kind": "class", "doc": "<p>Enum for V2GTP application protocols.</p>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "v2gevil.v2gtp.v2gtp_enums.V2GTPAppProtocols.PROTOCOL_NAMESPACE", "modulename": "v2gevil.v2gtp.v2gtp_enums", "qualname": "V2GTPAppProtocols.PROTOCOL_NAMESPACE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;V2GTPAppProtocols.PROTOCOL_NAMESPACE: &#x27;urn:iso:15118:2:2013:MsgDef&#x27;&gt;"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();